<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>查斯特部落格 | The Blog Of Chester Tang</title>
  
  <subtitle>查斯特 Chester Tang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chestertang.site/"/>
  <updated>2020-03-12T09:48:53.063Z</updated>
  <id>http://chestertang.site/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R 筆記 - respond_to? / send</title>
    <link href="http://chestertang.site/2020/03/10/zyx0310/"/>
    <id>http://chestertang.site/2020/03/10/zyx0310/</id>
    <published>2020-03-10T02:20:40.000Z</published>
    <updated>2020-03-12T09:48:53.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R筆記-respond-to-send"><a href="#R筆記-respond-to-send" class="headerlink" title="R筆記 - respond_to? / send"></a>R筆記 - respond_to? / send</h1><p>往常的禮拜一是公司部版的日子，而有時 cucumber 沒過或 sync 多了一些空白是家常便飯，不外乎重新再給他跑一次看看（local 沒問題，retry），或者是哪邊稍微修改等等…，結果這次卻到了快下班前才大致上到一個段落，原因想當然就是跟為標題有關，於是又有了這篇文章的誕生…</p><h2 id="respond-to"><a href="#respond-to" class="headerlink" title="respond_to?"></a>respond_to?</h2><p>先來 Ruby doc 的定義</p><blockquote><p>respond_to?(symbol, include_all=false) → true or falseclick to toggle source<br>respond_to?(string, include_all=false) → true or false<br>Returns true if obj responds to the given method. Private and protected methods are included in the search only if the optional second parameter evaluates to true.</p></blockquote><p>我想有看過龍哥的 railsbook 中應該會有看過這段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.all</span><br><span class="line">  respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">    format.json &#123; render <span class="symbol">json:</span> @users &#125;</span><br><span class="line">    format.html &#123; render <span class="symbol">:index</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用 respond_to 可以針對不同的格式（html 或 json）輸出不同的結果。除了用 respond_to 之外，讓我們接著看看另一種做法。</p><p>因此大致上了解了他的用法，不過跟定義有什麼關聯呢？讓我們看下去!</p><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><p>ㄧ樣也是先來看 Ruby doc 定義</p><blockquote><p>send(symbol [, args…]) → objclick to toggle source<br><strong>send</strong>(symbol [, args…]) → obj<br>send(string [, args…]) → obj<br><strong>send</strong>(string [, args…]) → obj<br>Invokes the method identified by symbol, passing it any arguments specified. You can use <strong>send</strong> if the name send clashes with an existing method in obj. When the method is identified by a string, the string is converted to a symbol.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(*args)</span></span></span><br><span class="line">    <span class="string">"Hello "</span> + args.join(<span class="string">' '</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">k = Klass.new</span><br><span class="line">k.send <span class="symbol">:hello</span>, <span class="string">"gentle"</span>, <span class="string">"readers"</span>   <span class="comment">#=&gt; "Hello gentle readers"</span></span><br></pre></td></tr></table></figure><p>再次的我想有看過龍哥的 railsbook 中應該有看過 <code>private 方法</code> 這段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kitty = Cat.new</span><br><span class="line">kitty.gossip          <span class="comment"># =&gt; NoMethodError</span></span><br><span class="line">kitty.send(<span class="symbol">:gossip</span>)   <span class="comment"># =&gt; 我跟你說，你不要跟別人說喔!</span></span><br></pre></td></tr></table></figure><p>不是說呼叫 private 方法的時候不能有明確的接收者嗎？執行 send 方法把 gossip 當做參數傳給它而已，並沒有明確的 receiver！</p><h2 id="來個實例結合兩者吧！"><a href="#來個實例結合兩者吧！" class="headerlink" title="來個實例結合兩者吧！"></a>來個實例結合兩者吧！</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = Object.new</span><br><span class="line">obj.talk</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; undefined method 'talk' for #&lt;Object:0x12345678&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure><p>沒有 <code>talk</code> 這個 method，所以我們可以透過 <code>respond_to?</code> 做檢查，就可以確認是否有這個 method 可以用，避免產生error…</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = Object.new</span><br><span class="line"><span class="keyword">if</span> obj.respond_to?(<span class="string">"talk"</span>)</span><br><span class="line">   obj.talk</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   puts <span class="string">"Sorry, object can't talk!"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>再來換換 <code>send</code> 的方式（前提是要先知道有這個方法）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.talk</span><br><span class="line">obj.send(<span class="string">"talk"</span>)</span><br></pre></td></tr></table></figure><p>但優點在 process 執行時可以動態的呼叫不同 method，什麼意思？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Search for: "</span></span><br><span class="line">request = gets.chomp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> request == <span class="string">"writer"</span></span><br><span class="line">  puts book.writer</span><br><span class="line"><span class="keyword">elsif</span> request == <span class="string">"price"</span></span><br><span class="line">  puts book.price</span><br><span class="line"><span class="keyword">elsif</span> request == <span class="string">"date"</span></span><br><span class="line">  puts book.date</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候就可以改成：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Search for:"</span></span><br><span class="line">request = gets.chomp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> book.respond_to?(request)</span><br><span class="line">  puts book.send(request)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"Input error"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>所以我說再回到今天的問題…</p></blockquote><p>原本寫 code 的人的邏輯想透過 <code>respond_to?</code> 來給值，途中會去讀另一個檔案的預設值 <code>[]</code>，但卻犯了一個天大的錯誤大家也都沒有發現…</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=&gt; xxx.rb</span></span><br><span class="line">setting.value = respond_to?(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>.to_sym)</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; zzz.rb</span></span><br><span class="line">...</span><br><span class="line">protected</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_device_license_transfer_black_list</span></span></span><br><span class="line">  []</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>而攝影大哥為了處理點新東西，在程式碼中多了三元運算子的判斷</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setting.value = respond_to?(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>.to_sym) ? send(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>) : <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>於是就… 還記得前面的定義中埋點梗嘛？</p><blockquote><p><code>Private and protected methods are included in the search only if the optional second parameter evaluates to true.</code></p></blockquote><p>到底為什麼要把這種一點不 <code>protected</code> 的預設值設成 <code>protected</code> 呢？我想這又是另一個故事惹XD</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://ruby-doc.org/core-2.7.0/Object.html#method-i-send" target="_blank" rel="noopener">ruby doc #send</a></li><li><a href="https://ruby-doc.org/core-2.7.0/Object.html#method-i-respond_to-3F" target="_blank" rel="noopener">ruby doc #respond_to?</a></li><li><a href="https://railsbook.tw/chapters/08-ruby-basic-4.html" target="_blank" rel="noopener">類別（Class）與模組（Module）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R筆記-respond-to-send&quot;&gt;&lt;a href=&quot;#R筆記-respond-to-send&quot; class=&quot;headerlink&quot; title=&quot;R筆記 - respond_to? / send&quot;&gt;&lt;/a&gt;R筆記 - respond_to? / send&lt;/h1&gt;&lt;p&gt;往常的禮拜一是公司部版的日子，而有時 cucumber 沒過或 sync 多了一些空白是家常便飯，不外乎重新再給他跑一次看看（local 沒問題，retry），或者是哪邊稍微修改等等…，結果這次卻到了快下班前才大致上到一個段落，原因想當然就是跟為標題有關，於是又有了這篇文章的誕生…&lt;/p&gt;
&lt;h2 id=&quot;respond-to&quot;&gt;&lt;a href=&quot;#respond-to&quot; class=&quot;headerlink&quot; title=&quot;respond_to?&quot;&gt;&lt;/a&gt;respond_to?&lt;/h2&gt;&lt;p&gt;先來 Ruby doc 的定義&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;respond_to?(symbol, include_all=false) → true or falseclick to toggle source&lt;br&gt;respond_to?(string, include_all=false) → true or false&lt;br&gt;Returns true if obj responds to the given method. Private and protected methods are included in the search only if the optional second parameter evaluates to true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想有看過龍哥的 railsbook 中應該會有看過這段&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @users = User.all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  respond_to &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|format|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.json &amp;#123; render &lt;span class=&quot;symbol&quot;&gt;json:&lt;/span&gt; @users &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.html &amp;#123; render &lt;span class=&quot;symbol&quot;&gt;:index&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用 respond_to 可以針對不同的格式（html 或 json）輸出不同的結果。除了用 respond_to 之外，讓我們接著看看另一種做法。&lt;/p&gt;
&lt;p&gt;因此大致上了解了他的用法，不過跟定義有什麼關聯呢？讓我們看下去!&lt;/p&gt;
&lt;h2 id=&quot;send&quot;&gt;&lt;a href=&quot;#send&quot; class=&quot;headerlink&quot; title=&quot;send&quot;&gt;&lt;/a&gt;send&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Ruby" scheme="http://chestertang.site/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - Singleton Thread Fiber Mutex</title>
    <link href="http://chestertang.site/2020/03/10/zyx0313/"/>
    <id>http://chestertang.site/2020/03/10/zyx0313/</id>
    <published>2020-03-10T02:20:40.000Z</published>
    <updated>2020-03-13T07:09:01.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R筆記-Singleton-Thread-Fiber-Mutex"><a href="#R筆記-Singleton-Thread-Fiber-Mutex" class="headerlink" title="R筆記 - Singleton Thread Fiber Mutex"></a>R筆記 - Singleton Thread Fiber Mutex</h1><h2 id="大師開講，看能吸收多少-T-T"><a href="#大師開講，看能吸收多少-T-T" class="headerlink" title="大師開講，看能吸收多少 T_T"></a>大師開講，看能吸收多少 T_T</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R筆記-Singleton-Thread-Fiber-Mutex&quot;&gt;&lt;a href=&quot;#R筆記-Singleton-Thread-Fiber-Mutex&quot; class=&quot;headerlink&quot; title=&quot;R筆記 - Singleton Thread Fiber Mutex&quot;&gt;&lt;/a&gt;R筆記 - Singleton Thread Fiber Mutex&lt;/h1&gt;&lt;h2 id=&quot;大師開講，看能吸收多少-T-T&quot;&gt;&lt;a href=&quot;#大師開講，看能吸收多少-T-T&quot; class=&quot;headerlink&quot; title=&quot;大師開講，看能吸收多少 T_T&quot;&gt;&lt;/a&gt;大師開講，看能吸收多少 T_T&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Ruby" scheme="http://chestertang.site/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 筆記 - 打字 + 閃爍游標</title>
    <link href="http://chestertang.site/2020/03/09/zyx0309/"/>
    <id>http://chestertang.site/2020/03/09/zyx0309/</id>
    <published>2020-03-09T03:00:40.000Z</published>
    <updated>2020-03-10T07:46:48.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打字-閃爍游標"><a href="#打字-閃爍游標" class="headerlink" title="打字 + 閃爍游標"></a>打字 + 閃爍游標</h1><p>首先，要實現這個方法需要透過 animation 來呈現，而動畫的部分也滿容易就能達成。直接以童年的回憶標題來呈現給大家看（腦中的音樂…</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"typing"</span>&gt;</span>我在冒險的起點等你！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打字動畫的原理其實是透過將整個 <code>.typing</code> 的寬度依照 <code>字體</code> 的寬度來變動，所以原本的字體假設是 <code>10em</code>，那 animation 中的 <code>steps(10)</code> 這邊也就需要是相同的寬度，此時在透過 <code>overflow: hidden</code> 屬性將多餘的字體隱藏起來就可以呈現類似打字的動畫感覺。</p><p>閃爍游標的呈現方式，其實是透過 <code>border-right</code> / <code>box-shadow</code> 來達成，<code>animation</code> 中開始、結束都是透明 <code>transparent</code> 的，但在中間 <code>50%</code> 給他有 <code>x軸</code> 陰影，就能達成類似閃爍游標的效果。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.typing</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">  <span class="attribute">animation</span>: typing <span class="number">3.5s</span> <span class="built_in">steps</span>(10, end), blinkCursor <span class="number">0.75s</span> step-end infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打字動畫 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> typing &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 閃爍游標 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> blinkCursor &#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可以來我的 codepen 直接看範例：<a href="https://codepen.io/BeastRush/pen/VwLroyG" target="_blank" rel="noopener">https://codepen.io/BeastRush/pen/VwLroyG</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打字-閃爍游標&quot;&gt;&lt;a href=&quot;#打字-閃爍游標&quot; class=&quot;headerlink&quot; title=&quot;打字 + 閃爍游標&quot;&gt;&lt;/a&gt;打字 + 閃爍游標&lt;/h1&gt;&lt;p&gt;首先，要實現這個方法需要透過 animation 來呈現，而動畫的部分也滿容易就能達成。直接以童年的回憶標題來呈現給大家看（腦中的音樂…&lt;/p&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;typing&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我在冒險的起點等你！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;打字動畫的原理其實是透過將整個 &lt;code&gt;.typing&lt;/code&gt; 的寬度依照 &lt;code&gt;字體&lt;/code&gt; 的寬度來變動，所以原本的字體假設是 &lt;code&gt;10em&lt;/code&gt;，那 animation 中的 &lt;code&gt;steps(10)&lt;/code&gt; 這邊也就需要是相同的寬度，此時在透過 &lt;code&gt;overflow: hidden&lt;/code&gt; 屬性將多餘的字體隱藏起來就可以呈現類似打字的動畫感覺。&lt;/p&gt;
&lt;p&gt;閃爍游標的呈現方式，其實是透過 &lt;code&gt;border-right&lt;/code&gt; / &lt;code&gt;box-shadow&lt;/code&gt; 來達成，&lt;code&gt;animation&lt;/code&gt; 中開始、結束都是透明 &lt;code&gt;transparent&lt;/code&gt; 的，但在中間 &lt;code&gt;50%&lt;/code&gt; 給他有 &lt;code&gt;x軸&lt;/code&gt; 陰影，就能達成類似閃爍游標的效果。&lt;/p&gt;
&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.typing&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: typing &lt;span class=&quot;number&quot;&gt;3.5s&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;steps&lt;/span&gt;(10, end), blinkCursor &lt;span class=&quot;number&quot;&gt;0.75s&lt;/span&gt; step-end infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 打字動畫 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; typing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 閃爍游標 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; blinkCursor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  50% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;也可以來我的 codepen 直接看範例：&lt;a href=&quot;https://codepen.io/BeastRush/pen/VwLroyG&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/BeastRush/pen/VwLroyG&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="HTML5" scheme="http://chestertang.site/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://chestertang.site/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Date 時間的運算</title>
    <link href="http://chestertang.site/2020/03/03/zyx0303/"/>
    <id>http://chestertang.site/2020/03/03/zyx0303/</id>
    <published>2020-03-03T04:00:40.000Z</published>
    <updated>2020-03-08T14:47:48.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Date-時間的運算"><a href="#J-筆記-Date-時間的運算" class="headerlink" title="J 筆記 - Date 時間的運算"></a>J 筆記 - Date 時間的運算</h1><p>早上一進公司除了看到要來面試的下一屆學弟，還有機器服務又壞掉之外，被強大的好朋友問了一個考驗我的問題～剛好要用到 JS 計算時間，所以有了這篇的誕生…</p><h2 id="先來看一下-MDN-的解釋"><a href="#先來看一下-MDN-的解釋" class="headerlink" title="先來看一下 MDN 的解釋"></a>先來看一下 MDN 的解釋</h2><blockquote><p>JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC.</p></blockquote><p>語法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure><p>好了，我想你大概懂的（誤</p><h3 id="Date-物件-多個參數指定年、月、日、時、分、秒、毫秒"><a href="#Date-物件-多個參數指定年、月、日、時、分、秒、毫秒" class="headerlink" title="Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒"></a>Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒</h3><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1996</span>, <span class="number">01</span>, <span class="number">15</span>);</span><br><span class="line"><span class="comment">// 1996-02-14T16:00:00.000Z</span></span><br></pre></td></tr></table></figure><p>有沒有發現一件事情，明明指定的時間是 (1996, 01, 15) 但是最後印出來的時間卻跑出了我的生日（欸？</p><p>其實 JS 不管怎麼輸入，都會是這樣子的（大誤）</p><blockquote><p>JavaScript 表達月份 (month) 是從 0 到 11，0 是一月；11 是十二月。且Date 物件參數的日期，預設的時區 (time zone) 是本地時區 (local time)，也就是你瀏覽器作業系統設定的時區。</p></blockquote><h3 id="日期時間比較-Compare-Dates"><a href="#日期時間比較-Compare-Dates" class="headerlink" title="日期時間比較 (Compare Dates)"></a>日期時間比較 (Compare Dates)</h3><p>可以用 <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;==</code> 或 <code>&gt;==</code> 運算子來比較兩個 Date 物件的時間前後關係：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> someday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someday &gt; today) &#123;</span><br><span class="line">  alert(<span class="string">'Today is before 2022/3/3.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'Today is after 2022/3/3.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果你要比較兩個日期是否相等 - 運算子 <code>==</code>, <code>!=</code>, <code>===</code> 或 <code>!==</code>，你沒辦法直接比較，而是要先將 Date 物件用 <code>date.getTime()</code> 轉換為數值型態才能比較：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> same = d1.getTime() === d2.getTime();    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> notSame = d1.getTime() !== d2.getTime(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>大概簡述是這樣子，如果真正要用到什麼其他的方法，說實在的還是去查文件是比較快的選擇，所以我的同學到底問了我什麼呢？</p><h3 id="JavaScript：將指定日期加上-X-天"><a href="#JavaScript：將指定日期加上-X-天" class="headerlink" title="JavaScript：將指定日期加上 X 天"></a>JavaScript：將指定日期加上 X 天</h3><p>首先，需要先新增一個時間並指定變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>加天數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dateTime = dateTime.setDate(dateTime.getDate()+<span class="number">1</span>);</span><br><span class="line">dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br></pre></td></tr></table></figure><p>有人可能會想到用 <code>getDate()</code> 這樣子抓天數後 或許會超過 31 或者是 小於等於 0，不過因為前面有 <code>setDate()</code> 所以會幫你轉換：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; dateTime = dateTime.setDate(dateTime.getDate()+<span class="number">1</span>);</span><br><span class="line"><span class="number">1583292207881</span></span><br><span class="line">&gt; dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-04</span>T03:<span class="number">23</span>:<span class="number">27.881</span>Z</span><br><span class="line"></span><br><span class="line">&gt; dateTime = dateTime.setDate(dateTime.getDate()<span class="number">-4</span>);</span><br><span class="line"><span class="number">1582946607881</span></span><br><span class="line">&gt; dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-29</span>T03:<span class="number">23</span>:<span class="number">27.881</span>Z</span><br></pre></td></tr></table></figure><p>後來看到桑莫大神寫的</p><p>由於「this」即是指定的時間物件，因此就使用 this 取得「日」再加 -3 天，最後將這個更新後的日期設定給這個時間物件即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.addDays = <span class="function"><span class="keyword">function</span>(<span class="params">days</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setDate(<span class="keyword">this</span>.getDate() + days);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加減天數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">today <span class="comment">// 2020-03-03T03:38:34.674Z</span></span><br><span class="line">today.addDays(<span class="number">-3</span>) <span class="comment">// 2020-02-29T03:38:34.674Z</span></span><br></pre></td></tr></table></figure><h3 id="日期的轉換"><a href="#日期的轉換" class="headerlink" title="日期的轉換"></a>日期的轉換</h3><ul><li><p>Date.prototype.toLocaleString() - 日期與時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleString()</span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br></pre></td></tr></table></figure></li><li><p>Date.prototype.toLocaleDateString() - 日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleDateString()  </span><br><span class="line"><span class="string">'2020-3-3'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Date.prototype.toLocaleTimeString() - 時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleTimeString()</span><br><span class="line"><span class="string">'11:38:34'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="取得其他國家的日期-amp-時間"><a href="#取得其他國家的日期-amp-時間" class="headerlink" title="取得其他國家的日期 &amp; 時間"></a>取得其他國家的日期 &amp; 時間</h3><blockquote><p>dateObj.toLocaleString([locales[, options]])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleString(<span class="string">'zh-TW'</span>); <span class="comment">//台灣</span></span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'en-GB'</span>); <span class="comment">//英國</span></span><br><span class="line"><span class="string">'3/3/2020, 11:38:34 AM'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'ko-KR'</span>); <span class="comment">//韓國</span></span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'en-AU'</span>); <span class="comment">//澳洲</span></span><br><span class="line"><span class="string">'3/3/2020, 11:38:34 AM'</span></span><br></pre></td></tr></table></figure><p>options 就查一查惹ouo</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">[MDN] Date</a></li><li><a href="https://www.fooish.com/javascript/date/parse.html" target="_blank" rel="noopener">JavaScript Date parse()</a></li><li><a href="https://cythilya.github.io/2017/05/17/javascript-date-add-days/" target="_blank" rel="noopener">Summer。桑莫。夏天</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Date-時間的運算&quot;&gt;&lt;a href=&quot;#J-筆記-Date-時間的運算&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Date 時間的運算&quot;&gt;&lt;/a&gt;J 筆記 - Date 時間的運算&lt;/h1&gt;&lt;p&gt;早上一進公司除了看到要來面試的下一屆學弟，還有機器服務又壞掉之外，被強大的好朋友問了一個考驗我的問題～剛好要用到 JS 計算時間，所以有了這篇的誕生…&lt;/p&gt;
&lt;h2 id=&quot;先來看一下-MDN-的解釋&quot;&gt;&lt;a href=&quot;#先來看一下-MDN-的解釋&quot; class=&quot;headerlink&quot; title=&quot;先來看一下 MDN 的解釋&quot;&gt;&lt;/a&gt;先來看一下 MDN 的解釋&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;語法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(dateString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;好了，我想你大概懂的（誤&lt;/p&gt;
&lt;h3 id=&quot;Date-物件-多個參數指定年、月、日、時、分、秒、毫秒&quot;&gt;&lt;a href=&quot;#Date-物件-多個參數指定年、月、日、時、分、秒、毫秒&quot; class=&quot;headerlink&quot; title=&quot;Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒&quot;&gt;&lt;/a&gt;Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒&lt;/h3&gt;&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; birthday = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1996&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1996-02-14T16:00:00.000Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0224~0301</title>
    <link href="http://chestertang.site/2020/02/26/zyx0226/"/>
    <id>http://chestertang.site/2020/02/26/zyx0226/</id>
    <published>2020-02-26T02:20:40.000Z</published>
    <updated>2020-03-02T08:53:44.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0224-0301"><a href="#CodeWar-Weekly-0224-0301" class="headerlink" title="CodeWar Weekly[0224-0301]"></a>CodeWar Weekly[0224-0301]</h1><h2 id="6kyu-Bit-Counting"><a href="#6kyu-Bit-Counting" class="headerlink" title="6kyu Bit Counting"></a>6kyu Bit Counting</h2><p>Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.</p><p>Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case</p><blockquote><p>解題思考：先需要思考如何轉 2 進位，會用到 <code>to_s(2)</code>，再來就有幾種方式跟其方法了<br>ex: count、chars、map、reduce、inject …</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>難得基本上都沒有查的一次～<br>不過後來才想到才有 <code>count</code>，所以還是記錄一下好惹…（雖然沒什麼好紀錄的</p><blockquote><p>Returns the number of elements. If an argument is given, counts the number of elements which equals to obj. If a block is given, counts the number of elements yielding a true value.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">ary.count                    <span class="comment">#=&gt; 4</span></span><br><span class="line">ary.count(<span class="number">2</span>)                 <span class="comment">#=&gt; 2</span></span><br><span class="line">ary.count&#123; <span class="params">|x|</span> x % <span class="number">2</span> == <span class="number">0</span> &#125;  <span class="comment">#=&gt; 3</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><blockquote><p>The toString() method returns a string representing the object.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> Dog(<span class="string">'Gabby'</span>);</span><br><span class="line"></span><br><span class="line">Dog.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">dogToString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span> + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog1.toString());</span><br><span class="line"><span class="comment">// expected output: "Gabby"</span></span><br></pre></td></tr></table></figure><blockquote><p>(下方是雷～～～！！！)</p></blockquote><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map&#123; <span class="params">|x|</span> x.to_i &#125;.reduce&#123; <span class="params">|sum, x|</span> x += sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map(&amp;<span class="symbol">:to_i</span>).inject(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(3):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).count(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> n.toString(<span class="number">2</span>).split(<span class="string">'0'</span>).join(<span class="string">''</span>).length;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> n.toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>,<span class="string">''</span>).length;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>查惹一下正規表示法qq</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0224-0301&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0224-0301&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly[0224-0301]&quot;&gt;&lt;/a&gt;CodeWar Weekly[0224-0301]&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Bit-Counting&quot;&gt;&lt;a href=&quot;#6kyu-Bit-Counting&quot; class=&quot;headerlink&quot; title=&quot;6kyu Bit Counting&quot;&gt;&lt;/a&gt;6kyu Bit Counting&lt;/h2&gt;&lt;p&gt;Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.&lt;/p&gt;
&lt;p&gt;Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解題思考：先需要思考如何轉 2 進位，會用到 &lt;code&gt;to_s(2)&lt;/code&gt;，再來就有幾種方式跟其方法了&lt;br&gt;ex: count、chars、map、reduce、inject …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;&lt;h2 id=&quot;count&quot;&gt;&lt;a href=&quot;#count&quot; class=&quot;headerlink&quot; title=&quot;count&quot;&gt;&lt;/a&gt;count&lt;/h2&gt;&lt;p&gt;難得基本上都沒有查的一次～&lt;br&gt;不過後來才想到才有 &lt;code&gt;count&lt;/code&gt;，所以還是記錄一下好惹…（雖然沒什麼好紀錄的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns the number of elements. If an argument is given, counts the number of elements which equals to obj. If a block is given, counts the number of elements yielding a true value.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0217~0223</title>
    <link href="http://chestertang.site/2020/02/21/zyx0221/"/>
    <id>http://chestertang.site/2020/02/21/zyx0221/</id>
    <published>2020-02-21T05:33:40.000Z</published>
    <updated>2020-02-27T02:42:49.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0217-0223"><a href="#CodeWar-Weekly-0217-0223" class="headerlink" title="CodeWar Weekly[0217-0223]"></a>CodeWar Weekly[0217-0223]</h1><h2 id="6kyu-Highest-Scoring-Word"><a href="#6kyu-Highest-Scoring-Word" class="headerlink" title="6kyu Highest Scoring Word"></a>6kyu Highest Scoring Word</h2><p>Given a string of words, you need to find the highest scoring word.</p><p>Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.</p><p>You need to return the highest scoring word as a string.</p><p>If two words score the same, return the word that appears earliest in the original string.</p><p>All letters will be lowercase and all inputs will be valid.</p><blockquote><p>解題思考：取字母轉成數字會是最大值的詞，取 = <code>max_by</code>，後面的條件就要依照先轉數字 <code>ord</code>，然後在計算… ex: <code>sum</code>, <code>reduce</code>, <code>inject</code> …</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="max-by"><a href="#max-by" class="headerlink" title="max_by"></a>max_by</h2><blockquote><p>max_by {|obj| block } → obj || max_by → an_enumerator<br>Returns the object in enum that gives the maximum value from the given block.<br>If no block is given, an enumerator is returned instead.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">%w(albatross dog horse)</span></span><br><span class="line">a.max_by &#123;<span class="params">|x|</span> x.length &#125;   <span class="comment">#=&gt; "albatross"</span></span><br></pre></td></tr></table></figure><p>跟 <code>max</code> 的不同在，能不能在設定條件而已，原本的 <code>max</code> 只會取開頭字母最大的 <code>ord</code></p><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h2><blockquote><p>The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sentence = <span class="string">'The quick brown fox jumps over the lazy dog.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The character code '</span> + sentence.charCodeAt(index) + <span class="string">' is equal to '</span> + sentence.charAt(index));</span><br><span class="line"><span class="comment">// expected output: "The character code 113 is equal to q"</span></span><br></pre></td></tr></table></figure><h2 id="ord"><a href="#ord" class="headerlink" title="ord"></a>ord</h2><blockquote><p>ord → self<br>Returns the int itself.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?a</span>.ord    <span class="comment">#=&gt; 97</span></span><br></pre></td></tr></table></figure><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  x.split.max_by&#123; <span class="params">|i|</span> i.chars.map&#123; <span class="params">| j |</span> j.ord - <span class="number">96</span> &#125;.sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  x.split.max_by &#123; <span class="params">|w|</span> score_word(w) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score_word</span><span class="params">(word)</span></span></span><br><span class="line">  word.chars.inject(<span class="number">0</span>) &#123; <span class="params">|sum, ch|</span> sum + (ch.ord - <span class="number">96</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.split(<span class="string">' '</span>).reduce(<span class="function">(<span class="params">accum, current</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> score(current) &gt; score(accum) ? current:accum;  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">accum,current</span>) =&gt;</span> &#123; <span class="keyword">return</span> accum+(current.charCodeAt()<span class="number">-96</span>) &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">as</span> = s.split(<span class="string">' '</span>).map(<span class="function"><span class="params">s</span>=&gt;</span>[...s].reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b.charCodeAt(<span class="number">0</span>)<span class="number">-96</span>,<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">' '</span>)[<span class="keyword">as</span>.indexOf(<span class="built_in">Math</span>.max(...as))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="http://ruby-doc.org/core-1.9.3/Integer.html#method-i-ord" target="_blank" rel="noopener">ord</a></li><li><a href="http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-max_by" target="_blank" rel="noopener">max_by</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0217-0223&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0217-0223&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly[0217-0223]&quot;&gt;&lt;/a&gt;CodeWar Weekly[0217-0223]&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Highest-Scoring-Word&quot;&gt;&lt;a href=&quot;#6kyu-Highest-Scoring-Word&quot; class=&quot;headerlink&quot; title=&quot;6kyu Highest Scoring Word&quot;&gt;&lt;/a&gt;6kyu Highest Scoring Word&lt;/h2&gt;&lt;p&gt;Given a string of words, you need to find the highest scoring word.&lt;/p&gt;
&lt;p&gt;Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.&lt;/p&gt;
&lt;p&gt;You need to return the highest scoring word as a string.&lt;/p&gt;
&lt;p&gt;If two words score the same, return the word that appears earliest in the original string.&lt;/p&gt;
&lt;p&gt;All letters will be lowercase and all inputs will be valid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解題思考：取字母轉成數字會是最大值的詞，取 = &lt;code&gt;max_by&lt;/code&gt;，後面的條件就要依照先轉數字 &lt;code&gt;ord&lt;/code&gt;，然後在計算… ex: &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt; …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - empty? blank? present?</title>
    <link href="http://chestertang.site/2020/02/20/zyx0220/"/>
    <id>http://chestertang.site/2020/02/20/zyx0220/</id>
    <published>2020-02-20T08:19:40.000Z</published>
    <updated>2020-02-21T01:51:19.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-筆記-nil-empty-blank-present"><a href="#R-筆記-nil-empty-blank-present" class="headerlink" title="R 筆記 - nil? empty? blank? present?"></a>R 筆記 - nil? empty? blank? present?</h1><p>今天原本在 render 一個 dialog 的邏輯判斷想到用 nil 或者是 [] 來判斷，但寫到一半攝影大哥就寫完了，結果 review 的時候看到寫 <code>present?</code> 方法，所以又有這篇的由來…（其實就是一堆很像的方法，寫完讓自己記住而已qq</p><blockquote><p>然後又默默地在辦公室聽到攝影大哥跟組員說：你為什麼這邊不寫 <code>try</code> ?? 就讓我又想到上一篇（好加在我是這樣寫…</p></blockquote><h2 id="nil"><a href="#nil" class="headerlink" title="nil?"></a>nil?</h2><p>判斷：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[].<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line">&#123;&#125;.<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">""</span>.<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">" "</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">"abc"</span>.<span class="literal">nil</span>?     <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="number">123</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; #false</span></span><br></pre></td></tr></table></figure><p>轉換：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="literal">nil</span>.to_a?      <span class="comment">#=&gt; []</span></span><br><span class="line"><span class="literal">nil</span>.to_c?      <span class="comment">#=&gt; (0+0i)</span></span><br><span class="line"><span class="literal">nil</span>.to_f?      <span class="comment">#=&gt; 0.0</span></span><br><span class="line"><span class="literal">nil</span>.to_i       <span class="comment">#=&gt; 0</span></span><br><span class="line"><span class="literal">nil</span>.to_s       <span class="comment">#=&gt; ""</span></span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty?"></a>empty?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.empty?     <span class="comment">#=&gt; NoMethodError: undefined method `empty?' for nil:NilClass</span></span><br><span class="line">[].empty?      <span class="comment">#=&gt; true</span></span><br><span class="line">&#123;&#125;.empty?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">""</span>.empty?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">" "</span>.empty?     <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">"abc"</span>.empty?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="number">123</span>.empty?     <span class="comment">#=&gt; NoMethodError: undefined method `empty?' for 123:Fixnum</span></span><br></pre></td></tr></table></figure><p>以下方法只有 Rails 有！！！</p><h2 id="blank"><a href="#blank" class="headerlink" title="blank?"></a>blank?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.blank?     <span class="comment">#=&gt; true</span></span><br><span class="line">[].blank?      <span class="comment">#=&gt; true</span></span><br><span class="line">&#123;&#125;.blank?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">""</span>.blank?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">" "</span>.blank?     <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">"abc"</span>.blank?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="number">123</span>.blank?     <span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="present"><a href="#present" class="headerlink" title="present?"></a>present?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.present?   <span class="comment">#=&gt; false</span></span><br><span class="line">[].present?    <span class="comment">#=&gt; false</span></span><br><span class="line">&#123;&#125;.present?    <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">""</span>.present?    <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">" "</span>.present?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">"abc"</span>.present? <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="number">123</span>.present?   <span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><blockquote><p>可以注意到都有些些微差距～又可以發現只有 <code>blank?</code> / <code>present?</code> 不會噴錯（難怪常用XDD</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R-筆記-nil-empty-blank-present&quot;&gt;&lt;a href=&quot;#R-筆記-nil-empty-blank-present&quot; class=&quot;headerlink&quot; title=&quot;R 筆記 - nil? empty? blank? present?&quot;&gt;&lt;/a&gt;R 筆記 - nil? empty? blank? present?&lt;/h1&gt;&lt;p&gt;今天原本在 render 一個 dialog 的邏輯判斷想到用 nil 或者是 [] 來判斷，但寫到一半攝影大哥就寫完了，結果 review 的時候看到寫 &lt;code&gt;present?&lt;/code&gt; 方法，所以又有這篇的由來…（其實就是一堆很像的方法，寫完讓自己記住而已qq&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然後又默默地在辦公室聽到攝影大哥跟組員說：你為什麼這邊不寫 &lt;code&gt;try&lt;/code&gt; ?? 就讓我又想到上一篇（好加在我是這樣寫…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;nil&quot;&gt;&lt;a href=&quot;#nil&quot; class=&quot;headerlink&quot; title=&quot;nil?&quot;&gt;&lt;/a&gt;nil?&lt;/h2&gt;&lt;p&gt;判斷：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[].&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;轉換：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_a?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_c?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; (0+0i)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_f?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; 0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_i       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_s       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; &quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;empty&quot;&gt;&lt;a href=&quot;#empty&quot; class=&quot;headerlink&quot; title=&quot;empty?&quot;&gt;&lt;/a&gt;empty?&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; NoMethodError: undefined method `empty?&#39; for nil:NilClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[].empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;.empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;.empty?   &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; NoMethodError: undefined method `empty?&#39; for 123:Fixnum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://chestertang.site/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://chestertang.site/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0210~0216</title>
    <link href="http://chestertang.site/2020/02/13/zyx0213/"/>
    <id>http://chestertang.site/2020/02/13/zyx0213/</id>
    <published>2020-02-13T09:18:40.000Z</published>
    <updated>2020-02-19T15:05:05.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0210-0216"><a href="#CodeWar-Weekly-0210-0216" class="headerlink" title="CodeWar Weekly - 0210~0216"></a>CodeWar Weekly - 0210~0216</h1><h2 id="6kyu-Unique-In-Order"><a href="#6kyu-Unique-In-Order" class="headerlink" title="6kyu Unique In Order"></a>6kyu Unique In Order</h2><p>Implement the function <code>unique_in_order</code> which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.</p><p>For example:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unique_in_order(<span class="string">'AAAABBBCCDAABBB'</span>) == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line">unique_in_order(<span class="string">'ABBCcAD'</span>)         == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'c'</span>, <span class="string">'A'</span>, <span class="string">'D'</span>]</span><br><span class="line">unique_in_order([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])       == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>解題思考：輸入值 <code>iterable</code> 可能是「字串」或「陣列」，三元運算式，輸出結果可知不能用 <code>uniq</code> 來解</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><blockquote><p>enum.chunk {|elt| key }.each {|key, ary| … }<br>enum.chunk(initial_state) {|elt, state| key }.each {|key, ary| … }</p></blockquote><p>For example, consecutive even numbers and odd numbers can be splitted as follows.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>].chunk &#123;<span class="params">|n|</span></span><br><span class="line">  n.even?</span><br><span class="line">&#125;.each &#123;<span class="params">|even, ary|</span></span><br><span class="line">  p [even, ary]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; [false, [3, 1]]</span></span><br><span class="line"><span class="comment">#   [true, [4]]</span></span><br><span class="line"><span class="comment">#   [false, [1, 5, 9]]</span></span><br><span class="line"><span class="comment">#   [true, [2, 6]]</span></span><br><span class="line"><span class="comment">#   [false, [5, 3, 5]]</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><blockquote><p>The push() method adds one or more elements to the end of an array and returns the new length of the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">'pigs'</span>, <span class="string">'goats'</span>, <span class="string">'sheep'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = animals.push(<span class="string">'cows'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array ["pigs", "goats", "sheep", "cows"]</span></span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">'chickens'</span>, <span class="string">'cats'</span>, <span class="string">'dogs'</span>);</span><br></pre></td></tr></table></figure><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><blockquote><p>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">'spray'</span>, <span class="string">'limit'</span>, <span class="string">'elite'</span>, <span class="string">'exuberant'</span>, <span class="string">'destruction'</span>, <span class="string">'present'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = words.filter(<span class="function"><span class="params">word</span> =&gt;</span> word.length &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// expected output: Array ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure><h2 id="Spread-syntax-…x-ES6"><a href="#Spread-syntax-…x-ES6" class="headerlink" title="Spread syntax […x] ES6"></a>Spread syntax […x] ES6</h2><blockquote><p>Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum.apply(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure><blockquote><p>(下方是我寫的一些解題方法，有雷請小心服用ｏｕｏ～～)</p></blockquote><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  iterable.is_a?(String) ? iterable.split(<span class="string">''</span>).chunk&#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x, ary|</span> x &#125;</span><br><span class="line">                         : iterable.chunk&#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x, ary|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  (iterable.is_a?(String) ? iterable.chars </span><br><span class="line">                          : iterable )</span><br><span class="line">                          .chunk &#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">var</span> last = <span class="string">''</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iterable.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(iterable[i] !== last)&#123;</span><br><span class="line">      last = iterable[i]</span><br><span class="line">      result.push(last);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder=<span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> iterable.split(<span class="string">''</span>).filter(<span class="function">(<span class="params">a, i</span>) =&gt;</span> a !== iterable[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(3):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder=<span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...iterable].filter(<span class="function">(<span class="params">a, i</span>) =&gt;</span> a !== iterable[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://apidock.com/ruby/Enumerable/chunk" target="_blank" rel="noopener">chunk</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array.prototype.push()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.filter()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread syntax</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0210-0216&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0210-0216&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly - 0210~0216&quot;&gt;&lt;/a&gt;CodeWar Weekly - 0210~0216&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Unique-In-Order&quot;&gt;&lt;a href=&quot;#6kyu-Unique-In-Order&quot; class=&quot;headerlink&quot; title=&quot;6kyu Unique In Order&quot;&gt;&lt;/a&gt;6kyu Unique In Order&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;unique_in_order&lt;/code&gt; which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order(&lt;span class=&quot;string&quot;&gt;&#39;AAAABBBCCDAABBB&#39;&lt;/span&gt;) == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order(&lt;span class=&quot;string&quot;&gt;&#39;ABBCcAD&#39;&lt;/span&gt;)         == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])       == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;解題思考：輸入值 &lt;code&gt;iterable&lt;/code&gt; 可能是「字串」或「陣列」，三元運算式，輸出結果可知不能用 &lt;code&gt;uniq&lt;/code&gt; 來解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;&lt;h2 id=&quot;chunk&quot;&gt;&lt;a href=&quot;#chunk&quot; class=&quot;headerlink&quot; title=&quot;chunk&quot;&gt;&lt;/a&gt;chunk&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;enum.chunk {|elt| key }.each {|key, ary| … }&lt;br&gt;enum.chunk(initial_state) {|elt, state| key }.each {|key, ary| … }&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - try、try! 和 &amp;.</title>
    <link href="http://chestertang.site/2020/02/05/zyx0205/"/>
    <id>http://chestertang.site/2020/02/05/zyx0205/</id>
    <published>2020-02-05T06:20:40.000Z</published>
    <updated>2020-02-10T09:50:03.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="try、try-和-amp-（safe-navigation-operator）"><a href="#try、try-和-amp-（safe-navigation-operator）" class="headerlink" title="try、try! 和 &amp;.（safe navigation operator）"></a>try、try! 和 &amp;.（safe navigation operator）</h1><p>之前在做 Project 中因為沒有資料導致沒有該物件方法就噴錯，之後知道了 <code>&amp;.</code> 的用法，但也沒有特別理解（反正就只知道如果沒有這個方法會忽略不執行），但最近上班後又遇到一樣的問題，攝影大哥前輩秀了 <code>try</code> 方法，導致我很好奇所以特別查了一下它的用途，也就促使這篇文章的誕生。</p><blockquote><p>來點例子，讓大家能更了解這些方法的使用，希望之後在判斷 nil 值時，能有所幫助～</p></blockquote><p>在解釋之前，我們先從 Ruby 的 tap method 開始說起吧…</p><h2 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h2><p>其實在寫這篇之前，我也完全不知道這個方法，所以查了文件，來看看 Ruby API 文件的說明：</p><blockquote><p>Yields x to the block, and then returns x.</p></blockquote><p><code>tap</code> 是透過 yield 某個 <code>object物件</code> 進入 block，再傳回此 object。就如同以下（原始碼）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># activesupport/lib/active_support/core_ext/object/misc.rb</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tap</span></span></span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">self</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代表著可以用於檢查 method chain，更便於 <code>除錯</code> 以及 <code>簡化程式碼</code>！（什麼意思呢？）</p><h3 id="用途一：除錯"><a href="#用途一：除錯" class="headerlink" title="用途一：除錯"></a>用途一：除錯</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">5</span>).tap &#123; <span class="params">|x|</span> puts <span class="string">"original: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#1..5</span></span><br><span class="line">.to_a.tap&#123; <span class="params">|x|</span> puts <span class="string">"array: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#  [0] 1,</span></span><br><span class="line">  <span class="comment">#  [1] 2,</span></span><br><span class="line">  <span class="comment">#  [2] 3,</span></span><br><span class="line">  <span class="comment">#  [3] 4,</span></span><br><span class="line">  <span class="comment">#  [4] 5</span></span><br><span class="line">  <span class="comment">#]</span></span><br><span class="line">.select&#123; <span class="params">|x|</span> x%<span class="number">2</span> == <span class="number">0</span> &#125;.tap&#123; <span class="params">|x|</span> puts <span class="string">"evens: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#evens: [2, 4]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#   [0] 2,</span></span><br><span class="line">  <span class="comment">#   [1] 4</span></span><br><span class="line">  <span class="comment">#]</span></span><br><span class="line">.map&#123; <span class="params">|x|</span> x*x &#125;.tap&#123; <span class="params">|x|</span> puts <span class="string">"squares: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#evens: [2, 4]</span></span><br><span class="line">  <span class="comment">#squares: [4, 16]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#   [0] 4,</span></span><br><span class="line">  <span class="comment">#   [1] 16</span></span><br><span class="line">  <span class="comment">#]</span></span><br></pre></td></tr></table></figure><h3 id="用途二：簡化程式碼"><a href="#用途二：簡化程式碼" class="headerlink" title="用途二：簡化程式碼"></a>用途二：簡化程式碼</h3><p>不用先宣告變數～直接塞進去ouo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].tap&#123; <span class="params">|i|</span> i &lt;&lt; <span class="string">"abc"</span> &#125;</span><br><span class="line"><span class="string">''</span>.tap&#123; <span class="params">|i|</span> i &lt;&lt; <span class="string">"do_some_thing"</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>tap enables you to “tap into” a method chain and perform some tangential function.</p></blockquote><h2 id="amp-（safe-navigation-operator）"><a href="#amp-（safe-navigation-operator）" class="headerlink" title="&amp;.（safe navigation operator）"></a>&amp;.（safe navigation operator）</h2><p>safe navigation operator 使用起來跟等等底下要說的 <code>try!</code> 相似，唯一不同的點就是寫法簡潔更多。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REGEX = <span class="regexp">/(ruby) is (\w+)/i</span></span><br><span class="line"><span class="string">"Ruby is awesome!"</span>.match(REGEX).values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># =&gt; ["Ruby", "awesome"]</span></span><br><span class="line"><span class="string">"Python is fascinating!"</span>.match(REGEX).values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># NoMethodError: undefined method `values_at' for nil:NilClass</span></span><br><span class="line"><span class="string">"Python is fascinating!"</span>.match(REGEX)&amp;.values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>上述的方法是在 Ruby 內建的 method，而下方的 try 和 try! 是在 Rails 才有的 method！</p></blockquote><hr><h2 id="try-a-amp-b"><a href="#try-a-amp-b" class="headerlink" title="try(*a, &amp;b)"></a>try(*a, &amp;b)</h2><p>在使用方法 <code>try</code> 時，不用擔心前面的對象沒有後面這個方法導致噴錯（Nilclass）。就如同以下（原始碼）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try</span><span class="params">(*a, &amp;b)</span></span></span><br><span class="line">  <span class="keyword">if</span> a.empty? &amp;&amp; block_given?</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    public_send(*a, &amp;b) <span class="keyword">if</span> respond_to?(a.first)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try</span><span class="params">(*args)</span></span></span><br><span class="line">  <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代表著如果只接受 block 則 yield slef 給 block，否則就執行 <code>public_send</code> ，而 <code>public_send</code> 只會 <code>call public_method</code>（什麼意思呢？）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.try(<span class="symbol">:spouse</span>).try(<span class="symbol">:name</span>)</span><br></pre></td></tr></table></figure><p>轉換後的意思其實是</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.spouse.name <span class="keyword">if</span> @person &amp;&amp; @person.spouse</span><br></pre></td></tr></table></figure><p>這也如同開頭所說，不用擔心前面的對象沒有後面這個方法導致噴錯，因為它已經是個判斷了！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.try(<span class="symbol">:non_existing_method</span>) <span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><p>轉換後的意思其實是</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.non_existing_method <span class="keyword">if</span> @person.respond_to?(<span class="symbol">:non_existing_method</span>) <span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><p>由此可知到，try 的用法就像是 Ruby 中的 <code>Object#send</code> 一樣，可以讓你把 method 當作 argument 傳入object。</p><p>但是跟 send 不同的是，當 receiving object（receiver）的該 method 不存在時，不會觸發 <code>NoMethodError</code>，而是回傳 nil 值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user.try(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br><span class="line">user.send(<span class="symbol">:should_be_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `should_be_error' for #&lt;User:0x007fca78bf5848&gt;</span></span><br></pre></td></tr></table></figure><h2 id="try-a-amp-b-1"><a href="#try-a-amp-b-1" class="headerlink" title="try!(*a, &amp;b)"></a>try!(*a, &amp;b)</h2><p>用法跟 try 相同，唯一的區別是，當傳入的 argument（method）不存在時和 receiving object 不是 nil 時，會觸發 NoMethodError exception，而不是 nil；而當 receiving object 是 nil 值時，則會回傳 nil。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user = User.new</span><br><span class="line">user.try(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br><span class="line">user.try!(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `account' for #&lt;User:0x007fca7cf91340&gt;</span></span><br><span class="line">user.try!(<span class="symbol">:should_be_error</span>).try!(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `account' for #&lt;User:0x007fca7cf91340&gt;</span></span><br><span class="line">user.try(<span class="symbol">:should_be_error</span>).try!(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://apidock.com/ruby/Object/tap" target="_blank" rel="noopener">API dock tap</a></li><li><a href="https://ruby-china.org/topics/5348" target="_blank" rel="noopener">分享 Rails 技巧之 tap &amp; try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try" target="_blank" rel="noopener">devdocs object#try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try" target="_blank" rel="noopener">Object#try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try-21" target="_blank" rel="noopener">Object#try!</a></li><li><a href="https://medium.com/@pk60905/rails-try-try-%E5%92%8C-safe-navigation-operator-8503ad9b958a" target="_blank" rel="noopener">try、try! 和 &amp;.</a></li><li><a href="https://ruby-doc.org/core-2.6/doc/syntax/calling_methods_rdoc.html#label-Safe+navigation+operator" target="_blank" rel="noopener">ruby-doc.org Safe navigation operator</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;try、try-和-amp-（safe-navigation-operator）&quot;&gt;&lt;a href=&quot;#try、try-和-amp-（safe-navigation-operator）&quot; class=&quot;headerlink&quot; title=&quot;try、try! 和 &amp;amp;.（safe navigation operator）&quot;&gt;&lt;/a&gt;try、try! 和 &amp;amp;.（safe navigation operator）&lt;/h1&gt;&lt;p&gt;之前在做 Project 中因為沒有資料導致沒有該物件方法就噴錯，之後知道了 &lt;code&gt;&amp;amp;.&lt;/code&gt; 的用法，但也沒有特別理解（反正就只知道如果沒有這個方法會忽略不執行），但最近上班後又遇到一樣的問題，攝影大哥前輩秀了 &lt;code&gt;try&lt;/code&gt; 方法，導致我很好奇所以特別查了一下它的用途，也就促使這篇文章的誕生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;來點例子，讓大家能更了解這些方法的使用，希望之後在判斷 nil 值時，能有所幫助～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在解釋之前，我們先從 Ruby 的 tap method 開始說起吧…&lt;/p&gt;
&lt;h2 id=&quot;tap&quot;&gt;&lt;a href=&quot;#tap&quot; class=&quot;headerlink&quot; title=&quot;tap&quot;&gt;&lt;/a&gt;tap&lt;/h2&gt;&lt;p&gt;其實在寫這篇之前，我也完全不知道這個方法，所以查了文件，來看看 Ruby API 文件的說明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yields x to the block, and then returns x.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;tap&lt;/code&gt; 是透過 yield 某個 &lt;code&gt;object物件&lt;/code&gt; 進入 block，再傳回此 object。就如同以下（原始碼）：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# activesupport/lib/active_support/core_ext/object/misc.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tap&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代表著可以用於檢查 method chain，更便於 &lt;code&gt;除錯&lt;/code&gt; 以及 &lt;code&gt;簡化程式碼&lt;/code&gt;！（什麼意思呢？）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://chestertang.site/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://chestertang.site/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Repository</title>
    <link href="http://chestertang.site/2020/02/01/zyx0201/"/>
    <id>http://chestertang.site/2020/02/01/zyx0201/</id>
    <published>2020-02-01T02:30:40.000Z</published>
    <updated>2020-02-04T06:08:54.067Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇的 <a href="https://chestertang.site/2020/01/31/zyx0131/">再談 Docker Container</a> 的介紹中對於 Docker Container 有了更深入的了解，接下來換來更深入瞭解 Docker Repository 吧！下篇就是 Deploy ～快到惹www</p><h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><blockquote><p>Repository(倉庫)、Registry(伺服器)，傻傻分不清楚？</p></blockquote><p>每個 Registry 上可以有多個 Repository，而每個 Repository 下面有多個 Image。簡單來說，Repository 可以被認為是一個具體的專案或目錄，例如對於 Repository 位址 dl.dockerpool.com/ubuntu 來說，dl.dockerpool.com 是註冊 Registry 位址，ubuntu 是 Repository 名稱。</p><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方維護了一個 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中包括了超過 15,000 的 Image。大部分需求，都可以透過 Docker Hub 直接下載 Image 來實作。</p><h3 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h3><p>可以透過執行 docker login 指令來輸入使用者名稱、密碼和電子信箱來完成註冊和登錄。 註冊成功後，本地使用者目錄的 <code>.dockercfg</code> 中將保存使用者的認證資訊。</p><p>或者可以直接到官方註冊帳號密碼：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>使用者無需登錄即可透過 <code>docker search</code> 指令來查詢 Docker Hub 中的 Image，並利用 <code>docker pull</code> 將它下載到 local 端。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker search ruby</span><br><span class="line"></span><br><span class="line">NAME                         DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ruby                         Ruby is a dynamic, reflective, object-orient…   1823                [OK]</span><br><span class="line">circleci/ruby                Ruby is a dynamic, reflective, object-orient…   67</span><br><span class="line">starefossen/ruby-node        Docker Image with Ruby and Node.js installed    34                                      [OK]</span><br><span class="line">heroku/ruby                  Docker Image <span class="keyword">for</span> Heroku Ruby                    22                                      [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下載官方 ruby Image 到 local 端</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull ruby</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ruby</span><br><span class="line">8f0fdd3eaac0: Pull complete</span><br><span class="line">d918eaefd9de: Pull complete</span><br><span class="line">43bf3e3107f5: Pull complete</span><br><span class="line">27622921edb2: Pull complete</span><br><span class="line">dcfa0aa1ae2c: Pull complete</span><br><span class="line">0e1f1dc37f65: Pull complete</span><br><span class="line">ebd3e50ed509: Pull complete</span><br><span class="line">660f560ba0a3: Pull complete</span><br><span class="line">Digest: sha256:...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ruby:latest</span><br><span class="line">docker.io/library/ruby:latest</span><br></pre></td></tr></table></figure><p>看看剛剛下載的 ruby Image 吧！</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2                  3bae0e76683f        8 days ago          447MB</span><br><span class="line">ruby                  latest              fb53c5f433da        3 weeks ago         842MB</span><br></pre></td></tr></table></figure><p>反之當然，也可以在登錄後透過 docker push 將 Image 推送到 Docker Hub</p><h3 id="自動建立"><a href="#自動建立" class="headerlink" title="自動建立"></a>自動建立</h3><p>自動建立（Automated Builds）功能對於需要經常升級 Image 的人來說很方便。有時候，使用者建立了 Image，安裝了某個軟體，如果軟體發布新版本則需要手動更新 Image。</p><p>此外，也允許使用者透過 Docker Hub 指定跟蹤一個目標網站（目前支援 GitHub 或 BitBucket）上的專案，一旦專案發生新的 push，則自動執行建立。</p><p>設定自動建立，包括以下的步驟：</p><ul><li>建立並登入 Docker Hub，以及目標網站</li><li>在目標網站中連接帳戶到 Docker Hub</li><li>在 Docker Hub 中設定自動建立</li><li>選取一個目標網站中的專案（需要含 Dockerfile）和分支</li><li>指定 Dockerfile 的位置，並提交建立</li></ul><p>之後，可以在 Docker Hub 的自動建立頁面 中跟蹤每次建立的狀態</p><h2 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h2><p>有時候使用 Docker Hub 這樣的公共 Repository 可能不方便，使用者可以建立一個本地 Repository 供私人使用。</p><h2 id="安裝執行-docker-registry"><a href="#安裝執行-docker-registry" class="headerlink" title="安裝執行 docker-registry"></a>安裝執行 docker-registry</h2><h3 id="容器執行"><a href="#容器執行" class="headerlink" title="容器執行"></a>容器執行</h3><p>在安裝了 Docker 後，可以透過取得官方 registry Image 來執行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>這將使用官方的 registry Image 來啟動本地的私有 Repository。 使用者可以透過指定參數來設定私有 Repository 位置，例如設定 Iamge 儲存到 Amazon S3 服務。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">       -e SETTINGS_FLAVOR=s3 \</span><br><span class="line">       -e AWS_BUCKET=acme-docker \</span><br><span class="line">       -e STORAGE_PATH=/registry \</span><br><span class="line">       -e AWS_KEY=AKIAHSHB43HS3J92MXZ \</span><br><span class="line">       -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \</span><br><span class="line">       -e SEARCH_BACKEND=sqlalchemy \</span><br><span class="line">       -p 5000:5000 \</span><br><span class="line">       registry</span><br></pre></td></tr></table></figure><h3 id="在私有-Repository-上傳、下載、搜索-Image"><a href="#在私有-Repository-上傳、下載、搜索-Image" class="headerlink" title="在私有 Repository 上傳、下載、搜索 Image"></a>在私有 Repository 上傳、下載、搜索 Image</h3><p>建立好私有 Repository 之後，就可以使用 docker tag 來標記一個 Image，然後推送它到 Repository，別的機器上就可以下載下了。例如私有 Repository 位址為 192.168.7.26:5000。</p><p>先來複製一個 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry              latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">chestertang/sinatra   v2                  3bae0e76683f        8 days ago          447MB</span><br><span class="line"></span><br><span class="line">docker tag 708bc6af7e5e 192.168.7.26:5000/<span class="built_in">test</span></span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry                 latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">192.168.7.26:5000/<span class="built_in">test</span>   latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">chestertang/sinatra      v2                  3bae0e76683f        8 days ago          447MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker push</code> 上傳 <code>192.168.7.26:5000/test</code> Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.7.26:5000/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">The push refers to a repository [192.168.7.26:5000/<span class="built_in">test</span>] (len: 1)</span><br><span class="line">Sending image list</span><br><span class="line">Pushing repository 192.168.7.26:5000/<span class="built_in">test</span> (1 tags)</span><br><span class="line">Image 511136ea3c5a already pushed, skipping</span><br><span class="line">Image 9bad880da3d2 already pushed, skipping</span><br><span class="line">Image 25f11f5fb0cb already pushed, skipping</span><br><span class="line">Image ebc34468f71d already pushed, skipping</span><br><span class="line">Image 2318d26665ef already pushed, skipping</span><br><span class="line">Image ba5877dc9bec already pushed, skipping</span><br><span class="line">Pushing tag <span class="keyword">for</span> rev [ba5877dc9bec] on &#123;http://192.168.7.26:5000/v1/repositories/<span class="built_in">test</span>/tags/latest&#125;</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 查看倉庫中的映像檔</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.7.26:5000/v1/search</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"num_results"</span>: 7, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/miaxis_j2ee"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/tomcat"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/ubuntu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/ubuntu_office"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/desktop_ubu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"dockerfile/ubuntu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/test"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>這樣就代表完成啦！</p><h2 id="設定檔案"><a href="#設定檔案" class="headerlink" title="設定檔案"></a>設定檔案</h2><p>Docker 的 Registry 利用設定檔案提供了一些 REPOSITORY 的模組（flavor），使用者可以來進行開發或部署。</p><h3 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h3><p>在 <code>config_sample.yml</code> 檔案中，可以如下：</p><ul><li><code>common</code>：基礎設定</li><li><code>local</code>：儲存資料到本地檔案系統</li><li><code>s3</code>：儲存資料到 AWS S3 中</li><li><code>dev</code>：使用 local 模組的基本設定</li><li><code>test</code>：單元測試使用</li><li><code>prod</code>：生產環境設定（基本上跟s3設定類似）</li><li><code>gcs</code>：儲存資料到 Google 的雲端</li><li><code>swift</code>：儲存資料到 OpenStack Swift 服務</li><li><code>glance</code>：儲存資料到 OpenStack Glance 服務，本地檔案系統為後備</li><li><code>glance-swift</code>：儲存資料到 OpenStack Glance 服務，Swift 為後備</li><li><code>elliptics</code>：儲存資料到 Elliptics key/value 儲存</li></ul><h3 id="範例設定"><a href="#範例設定" class="headerlink" title="範例設定"></a>範例設定</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">common:</span><br><span class="line">  loglevel: info</span><br><span class="line">  search_backend: <span class="string">"_env:SEARCH_BACKEND:"</span></span><br><span class="line">  sqlalchemy_index_database: <span class="string">"_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db"</span></span><br><span class="line"></span><br><span class="line">prod:</span><br><span class="line">  loglevel: warn</span><br><span class="line">  storage: s3</span><br><span class="line">  s3_access_key: _env:AWS_S3_ACCESS_KEY</span><br><span class="line">  s3_secret_key: _env:AWS_S3_SECRET_KEY</span><br><span class="line">  s3_bucket: _env:AWS_S3_BUCKET</span><br><span class="line">  boto_bucket: _env:AWS_S3_BUCKET</span><br><span class="line">  storage_path: /srv/docker</span><br><span class="line">  smtp_host: localhost</span><br><span class="line">  from_addr: docker@myself.com</span><br><span class="line">  to_addr: my@myself.com</span><br><span class="line"></span><br><span class="line">dev:</span><br><span class="line">  loglevel: debug</span><br><span class="line">  storage: <span class="built_in">local</span></span><br><span class="line">  storage_path: /home/myself/docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">  storage: <span class="built_in">local</span></span><br><span class="line">  storage_path: /tmp/tmpdockertmp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇的 &lt;a href=&quot;https://chestertang.site/2020/01/31/zyx0131/&quot;&gt;再談 Docker Container&lt;/a&gt; 的介紹中對於 Docker Container 有了更深入的了解，接下來換來更深入瞭解 Docker Repository 吧！下篇就是 Deploy ～快到惹www&lt;/p&gt;
&lt;h1 id=&quot;Repository&quot;&gt;&lt;a href=&quot;#Repository&quot; class=&quot;headerlink&quot; title=&quot;Repository&quot;&gt;&lt;/a&gt;Repository&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Repository(倉庫)、Registry(伺服器)，傻傻分不清楚？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每個 Registry 上可以有多個 Repository，而每個 Repository 下面有多個 Image。簡單來說，Repository 可以被認為是一個具體的專案或目錄，例如對於 Repository 位址 dl.dockerpool.com/ubuntu 來說，dl.dockerpool.com 是註冊 Registry 位址，ubuntu 是 Repository 名稱。&lt;/p&gt;
&lt;h2 id=&quot;Docker-Hub&quot;&gt;&lt;a href=&quot;#Docker-Hub&quot; class=&quot;headerlink&quot; title=&quot;Docker Hub&quot;&gt;&lt;/a&gt;Docker Hub&lt;/h2&gt;&lt;p&gt;目前 Docker 官方維護了一個 &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Hub&lt;/a&gt;，其中包括了超過 15,000 的 Image。大部分需求，都可以透過 Docker Hub 直接下載 Image 來實作。&lt;/p&gt;
&lt;h3 id=&quot;登入&quot;&gt;&lt;a href=&quot;#登入&quot; class=&quot;headerlink&quot; title=&quot;登入&quot;&gt;&lt;/a&gt;登入&lt;/h3&gt;&lt;p&gt;可以透過執行 docker login 指令來輸入使用者名稱、密碼和電子信箱來完成註冊和登錄。 註冊成功後，本地使用者目錄的 &lt;code&gt;.dockercfg&lt;/code&gt; 中將保存使用者的認證資訊。&lt;/p&gt;
&lt;p&gt;或者可以直接到官方註冊帳號密碼：&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Container</title>
    <link href="http://chestertang.site/2020/01/31/zyx0131/"/>
    <id>http://chestertang.site/2020/01/31/zyx0131/</id>
    <published>2020-01-31T04:04:40.000Z</published>
    <updated>2020-01-30T07:42:02.474Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇 <a href="https://chestertang.site/2020/01/30/zyx0130/">再談 Docker Image</a> 的介紹中對於 Docker Image 有了更深入的了解，接下來換 Docker Container 吧！下篇還有 Docker Repository，再來就是實際 Deploy 惹～再等等啊w</p><h1 id="再談-Docker-Container"><a href="#再談-Docker-Container" class="headerlink" title="再談 Docker Container"></a>再談 Docker Container</h1><h2 id="啟動-Container"><a href="#啟動-Container" class="headerlink" title="啟動 Container"></a>啟動 Container</h2><p>啟動容器有兩種方式，一種是將 Docker Image 新建一個 Container 並啟動，另外一個是將終止狀態（stopped）的 Container 重新啟動。</p><h3 id="新建並啟動"><a href="#新建並啟動" class="headerlink" title="新建並啟動"></a>新建並啟動</h3><p>透過 <code>docker run</code> 給他新建啟動起來～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure><p>其中，<code>-t</code> 指令讓 Docker 分配一個虛擬終端（pseudo-tty）並綁定到 Container 的 stdin 上，<code>-i</code> 則讓 Container 的 stdin 保持打開。意思是，使用者可以透過所建立的終端來輸入指令，例如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@af8bae53bdd3:/<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">root@af8bae53bdd3:/<span class="comment"># ls</span></span><br><span class="line">bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>當利用 <code>docker run</code> 來建立 Container 時，Docker 在後臺執行的標準操作包括：</p><ul><li>檢查本地是否存在指定的 Image，不存在就從 Repository Hub 下載</li><li>利用 Image 建立並啟動一個 Container</li><li>分配一個檔案系統，並在 Read-only 的 Image 層外面掛載一層可讀寫層</li><li>從宿主主機設定的網路橋界面中橋接一個虛擬埠到容器中去</li><li>從位址池中設定一個 IP 位址給 Container </li><li>執行使用者指定的應用程式</li><li>執行完畢後 Container 被終止</li></ul><h3 id="啟動已終止-Container"><a href="#啟動已終止-Container" class="headerlink" title="啟動已終止 Container"></a>啟動已終止 Container</h3><p>首先，先來看看目前的 Container 狀態</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Exited (0) 3 seconds ago        agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><p>從狀態（STATUS）中可以知道目前有啟動的 Container，現在透過 <code>docker start</code>，直接將已經終止的 Container（dd1c54fef918）啟動起來w</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker start dd1c54fef918</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Up 3 seconds                    agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><h2 id="停止-Container"><a href="#停止-Container" class="headerlink" title="停止 Container"></a>停止 Container</h2><p>跟上面就很類似了，相對的有 <code>start</code> 就會有 <code>stop</code></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Up 3 seconds                    agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br><span class="line"></span><br><span class="line">docker stop dd1c54fef918</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Exited (0) 2 seconds ago        agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><p>此外，當 Docker Container 中指定的應用停止時，Container 也自動停止。例如退出啟動的一個終端機 Container，使用者透過 exit 命令或 Ctrl+d 來退出終端機時，所建立的 Container 也隨之結束。</p><blockquote><p><code>docker restart</code> 命令會將一個執行中的 Container 終止，然後再重新啟動。</p></blockquote><h2 id="Daemonized-執行"><a href="#Daemonized-執行" class="headerlink" title="Daemonized 執行"></a>Daemonized 執行</h2><p>更多的時候，需要讓 Docker Container 在後臺以 Daemonized 形式執行。此時，可以透過新增 -d 參數來實作</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu:14.04 /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">31cec6c9afae51cd0adad62ac18b837e4d5caa80c141d7a8b0f7688670cb6e37</span><br></pre></td></tr></table></figure><p>Container 啟動後會返回一個唯一的 id，也可以透過 <code>docker ps</code> 指令來查看 Container 訊息</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   11 seconds ago      Up 10 seconds       confident_mirzakhani</span><br></pre></td></tr></table></figure><p>要取得 Container 的輸出訊息，可以透過 docker logs 指令來查看～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs 31cec6c9afae</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://linux.vbird.org/linux_basic/0560daemons.php" target="_blank" rel="noopener">何謂 Daemonized ?</a></p></blockquote><h2 id="進入-Container"><a href="#進入-Container" class="headerlink" title="進入 Container"></a>進入 Container</h2><p>有些時候不能只是在背景執行而已，需要透過進入 Container 來進行操作，其中有以下幾種方法</p><h3 id="exec-指令"><a href="#exec-指令" class="headerlink" title="exec 指令"></a>exec 指令</h3><p>首先先列出想要進入的 Container（相信已經很熟悉像是：列出 Container、Image 這類型的操作，更或者是連新增刪除都很熟悉惹w）</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -ti pensive_agnesi bash</span><br><span class="line">root@f4bf4c32b4c9:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="attach-指令"><a href="#attach-指令" class="headerlink" title="attach 指令"></a>attach 指令</h3><p>與 <code>exec</code> 要輸入的指令是完完全全相同的，只差在 <code>exec</code>、<code>attach</code> 這兩個字</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker attach -ti pensive_agnesi bash</span><br><span class="line">root@f4bf4c32b4c9:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec/43864530" target="_blank" rel="noopener">所以 attach / exec 到底哪裡不同呢？</a></p></blockquote><h2 id="Import-and-Export-Container"><a href="#Import-and-Export-Container" class="headerlink" title="Import and Export Container"></a>Import and Export Container</h2><h3 id="Import-Container"><a href="#Import-Container" class="headerlink" title="Import Container"></a>Import Container</h3><p>如果要匯入別人的 Container 的話，可以透過 <code>docker import</code> 從 Container 檔案中再匯入為 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu.tar | sudo docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure><h3 id="Export-Container"><a href="#Export-Container" class="headerlink" title="Export Container"></a>Export Container</h3><p>反之，如果要匯出 local 端的某一個 Container，可以使用 docker export 指令來進行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> 31cec6c9afae &gt; ubuntu1404.tar</span><br></pre></td></tr></table></figure><p>就會匯出檔案囉～～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ubuntu1404.tar</span><br></pre></td></tr></table></figure><h2 id="刪除-Container"><a href="#刪除-Container" class="headerlink" title="刪除 Container"></a>刪除 Container</h2><p>在上一篇當中，就有提到過如果要刪除 Image 時，如果還有 Container 還在使用這個 Image 會導致無法刪除的問題，這時候就可以用 <code>docker rm</code> 指令來刪除</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm confident_mirzakhani</span><br><span class="line">confident_mirzakhani</span><br></pre></td></tr></table></figure><blockquote><p>單純上方的指令只能刪除一個處於<code>終止狀態</code>的 Container，如果想要刪除正在執行中的 Container，可以新增 -f 參數指令，已完成需求。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇 &lt;a href=&quot;https://chestertang.site/2020/01/30/zyx0130/&quot;&gt;再談 Docker Image&lt;/a&gt; 的介紹中對於 Docker Image 有了更深入的了解，接下來換 Docker Container 吧！下篇還有 Docker Repository，再來就是實際 Deploy 惹～再等等啊w&lt;/p&gt;
&lt;h1 id=&quot;再談-Docker-Container&quot;&gt;&lt;a href=&quot;#再談-Docker-Container&quot; class=&quot;headerlink&quot; title=&quot;再談 Docker Container&quot;&gt;&lt;/a&gt;再談 Docker Container&lt;/h1&gt;&lt;h2 id=&quot;啟動-Container&quot;&gt;&lt;a href=&quot;#啟動-Container&quot; class=&quot;headerlink&quot; title=&quot;啟動 Container&quot;&gt;&lt;/a&gt;啟動 Container&lt;/h2&gt;&lt;p&gt;啟動容器有兩種方式，一種是將 Docker Image 新建一個 Container 並啟動，另外一個是將終止狀態（stopped）的 Container 重新啟動。&lt;/p&gt;
&lt;h3 id=&quot;新建並啟動&quot;&gt;&lt;a href=&quot;#新建並啟動&quot; class=&quot;headerlink&quot; title=&quot;新建並啟動&quot;&gt;&lt;/a&gt;新建並啟動&lt;/h3&gt;&lt;p&gt;透過 &lt;code&gt;docker run&lt;/code&gt; 給他新建啟動起來～&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -t -i ubuntu:14.04 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，&lt;code&gt;-t&lt;/code&gt; 指令讓 Docker 分配一個虛擬終端（pseudo-tty）並綁定到 Container 的 stdin 上，&lt;code&gt;-i&lt;/code&gt; 則讓 Container 的 stdin 保持打開。意思是，使用者可以透過所建立的終端來輸入指令，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@af8bae53bdd3:/&lt;span class=&quot;comment&quot;&gt;# pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@af8bae53bdd3:/&lt;span class=&quot;comment&quot;&gt;# ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;當利用 &lt;code&gt;docker run&lt;/code&gt; 來建立 Container 時，Docker 在後臺執行的標準操作包括：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Image</title>
    <link href="http://chestertang.site/2020/01/30/zyx0130/"/>
    <id>http://chestertang.site/2020/01/30/zyx0130/</id>
    <published>2020-01-30T04:04:40.000Z</published>
    <updated>2020-01-30T05:57:46.743Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇的 <a href="https://chestertang.site/2020/01/21/zyx0121/">Docker 是什麼？</a> 的介紹中我們知道了 Docker 三大元素，這篇就來講一下如何安裝及再談 Docker Image 吧 owo</p><h1 id="如何安裝-Docker？"><a href="#如何安裝-Docker？" class="headerlink" title="如何安裝 Docker？"></a>如何安裝 Docker？</h1><h2 id="Mac-安裝-Docker"><a href="#Mac-安裝-Docker" class="headerlink" title="Mac 安裝 Docker"></a>Mac 安裝 Docker</h2><h3 id="下載官方-Docker-dmg-安裝"><a href="#下載官方-Docker-dmg-安裝" class="headerlink" title="下載官方 Docker.dmg 安裝"></a>下載官方 <code>Docker.dmg</code> 安裝</h3><blockquote><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">Docker Desktop for Mac</a></p></blockquote><h3 id="透過-Homebrew-安裝"><a href="#透過-Homebrew-安裝" class="headerlink" title="透過 Homebrew 安裝"></a>透過 Homebrew 安裝</h3><p>使用 brew 指令安裝</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><p>啟動 docker for mac</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure><hr><h1 id="再談-Docker-Image"><a href="#再談-Docker-Image" class="headerlink" title="再談 Docker Image"></a>再談 Docker Image</h1><p>上篇對於 Docker 三大元素的基本介紹有了一定的了解，接下來再來學習如何操作吧！</p><h2 id="取得-Docker-Image"><a href="#取得-Docker-Image" class="headerlink" title="取得 Docker Image"></a>取得 Docker Image</h2><p>可以使用 <code>docker pull</code> 指令從 Docker Hub 取得所需要的 Image。舉例下載一個 Ubuntu 12.04 作業系統的 Image。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull ubuntu:12.04</span><br><span class="line">Password: //輸入密碼</span><br><span class="line"></span><br><span class="line">12.04: Pulling from library/ubuntu</span><br><span class="line">d8868e50ac4c: Pull complete</span><br><span class="line">83251ac64627: Pull complete</span><br><span class="line">589bba2f1b36: Pull complete</span><br><span class="line">d62ecaceda39: Pull complete</span><br><span class="line">6d93b41cfc6b: Pull complete</span><br><span class="line">Digest: sha256:...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:12.04</span><br><span class="line">docker.io/library/ubuntu:12.04</span><br></pre></td></tr></table></figure><p>完成後，即可隨時使用我們下載的這個 Image 了（讓這個 Image 執行 bash）</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:12.04 /bin/bash</span><br><span class="line"></span><br><span class="line">root@d7b639b8385a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>之後會再介紹這段指令的意思～</p></blockquote><h2 id="列出-Docker-Image"><a href="#列出-Docker-Image" class="headerlink" title="列出 Docker Image"></a>列出 Docker Image</h2><p>使用 docker images 顯示本機已有的 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY    TAG      IMAGE ID        CREATED             SIZE</span><br><span class="line">hello-world   latest   fce289e99eb9    12 months ago       1.84kB</span><br><span class="line">ubuntu        12.04    5b117edd0b76    2 years ago         104MB</span><br></pre></td></tr></table></figure><p>在終端機列出訊息中，可以看到幾段文字訊息</p><ul><li>REPOSITORY：來自哪個 Registry</li><li>TAG：版本</li><li>IMAGE ID：Image 的 ID（唯一）</li><li>CREATED：建立時間</li><li>VIRTUAL SIZE：Image 檔案大小</li></ul><blockquote><p>題外話：可以看到 hello-world 的 TAG 是 <code>latest</code>，這代表著這個 Image 沒有設定 TAG，恩…</p></blockquote><h2 id="建立-Docker-Image"><a href="#建立-Docker-Image" class="headerlink" title="建立 Docker Image"></a>建立 Docker Image</h2><h3 id="修改別人的-Image-已建立新的-Image"><a href="#修改別人的-Image-已建立新的-Image" class="headerlink" title="修改別人的 Image 已建立新的 Image"></a>修改別人的 Image 已建立新的 Image</h3><p>首先，先把別人的 Image pull 下來並啟動 Container</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i training/sinatra /bin/bash</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'training/sinatra:latest'</span> locally</span><br><span class="line">latest: Pulling from training/sinatra</span><br><span class="line">Image docker.io/training/sinatra:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image <span class="keyword">for</span> better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">6e71c809542e: Pull complete</span><br><span class="line">d196a7609355: Pull complete</span><br><span class="line">08f6dff5acea: Pull complete</span><br><span class="line">ce65532003d0: Pull complete</span><br><span class="line">54bcaa4d1a10: Pull complete</span><br><span class="line">8572ad96f6e1: Pull complete</span><br><span class="line">Digest: ...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> training/sinatra:latest</span><br></pre></td></tr></table></figure><p>稍微對這個別人的 Image 對點手腳，加個 <code>gem install json</code> 為例來試試</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@360d0440d1d4:/<span class="comment"># gem install json</span></span><br><span class="line"></span><br><span class="line">Fetching: json-2.3.0.gem (100%)</span><br><span class="line">Building native extensions.  This could take a <span class="keyword">while</span>...</span><br><span class="line">Successfully installed json-2.3.0</span><br><span class="line">1 gem installed</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> json-2.3.0...</span><br><span class="line">Installing RDoc documentation <span class="keyword">for</span> json-2.3.0...</span><br></pre></td></tr></table></figure><p>安裝完成 <code>gem install json</code> 後，代表我們這個 Container 已經被改變了！按下 control+D 或 exit 跳出這個 Container！再透過 <code>docker commit</code> 指令來新增這個 commit</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Chester"</span> 7c61f457e695 chestertang/sinatra:v2</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker ps 中沒有 container，那執行上方指令將會 Error response from daemon: No such container: 49d952a36c58，因此，可以試試看下以下指令來看擁有的 Container ID</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>在這段指令中，指令分別代表的意思如下</p><ul><li><code>-m &quot;Added json gem&quot;</code>：與 github commit 訊息一樣，後方的為這次 commit 的註解</li><li><code>-a &quot;Chester&quot;</code>：代表著是作者資訊</li><li><code>7c61f457e695</code>：Container ID，透過 docker ps / docker ps -a 取得</li><li><code>chestertang/sinatra:v2</code>：v2 冒號前半段是 Repository 名稱（不能大寫），後半段是 TAG</li></ul><p>再來看看 docker images 吧！</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG         IMAGE ID          CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2          3bae0e76683f      11 seconds ago      447MB</span><br><span class="line">ubuntu                12.04       5b117edd0b76      2 years ago         104MB</span><br><span class="line">training/sinatra      latest      49d952a36c58      5 years ago         447MB</span><br></pre></td></tr></table></figure><p>並且用剛剛新的 Images 來啟動 Container</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i chestertang/sinatra:v2 /bin/bash</span><br><span class="line"></span><br><span class="line">root@2f902d9238f5:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="利用-Dockerfile-建立-Image"><a href="#利用-Dockerfile-建立-Image" class="headerlink" title="利用 Dockerfile 建立 Image"></a>利用 Dockerfile 建立 Image</h3><p>我們可以使用 docker build 來建立一個新的 Image。首先，需要建立一個 Dockerfile，裡面包含一些用來建立 Image 的指令。</p><p>新建一個資料夾和一個 Dockerfile</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir sinatra</span><br><span class="line"><span class="built_in">cd</span> sinatra</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>開啟建立的 Dockerfile 並來透過 ubuntu 與安裝 Ruby 來安裝 sinatra</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a comment</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Docker Chester &lt;chestertang.zyxel@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qq update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qqy install ruby ruby-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> gem install sinatra</span></span><br></pre></td></tr></table></figure><p>Dockerfile 的基本語法的思如下：</p><ul><li><code>#</code> 來表示註解</li><li><code>FROM</code> 指令告訴 Docker 使用哪個 Image 作為基底</li><li><code>MAINTAINER</code> 表示誰是這個 file 的維護者</li><li><code>RUN</code> 開頭的指令會在建立中執行，比如在這裏使用 <code>apt-get</code> 來安裝 <code>ruby</code>、<code>sinatra</code> 套件</li></ul><p>建立完成 Dockerfile 後可以使用 <code>docker build</code> 建立 Docker Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"chestertang/sinatra:v2"</span> .</span><br><span class="line"></span><br><span class="line">Uploading context  2.56 kB</span><br><span class="line">Uploading context</span><br><span class="line">Step 0 : FROM ubuntu:14.04</span><br><span class="line">  ---&gt; 99ec81b80c55</span><br><span class="line">Step 1 : MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> 7c5664a8a0c1</span><br><span class="line">  ---&gt; 2fa8ca4e2a13</span><br><span class="line">Removing intermediate container 7c5664a8a0c1</span><br><span class="line">Step 2 : RUN apt-get -qq update</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> b07cc3fb4256</span><br><span class="line">  ---&gt; 50d21070ec0c</span><br><span class="line">Removing intermediate container b07cc3fb4256</span><br><span class="line">Step 3 : RUN apt-get -qqy install ruby ruby-dev</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> a5b038dd127e</span><br><span class="line">Selecting previously unselected package libasan0:amd64.</span><br><span class="line">(Reading database ... 11518 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libasan0_4.8.2-19ubuntu1_amd64.deb ...</span><br><span class="line">Setting up ruby (1:1.9.3.4) ...</span><br><span class="line">Setting up ruby1.9.1 (1.9.3.484-2ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.19-0ubuntu6) ...</span><br><span class="line">  ---&gt; 2acb20f17878</span><br><span class="line">Removing intermediate container a5b038dd127e</span><br><span class="line">Step 4 : RUN gem install sinatra</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> 5e9d0065c1f7</span><br><span class="line">. . .</span><br><span class="line">Successfully installed rack-protection-1.5.3</span><br><span class="line">Successfully installed sinatra-1.4.5</span><br><span class="line">4 gems installed</span><br><span class="line">  ---&gt; 324104cde6ad</span><br><span class="line">Removing intermediate container 5e9d0065c1f7</span><br><span class="line">Successfully built 324104cde6ad</span><br></pre></td></tr></table></figure><blockquote><p>其中 -t 標記添加 TAG，指定新的 Image 的使用者資訊。 “.” 是 Dockerfile 所在的路徑，也可以換成具體的 Dockerfile 的路徑。</p></blockquote><p>Dockerfile 是設定專案必定使用的方式，這個將在之後的有更深入的一篇例子來實作</p><h3 id="從本機匯入"><a href="#從本機匯入" class="headerlink" title="從本機匯入"></a>從本機匯入</h3><p>要從本機匯入 Image，可以使用 <code>OpenVZ</code> 來建立(<a href="https://wiki.openvz.org/Download/template/precreated" target="_blank" rel="noopener">https://wiki.openvz.org/Download/template/precreated</a>)</p><p>比如，先下載一個 ubuntu-14.04 的映像檔，之後使用以下命令匯入：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure><p>然後查看新匯入的 Docker Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY    TAG       IMAGE ID         CREATED           VIRTUAL SIZE</span><br><span class="line">ubuntu        14.04     05ac7c0b9383     17 seconds ago    215.5 MB</span><br></pre></td></tr></table></figure><h3 id="上傳-Docker-Images"><a href="#上傳-Docker-Images" class="headerlink" title="上傳 Docker Images"></a>上傳 Docker Images</h3><p>可以透過 <code>docker push</code> 指令，把自己建立的 Docker Image 分享上傳到 <code>Repository</code> 。例如，使用者在 Docker Hub 上完成註冊後，可以推送自己的 Docker Image 到 Repository 中。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker push chestertang/sinatra</span><br><span class="line"></span><br><span class="line">sudo docker push chestertang/sinatra</span><br><span class="line"></span><br><span class="line">The push refers to a repository [chestertang/sinatra]</span><br><span class="line">Sending image list</span><br><span class="line">Pushing repository chestertang/sinatra</span><br></pre></td></tr></table></figure><h2 id="儲存和載入-Image"><a href="#儲存和載入-Image" class="headerlink" title="儲存和載入 Image"></a>儲存和載入 Image</h2><h3 id="儲存-Image"><a href="#儲存-Image" class="headerlink" title="儲存 Image"></a>儲存 Image</h3><p>如果要建立 Docker Image 到 local 檔案，可以使用 docker save 指令來儲存</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY      TAG         IMAGE ID          CREATED           VIRTUAL SIZE</span><br><span class="line">ubuntu          14.04       c4ff7513909d      5 weeks ago       225.4 MB</span><br><span class="line"></span><br><span class="line">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id="載入映像檔"><a href="#載入映像檔" class="headerlink" title="載入映像檔"></a>載入映像檔</h3><p>可以使用 <code>docker load</code> 從建立的 local 檔案再匯入到 local Image，例如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input ubuntu_14.04.tar || docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure><h2 id="移除-local-端-Docker-Image"><a href="#移除-local-端-Docker-Image" class="headerlink" title="移除 local 端 Docker Image"></a>移除 local 端 Docker Image</h2><p>  如果要移除 local 端的 Docker Image，可以使用 docker rmi 命令。（注意：如果有 Container 是透過現在這個 Image 在執行的話，必須先將 Container 刪除完畢後才能刪除 Image）</p><p>  先來列出有的 Container 與 Image</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID    IMAGE                    COMMAND          CREATED             STATUS                          NAMES</span><br><span class="line">83be203c6040    chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>      48 minutes ago      Exited (0) 18 minutes ago       elastic_hertz</span><br><span class="line">2f902d9238f5    chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>      4 days ago          Exited (130) 4 days ago         confident_ritchie</span><br><span class="line">d7b639b8385a    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br><span class="line">1d8d58333b3d    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (130) 7 days ago         wizardly_morse</span><br><span class="line">c9a19d3553c9    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (0) 7 days ago           interesting_dubinsky</span><br><span class="line">bcf468d00ca2    hello-world              <span class="string">"/hello"</span>         9 days ago          Exited (0) 9 days ago           inspiring_newton</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                IMAGE ID         CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2                 3bae0e76683f     7 days ago          447MB</span><br><span class="line">ubuntu                14.04              6e4f1fe62ff1     5 weeks ago         197MB</span><br><span class="line">hello-world           latest             fce289e99eb9     13 months ago       1.84kB</span><br><span class="line">ubuntu                12.04              5b117edd0b76     2 years ago         104MB</span><br><span class="line">joshhu/webdemo        latest             c58bf6158823     4 years ago         243MB</span><br><span class="line">training/sinatra      latest             49d952a36c58     5 years ago         447MB</span><br></pre></td></tr></table></figure><p>  來刪除 training/sinatra 這個 image</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi training/sinatra</span><br><span class="line"></span><br><span class="line">Untagged: training/sinatra:latest</span><br><span class="line">Untagged: training/sinatra@sha256:...</span><br></pre></td></tr></table></figure><p>  如果如上所述，在被刪除的這個 Image 底下還有 Container 未被刪除就會出現以下訊息：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi fce289e99eb9</span><br><span class="line"></span><br><span class="line">Error response from daemon: conflict: unable to delete fce289e99eb9 (must be forced) - image is being used by stopped container bcf468d00ca2</span><br></pre></td></tr></table></figure><blockquote><p>這時候就需要透過 <code>docker rm</code> 先去把底下的 Container 都刪除完畢完後，才能移除 Image！</p></blockquote><hr><h1 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h1><ul><li><a href="https://dotblogs.com.tw/aken1215/2016/09/18/132729" target="_blank" rel="noopener">朕在coding</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker — 从入门到实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇的 &lt;a href=&quot;https://chestertang.site/2020/01/21/zyx0121/&quot;&gt;Docker 是什麼？&lt;/a&gt; 的介紹中我們知道了 Docker 三大元素，這篇就來講一下如何安裝及再談 Docker Image 吧 owo&lt;/p&gt;
&lt;h1 id=&quot;如何安裝-Docker？&quot;&gt;&lt;a href=&quot;#如何安裝-Docker？&quot; class=&quot;headerlink&quot; title=&quot;如何安裝 Docker？&quot;&gt;&lt;/a&gt;如何安裝 Docker？&lt;/h1&gt;&lt;h2 id=&quot;Mac-安裝-Docker&quot;&gt;&lt;a href=&quot;#Mac-安裝-Docker&quot; class=&quot;headerlink&quot; title=&quot;Mac 安裝 Docker&quot;&gt;&lt;/a&gt;Mac 安裝 Docker&lt;/h2&gt;&lt;h3 id=&quot;下載官方-Docker-dmg-安裝&quot;&gt;&lt;a href=&quot;#下載官方-Docker-dmg-安裝&quot; class=&quot;headerlink&quot; title=&quot;下載官方 Docker.dmg 安裝&quot;&gt;&lt;/a&gt;下載官方 &lt;code&gt;Docker.dmg&lt;/code&gt; 安裝&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Desktop for Mac&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;透過-Homebrew-安裝&quot;&gt;&lt;a href=&quot;#透過-Homebrew-安裝&quot; class=&quot;headerlink&quot; title=&quot;透過 Homebrew 安裝&quot;&gt;&lt;/a&gt;透過 Homebrew 安裝&lt;/h3&gt;&lt;p&gt;使用 brew 指令安裝&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew cask install docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;啟動 docker for mac&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open /Applications/Docker.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Docker 是什麼？</title>
    <link href="http://chestertang.site/2020/01/21/zyx0121/"/>
    <id>http://chestertang.site/2020/01/21/zyx0121/</id>
    <published>2020-01-21T06:49:40.000Z</published>
    <updated>2020-01-29T14:16:13.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-Docker？"><a href="#What’s-Docker？" class="headerlink" title="What’s Docker？"></a>What’s Docker？</h1><p>直接破題好惹w</p><ul><li><p>Docker 想解決的問題：<br>改善傳統虛擬機器因為需要額外安裝作業系統（Guest OS），導致啟動慢、佔較大記憶體的問題</p></li><li><p>Docker 要提供的解法：<br>以應用程式為核心虛擬化，取代傳統需要 Guest OS 的虛擬化技術</p></li></ul><p>白話文的翻譯就像是：</p><blockquote><p>「我寫好了一支程式，在我的電腦上可以正常運作，然後在你的電腦上運作就爆掉惹 ouo」</p></blockquote><p>就像是我的 Ruby 版本跟你的 Ruby 版本不同，結果根本沒有那個方法可以用。又或者是小菜的電腦是 windows 其他人的都是 mac，光作業系統與硬體配置就不盡相同了！更何況是他的程式可能跟其他人電腦上的環境又都不相容，而透過「<code>虛擬化</code>」的方式模擬一個環境，讓程式可以在不同硬體上執行，都以為自己在同一個環境中執行。</p><p>最為熟悉的莫過於在買 mac 電腦時，很想裝個 <code>虛擬機器</code> 來打電動或者是開啟專屬於 windows 的軟體，而目前常見用來比較的虛擬化技術有兩種：</p><ol><li>傳統方式是在硬體層面實現虛擬化，需要額外的虛擬機器管理軟體和虛擬機器作業系統層（Guest OS），如 <a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Oracle VM VirtualBox</a>。</li><li>Docker 容器是在作業系統層上實現虛擬化，直接使用本機的作業系統（Host OS），如 <a href="https://www.docker.com/" target="_blank" rel="noopener">dotCloud Docker</a>。</li></ol><h1 id="所以什麼是-Docker？"><a href="#所以什麼是-Docker？" class="headerlink" title="所以什麼是 Docker？"></a>所以什麼是 Docker？</h1><p>如同前面破題的內容，知道了要解決的問題，因此來跟傳統的虛擬機技術來比較不同之處。傳統虛擬機技術是模擬出一套硬體後，在這系統上再運行所需要應用到的軟體；而 Docker 透過在容器內的應用直接運行於宿主的內核（Docker Engine），也不用模擬出虛擬的硬體（Guest OS）。</p><p>傳統虛擬機器：<br><img src="https://i.imgur.com/ZhbX4F4.png" alt="image"></p><p>Docker：<br><img src="https://i.imgur.com/NX7mfR4.png" alt="image"></p><h2 id="圖中名詞介紹（Host-OS-Guest-OS-Hypervisor）"><a href="#圖中名詞介紹（Host-OS-Guest-OS-Hypervisor）" class="headerlink" title="圖中名詞介紹（Host OS / Guest OS / Hypervisor）"></a>圖中名詞介紹（Host OS / Guest OS / Hypervisor）</h2><h3 id="Host-OS-Guest-OS"><a href="#Host-OS-Guest-OS" class="headerlink" title="Host OS | Guest OS"></a>Host OS | Guest OS</h3><p>Host（Host OS）指的是用來安裝虛擬機器軟體的作業系統，而 Guest（Guest OS）則是指安裝在虛擬機器上的作業系統。</p><p>舉例來說，我在筆電上裝了 Winodws 7，然後在 Windows 7 上安裝 VirtualBox，接著再透過 VirtualBox 建立的虛擬機上又建立了 Windows 10 環境。由此例推導，VirtualBox 虛擬機器的 Windows 10 就是 Guest OS，而原本筆電上安裝的 Windows 7 就是 Host OS。</p><h3 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h3><p>又稱虛擬機器監視器（Virtual machine monitor），是用來建立與執行虛擬機器的軟體、韌體或硬體。</p><p>被 Hypervisor 用來執行一個或多個虛擬機器的電腦稱為宿主機（Host machine），這些虛擬機器則稱為客戶機（Guest machine）。Hypervisor 提供虛擬的作業平台來執行 Guest OS，負責管理其他 Guest OS 的執行階段，而這些 Guest OS 又共同分享虛擬化後的硬體資源。</p><h1 id="虛擬機器-vs-容器"><a href="#虛擬機器-vs-容器" class="headerlink" title="虛擬機器 vs 容器"></a>虛擬機器 vs 容器</h1><h2 id="虛擬機器（Virtual-machine）"><a href="#虛擬機器（Virtual-machine）" class="headerlink" title="虛擬機器（Virtual machine）"></a>虛擬機器（Virtual machine）</h2><p>虛擬機器是在系統層上虛擬化，透過 Hypervisor 在目標的機器上提供可以執行一個或多個虛擬機器的平台。而這些虛擬機器可以執行完整的作業系統。簡單來說，Hypervisor 就是一個可以讓你在作業系統（Host OS）上面再裝一個作業系統（Guest OS）。</p><p>透過選擇不同的 Guest OS，虛擬機器的技術就可以確保只要我的程式在該 Guest OS 上可以正常運作，那放到你的電腦上跑時，可以不管你的 Host OS 是什麼，只要在你的 Host OS 上先裝上我的 Guest OS，我的程式就可以正常在你的電腦上運作。</p><h2 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h2><p>容器是在作業系統層上虛擬化，透過 Container Manager（ex: Docker Engine） 直接將一個應用程式所需的程式碼、函式庫打包，建立資源控管機制隔離各個容器，並分配 Host OS 上的系統資源。透過容器，應用程式不需要再另外安裝作業系統（Guest OS）也可以執行。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><table><thead><tr><th>特性</th><th>容器</th><th>虛擬機器</th></tr></thead><tbody><tr><td>啟動速度</td><td>秒</td><td>分鐘</td></tr><tr><td>硬碟使用</td><td>通常為 MB</td><td>通常為 GB</td></tr><tr><td>電腦效能</td><td>接近於原本</td><td>弱於容器</td></tr><tr><td>系統支援數量</td><td>支持上千個容器</td><td>通常幾十個</td></tr></tbody></table><p>好了，寫到這邊應該都對 Docker 技術、優勢及背景知識有了大概的了解，現在終於要來切入 Docker 啦～</p><hr><h1 id="Docker-三大元素"><a href="#Docker-三大元素" class="headerlink" title="Docker 三大元素"></a>Docker 三大元素</h1><p>在了解完基本概念後，接下來我們要進一步了解要使用 Docker 時最重要的三個元素：映像檔（Docker Image，文中簡稱 Image）、容器（Docker Container，文中簡稱 Container）、倉庫（Docker Repository，文中簡稱 Repository）。</p><p>白話文的翻譯就像是：</p><blockquote><p>我有一個很大的樂高積木箱子（Repository），裡面專門放置很多很多的樂高積木（Image），而透過積木產生的樂高，則是容器（Container）。</p></blockquote><h2 id="映像檔（Image）"><a href="#映像檔（Image）" class="headerlink" title="映像檔（Image）"></a>映像檔（Image）</h2><p>Docker Image 是一個模板，用來重複產生 Container。如同一個 Image 裡可以包含一個完整的 PostgreSQL 資料庫服務、一個 Ruby 的編譯環境、或是一個 Ubuntu 作業系統。</p><p>透過 Image 我們可以快速的產生可以執行應用程式的 Container。而 Docker Image 可以透過撰寫 Dockerfile 建立，或甚至可以從公開的地方下載已經做好的 Image 來使用。另外要注意的是，Docker Image 是唯讀（Read-only）的。</p><blockquote><p> Docker 設計時，充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技術，來設計分層儲存的架構。因此，Image 在建構時，會一層層建構，前一層是後一層的基礎。每一層建構完就不會再發生改變，後一層上的任何改變只會發生在自己這一層。</p></blockquote><h2 id="容器（Container）-1"><a href="#容器（Container）-1" class="headerlink" title="容器（Container）"></a>容器（Container）</h2><p>Container 是用 Image 建立出來的執行實例，他們之間的關係，就像是實體與類別的概念一樣，Image 是靜態的定義，Container 是 Image 運行的實體。它可以被創建、啟動、刪除、停止等，且每個容器都是相互隔離。</p><p>又可以把 Container 看做是一個執行的應用程式加上執行它的簡易版 Linux 環境（包括 root 使用者權限、程式空間、使用者空間和網路空間等），就好像在獨立的系統下操作一樣。</p><blockquote><p>Container 與 Image 都是使用分層儲存。其儲存層的生命週期和 Container 一樣，Container 刪除時，容器儲存層也隨之結束。因此，任何保存於裡面的資訊都會隨 Container 刪除而丟失。</p></blockquote><h2 id="倉庫（Repository）"><a href="#倉庫（Repository）" class="headerlink" title="倉庫（Repository）"></a>倉庫（Repository）</h2><p>Image 建構完成後，可以很容易的當前的電腦上運行，但是如果需要在其他伺服器使用這個 Image 時候，就需要一個集中儲存 Image 的服務，<code>Docker Registry</code> 就是這樣的服務。</p><p>一個 Docker Registry 中可以包含多個 Repository；每個 Repository 又可以包含多個版本；每個版本對應一個 Image。</p><p>最常用的 Registry 公開服務是官方的 Docker Hub，也就是 Docker 倉庫註冊伺服器的代表，此外還有像是 Google 的 <a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a>，Kubernetes 的 Image 使用的就是這個服務。且概念及使用方式跟 Github 類似，你可以在上面建立多個倉庫，然後透過 push、pull 的方式上傳、存取。</p><hr><h3 id="狀況題"><a href="#狀況題" class="headerlink" title="狀況題"></a>狀況題</h3><p>如同上述的灰色區塊可知，如果今天我想升級 mysql 的版本，於是我把正在跑的 mysql:5.5 關掉，然後重新跑一個 mysql:5.7 的 Container，那資料庫裡面的資料不就不見了嗎？</p><blockquote><p>沒錯，這時候就需要 Volume 了，簡單來說 Volume 的生命週期獨立於 Container，Container 的結束不會影響 Volume 的存亡，因此使用 <code>volume</code> 就是用來保存容器內的資料。</p></blockquote><p>那又是另一個主題了…</p><hr><h1 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h1><ul><li><a href="https://www.arthurtoday.com/2009/12/host-guest.html" target="_blank" rel="noopener">Host OS 和 Guest OS 是什麼 ?</a></li><li><a href="https://en.wikipedia.org/wiki/Hypervisor" target="_blank" rel="noopener">Hypervisor Wiki</a></li><li><a href="https://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-virtual-machine#" target="_blank" rel="noopener">How is Docker different from a virtual machine?</a></li><li><a href="http://epaper.gotop.com.tw/pdf/ACA020700.pdf" target="_blank" rel="noopener">Docker 入門</a></li><li><a href="https://medium.com/unorthodox-paranoid/docker-tutorial-101-c3808b899ac6" target="_blank" rel="noopener">Docker 基礎教學與介紹 101</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html" target="_blank" rel="noopener">Docker – 從入門到實踐</a></li><li><a href="https://5xruby.tw/posts/deploying-your-docker-rails-app/" target="_blank" rel="noopener">Johnson God 用 Docker 部署 Rails，原來是這樣！？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-Docker？&quot;&gt;&lt;a href=&quot;#What’s-Docker？&quot; class=&quot;headerlink&quot; title=&quot;What’s Docker？&quot;&gt;&lt;/a&gt;What’s Docker？&lt;/h1&gt;&lt;p&gt;直接破題好惹w&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker 想解決的問題：&lt;br&gt;改善傳統虛擬機器因為需要額外安裝作業系統（Guest OS），導致啟動慢、佔較大記憶體的問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker 要提供的解法：&lt;br&gt;以應用程式為核心虛擬化，取代傳統需要 Guest OS 的虛擬化技術&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;白話文的翻譯就像是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「我寫好了一支程式，在我的電腦上可以正常運作，然後在你的電腦上運作就爆掉惹 ouo」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就像是我的 Ruby 版本跟你的 Ruby 版本不同，結果根本沒有那個方法可以用。又或者是小菜的電腦是 windows 其他人的都是 mac，光作業系統與硬體配置就不盡相同了！更何況是他的程式可能跟其他人電腦上的環境又都不相容，而透過「&lt;code&gt;虛擬化&lt;/code&gt;」的方式模擬一個環境，讓程式可以在不同硬體上執行，都以為自己在同一個環境中執行。&lt;/p&gt;
&lt;p&gt;最為熟悉的莫過於在買 mac 電腦時，很想裝個 &lt;code&gt;虛擬機器&lt;/code&gt; 來打電動或者是開啟專屬於 windows 的軟體，而目前常見用來比較的虛擬化技術有兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;傳統方式是在硬體層面實現虛擬化，需要額外的虛擬機器管理軟體和虛擬機器作業系統層（Guest OS），如 &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oracle VM VirtualBox&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Docker 容器是在作業系統層上實現虛擬化，直接使用本機的作業系統（Host OS），如 &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dotCloud Docker&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;所以什麼是-Docker？&quot;&gt;&lt;a href=&quot;#所以什麼是-Docker？&quot; class=&quot;headerlink&quot; title=&quot;所以什麼是 Docker？&quot;&gt;&lt;/a&gt;所以什麼是 Docker？&lt;/h1&gt;&lt;p&gt;如同前面破題的內容，知道了要解決的問題，因此來跟傳統的虛擬機技術來比較不同之處。傳統虛擬機技術是模擬出一套硬體後，在這系統上再運行所需要應用到的軟體；而 Docker 透過在容器內的應用直接運行於宿主的內核（Docker Engine），也不用模擬出虛擬的硬體（Guest OS）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>AWS - Cloud Services Overview</title>
    <link href="http://chestertang.site/2020/01/13/zyx0113/"/>
    <id>http://chestertang.site/2020/01/13/zyx0113/</id>
    <published>2020-01-13T10:47:40.000Z</published>
    <updated>2020-01-21T14:23:14.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雲端運算-Cloud-Services-Overview"><a href="#雲端運算-Cloud-Services-Overview" class="headerlink" title="雲端運算 Cloud Services Overview"></a>雲端運算 Cloud Services Overview</h1><p>雲端運算，是一種基於網際網路的資源使用方式，通過這種方式，共享的軟硬體資源和資訊可以按需求提供給電腦各種終端和其他裝置。簡單來說，從應用環境、資料、執行環境、中介程式、作業系統、伺服器、儲存硬體、網路到機房，可以依據從服務商提供的不同服務模式來使用。</p><h2 id="服務模式"><a href="#服務模式" class="headerlink" title="服務模式"></a>服務模式</h2><p>美國國家標準和技術研究院的雲端運算定義中明確了三種服務模式：</p><p><img src="https://i.imgur.com/mpWDLoP.png" alt="image"></p><ul><li><p>基礎架構即服務 Infrastructure as a Service（IaaS）</p><p>消費者使用「基礎運算資源」，如處理能力、儲存空間。消費者能掌控作業系統、儲存空間、已部署的應用程式及網路元件（如防火牆），但並不掌控雲端基礎架構。例如：Amazon AWS。</p><p>跟過去的傳統架設機房來相比，我們可以解釋成和服務商租賃雲端機房、伺服器、網路環境等等，而不用像過去需要在公司內部自行建置機房。</p></li></ul><ul><li><p>平台即服務 Platform as a Service（PaaS）</p><p>除 IaaS 的項目之外，消費者掌控運作應用程式的環境（也擁有主機部分掌控權），但並不掌控作業系統、硬體或運作的網路基礎架構。平台通常是應用程式基礎架構。就像 Microsoft Azure 所提供的 PaaS 服務，像 IaaS 一樣提供包括基礎架構服務器，存儲和網路，而且還包括開發環境、開發工具，商業智能服務，數據庫管理系統等。</p></li></ul><ul><li><p>軟體即服務 Software as a Service（SaaS）</p><p>消費者使用應用程式，但並不掌控作業系統、硬體或運作的網路基礎架構。是一種服務觀念的基礎，軟體服務供應商，以租賃的概念提供客戶服務，而非購買，比較常見的模式是提供一組帳號密碼。</p><p>舉 Google 為例，它提供免費的電子郵件、日曆等服務給大眾使用外，還針對企業推出服務層級協定較高的付費網路郵件服務，企業不需要另外採購應用電子郵件的軟體和硬體設備，只要訂購 Google 的 Gmail 服務，就能取代自建的電子郵件系統。</p></li></ul><h1 id="亞馬遜雲端運算服務-Amazon-Web-Services-Overview"><a href="#亞馬遜雲端運算服務-Amazon-Web-Services-Overview" class="headerlink" title="亞馬遜雲端運算服務 Amazon Web Services Overview"></a>亞馬遜雲端運算服務 Amazon Web Services Overview</h1><p>亞馬遜雲端運算服務（Amazon Web Services），由亞馬遜公司所建立的雲端運算平台，提供許多遠端 Web 服務。Amazon EC2 與 Amazon S3 都架構在這個平台上。在2002年7月首次公開運作，提供其他網站及客戶端的服務。</p><p>AWS 雲端產品服務：</p><p><img src="https://i.imgur.com/3rGHyJp.png" alt="image"></p><h1 id="AWS-免費試用帳戶"><a href="#AWS-免費試用帳戶" class="headerlink" title="AWS 免費試用帳戶"></a>AWS 免費試用帳戶</h1><p>AWS 有提供 12 個月免費試用帳號，每個月有限定的免費金額可以使用，大部分服務在到期後是不會直接中止的，但注意時間超過會被持續收費。</p><p>完整的使用限制與每月換算可使用額度，可以參考 <a href="https://aws.amazon.com/tw/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc#legal" target="_blank" rel="noopener">AWS Free Tier (Non-expiring Offers)</a></p><h1 id="AWS-價格計算"><a href="#AWS-價格計算" class="headerlink" title="AWS 價格計算"></a>AWS 價格計算</h1><p>用多少算多少的概念，取決於使用的時間、單位、占用的資源與方式，如果整個服務都是在雲端內部自己存取的跟需要用到外部網路讓雲端資源可以給目前單位的本機電腦使用就會有不同的費用計算方式。</p><p>官方提供租用價格計算方式：</p><ul><li><p>每月成本簡易計算器（<a href="https://calculator.s3.amazonaws.com/index.html" target="_blank" rel="noopener">AWS Simple Monthly Calculator</a>）</p></li><li><p>TCO 計算器（<a href="https://aws.amazon.com/tw/tco-calculator/" target="_blank" rel="noopener">AWS TCO calculator</a>）</p></li></ul><blockquote><p>雲端比較：<a href="https://www.flexera.com/blog/cloud/2016/11/aws-vs-azure-vs-google-cloud-pricing-compute-instances/" target="_blank" rel="noopener">AWS vs Azure vs Google Cloud Pricing: Compute Instances</a></p></blockquote><p>結論：以前大學學的雲端運算都忘了，默默再重新把把這些名詞通通記回來，改天來開通一下 AWS 的試用帳戶吧 owo！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;雲端運算-Cloud-Services-Overview&quot;&gt;&lt;a href=&quot;#雲端運算-Cloud-Services-Overview&quot; class=&quot;headerlink&quot; title=&quot;雲端運算 Cloud Services Overview&quot;&gt;&lt;/a&gt;雲端運算 Cloud Services Overview&lt;/h1&gt;&lt;p&gt;雲端運算，是一種基於網際網路的資源使用方式，通過這種方式，共享的軟硬體資源和資訊可以按需求提供給電腦各種終端和其他裝置。簡單來說，從應用環境、資料、執行環境、中介程式、作業系統、伺服器、儲存硬體、網路到機房，可以依據從服務商提供的不同服務模式來使用。&lt;/p&gt;
&lt;h2 id=&quot;服務模式&quot;&gt;&lt;a href=&quot;#服務模式&quot; class=&quot;headerlink&quot; title=&quot;服務模式&quot;&gt;&lt;/a&gt;服務模式&lt;/h2&gt;&lt;p&gt;美國國家標準和技術研究院的雲端運算定義中明確了三種服務模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/mpWDLoP.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基礎架構即服務 Infrastructure as a Service（IaaS）&lt;/p&gt;
&lt;p&gt;消費者使用「基礎運算資源」，如處理能力、儲存空間。消費者能掌控作業系統、儲存空間、已部署的應用程式及網路元件（如防火牆），但並不掌控雲端基礎架構。例如：Amazon AWS。&lt;/p&gt;
&lt;p&gt;跟過去的傳統架設機房來相比，我們可以解釋成和服務商租賃雲端機房、伺服器、網路環境等等，而不用像過去需要在公司內部自行建置機房。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平台即服務 Platform as a Service（PaaS）&lt;/p&gt;
&lt;p&gt;除 IaaS 的項目之外，消費者掌控運作應用程式的環境（也擁有主機部分掌控權），但並不掌控作業系統、硬體或運作的網路基礎架構。平台通常是應用程式基礎架構。就像 Microsoft Azure 所提供的 PaaS 服務，像 IaaS 一樣提供包括基礎架構服務器，存儲和網路，而且還包括開發環境、開發工具，商業智能服務，數據庫管理系統等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;軟體即服務 Software as a Service（SaaS）&lt;/p&gt;
&lt;p&gt;消費者使用應用程式，但並不掌控作業系統、硬體或運作的網路基礎架構。是一種服務觀念的基礎，軟體服務供應商，以租賃的概念提供客戶服務，而非購買，比較常見的模式是提供一組帳號密碼。&lt;/p&gt;
&lt;p&gt;舉 Google 為例，它提供免費的電子郵件、日曆等服務給大眾使用外，還針對企業推出服務層級協定較高的付費網路郵件服務，企業不需要另外採購應用電子郵件的軟體和硬體設備，只要訂購 Google 的 Gmail 服務，就能取代自建的電子郵件系統。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;亞馬遜雲端運算服務-Amazon-Web-Services-Overview&quot;&gt;&lt;a href=&quot;#亞馬遜雲端運算服務-Amazon-Web-Services-Overview&quot; class=&quot;headerlink&quot; title=&quot;亞馬遜雲端運算服務 Amazon Web Services Overview&quot;&gt;&lt;/a&gt;亞馬遜雲端運算服務 Amazon Web Services Overview&lt;/h1&gt;&lt;p&gt;亞馬遜雲端運算服務（Amazon Web Services），由亞馬遜公司所建立的雲端運算平台，提供許多遠端 Web 服務。Amazon EC2 與 Amazon S3 都架構在這個平台上。在2002年7月首次公開運作，提供其他網站及客戶端的服務。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="Saas" scheme="http://chestertang.site/tags/Saas/"/>
    
      <category term="Iaas" scheme="http://chestertang.site/tags/Iaas/"/>
    
      <category term="Paas" scheme="http://chestertang.site/tags/Paas/"/>
    
  </entry>
  
  <entry>
    <title>CoffeeScript 是什麼？</title>
    <link href="http://chestertang.site/2020/01/10/zyx0110/"/>
    <id>http://chestertang.site/2020/01/10/zyx0110/</id>
    <published>2020-01-10T03:40:40.000Z</published>
    <updated>2020-01-15T05:40:39.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h2><p><strong>CoffeeScript 是個能夠編譯成 JavaScript 的簡易語言</strong>。受到 Ruby、Python 與 Haskell 等語言的啟發，CoffeeScript 增強了 JavaScript 的簡潔性與可讀性。</p><h3 id="直接來個簡單的概觀看看"><a href="#直接來個簡單的概觀看看" class="headerlink" title="直接來個簡單的概觀看看"></a>直接來個簡單的概觀看看</h3><p>賦值：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 賦值：</span></span><br><span class="line">number   = <span class="number">42</span></span><br><span class="line">opposite = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 條件式：</span></span><br><span class="line">number = <span class="number">-42</span> <span class="keyword">if</span> opposite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函式：</span></span><br><span class="line"><span class="function"><span class="title">square</span> = <span class="params">(x)</span> -&gt;</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 陣列：</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 物件：</span></span><br><span class="line">math =</span><br><span class="line">  root:   Math.sqrt</span><br><span class="line">  square: square</span><br><span class="line">  cube:   <span class="function"><span class="params">(x)</span> -&gt;</span> x * square x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 變參：</span></span><br><span class="line"><span class="function"><span class="title">race</span> = <span class="params">(winner, runners...)</span> -&gt;</span></span><br><span class="line">  <span class="built_in">print</span> winner, runners</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空值偵測：</span></span><br><span class="line">alert <span class="string">"I knew it!"</span> <span class="keyword">if</span> elvis?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 陣列推導：</span></span><br><span class="line">cubes = (math.cube num <span class="keyword">for</span> num <span class="keyword">in</span> list)</span><br></pre></td></tr></table></figure><p>編譯成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 賦值：</span></span><br><span class="line"><span class="keyword">var</span> cubes, list, math, num, number, opposite, race, square;</span><br><span class="line"></span><br><span class="line">number = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">opposite = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (opposite) &#123;</span><br><span class="line">  <span class="comment">// 條件式：</span></span><br><span class="line">  number = <span class="number">-42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函式：</span></span><br><span class="line">square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列：</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物件：</span></span><br><span class="line">math = &#123;</span><br><span class="line">  root: <span class="built_in">Math</span>.sqrt,</span><br><span class="line">  square: square,</span><br><span class="line">  cube: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * square(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 變參：</span></span><br><span class="line">race = <span class="function"><span class="keyword">function</span>(<span class="params">winner, ...runners</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> print(winner, runners);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> elvis !== <span class="string">"undefined"</span> &amp;&amp; elvis !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 空值偵測：</span></span><br><span class="line">  alert(<span class="string">"I knew it!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列推導：</span></span><br><span class="line">cubes = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, len, results;</span><br><span class="line">  results = [];</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">    num = list[i];</span><br><span class="line">    results.push(math.cube(num));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="CoffeeScript-2"><a href="#CoffeeScript-2" class="headerlink" title="CoffeeScript 2"></a>CoffeeScript 2</h2><p>在 CoffeeScript 2 中，最大的改變莫過於輸出的 JavaScript 程式碼格式（現在會輸出成較新的 ES6 或 ES2015 風格）。</p><p>而 CoffeeScript 中的 <code>=&gt;</code> 亦會變成 JS 中的 <code>=&gt;</code>，且 CoffeeScript 的 class 也會等同於 JS 的 class 類別標籤…等。還有主要追加的新功能，像是：非同步函式和 JSX。</p><h3 id="非同步函式"><a href="#非同步函式" class="headerlink" title="非同步函式"></a>非同步函式</h3><p>ES2017 的非同步函式現在能夠透過 <code>await</code> 關鍵字進行使用，不需要額外使用 <code>async</code>，使得非同步函式在 CoffeeScript 中寫起來就像一般的函式。</p><p><code>yield return</code> 可以強迫函式成為一個產生器函式，而 <code>await return</code> 則能夠強迫讓一個函式成為非同步函式。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Promise (resolve) -&gt;</span><br><span class="line"><span class="built_in">window</span>.setTimeout resolve, ms</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">say</span> = <span class="params">(text)</span> -&gt;</span></span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.cancel()</span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.speak <span class="keyword">new</span> SpeechSynthesisUtterance text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">countdown</span> = <span class="params">(seconds)</span> -&gt;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> [seconds.<span class="number">.1</span>]</span><br><span class="line">    say i</span><br><span class="line">    <span class="keyword">await</span> sleep <span class="number">1000</span> <span class="comment"># 等個一秒</span></span><br><span class="line">  say <span class="string">"Blastoff!"</span></span><br><span class="line"></span><br><span class="line">countdown <span class="number">3</span></span><br></pre></td></tr></table></figure><p>編譯成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countdown, say, sleep;</span><br><span class="line"></span><br><span class="line">sleep = <span class="function"><span class="keyword">function</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">say = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.speechSynthesis.speak(<span class="keyword">new</span> SpeechSynthesisUtterance(text));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countdown = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, j, ref;</span><br><span class="line">  <span class="keyword">for</span> (i = j = ref = seconds; (ref &lt;= <span class="number">1</span> ? j &lt;= <span class="number">1</span> : j &gt;= <span class="number">1</span>); i = ref &lt;= <span class="number">1</span> ? ++j : --j) &#123;</span><br><span class="line">    say(i);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>); <span class="comment">// 等個一秒</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> say(<span class="string">"Blastoff!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">countdown(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>JSX 是能夠帶有類 XML 元素結構的 JavaScript。雖然初期是為了 React 所設計的，但這並不是一個框架或者函式庫。</p><p>CoffeeScript 不需要任何的額外擴充套件或設定，就能夠支援類 XML 元素。XML 元素會被編譯並輸出成一般的 JSX 結果，就像 Babel 與 React JSX 的轉化。不過 CoffeeScript 並不會輸出用以呼叫 <code>React.createElement</code> 的函式，亦不會有任何與 React 和其他框架有關的程式碼。</p><p>就像 JSX 和 HTML 那樣，你可以使用 <code>&lt;</code> 與 <code>&gt;</code> 符號。你也能在 { 和 } 標籤中使用 CoffeeScript。為了避免編譯器錯誤，當 <code>&lt;</code> 和 <code>&gt;</code> 是用作「小於」或「大於」符號時，你應該透過空白來避免它們被誤認為 XML 標籤。所以你該使用 <code>i &lt; len</code> 而不是 <code>i&lt;len</code>。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">renderStarRating</span> = <span class="params">(&#123; rating, maxStars &#125;)</span> -&gt;</span></span><br><span class="line">  &lt;aside title=&#123;<span class="string">"Rating: <span class="subst">#&#123;rating&#125;</span> of <span class="subst">#&#123;maxStars&#125;</span> stars"</span>&#125;&gt;</span><br><span class="line">    &#123;<span class="keyword">for</span> wholeStar <span class="keyword">in</span> [<span class="number">0.</span>..Math.floor(rating)]</span><br><span class="line">      &lt;Star className=<span class="string">"wholeStar"</span> key=&#123;wholeStar&#125; /&gt;&#125;</span><br><span class="line">    &#123;<span class="keyword">if</span> rating % <span class="number">1</span> <span class="keyword">isnt</span> <span class="number">0</span></span><br><span class="line">      &lt;Star className=<span class="string">"halfStar"</span> /&gt;&#125;</span><br><span class="line">    &#123;<span class="keyword">for</span> emptyStar <span class="keyword">in</span> [Math.ceil(rating)...maxStars]</span><br><span class="line">      &lt;Star className=<span class="string">"emptyStar"</span> key=&#123;emptyStar&#125; /&gt;&#125;</span><br><span class="line">  &lt;/aside&gt;</span><br></pre></td></tr></table></figure><p>編譯成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> renderStarRating;</span><br><span class="line"></span><br><span class="line">renderStarRating = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;rating, maxStars&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> emptyStar, wholeStar;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">title</span>=<span class="string">&#123;</span>`<span class="attr">Rating:</span> $&#123;<span class="attr">rating</span>&#125; <span class="attr">of</span> $&#123;<span class="attr">maxStars</span>&#125; <span class="attr">stars</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;(function() &#123;</span></span><br><span class="line"><span class="xml">    var i, ref, results;</span></span><br><span class="line"><span class="xml">    results = [];</span></span><br><span class="line"><span class="xml">    for (wholeStar = i = 0, ref = Math.floor(rating); (0 <span class="tag">&lt;<span class="name">=</span> <span class="attr">ref</span> ? <span class="attr">i</span> &lt; <span class="attr">ref</span> <span class="attr">:</span> <span class="attr">i</span> &gt;</span> ref); wholeStar = 0 <span class="tag">&lt;<span class="name">=</span> <span class="attr">ref</span> ? ++<span class="attr">i</span> <span class="attr">:</span> <span class="attr">--i</span>) &#123;</span></span></span><br><span class="line">      results.push(&lt;Star className="wholeStar" key=&#123;wholeStar&#125; /&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">  &#125;)()&#125;</span><br><span class="line">    &#123;(rating % 1 !== 0 ? &lt;Star className="halfStar" /&gt; : void 0)&#125;</span><br><span class="line">    &#123;(function() &#123;</span><br><span class="line">    var i, ref, ref1, results;</span><br><span class="line">    results = [];</span><br><span class="line">    for (emptyStar = i = ref = Math.ceil(rating), ref1 = maxStars; (ref &lt;= ref1 ? i &lt; ref1 : i &gt; ref1); emptyStar = ref &lt;= ref1 ? ++i : --i) &#123;</span><br><span class="line">      results.push(&lt;Star className="emptyStar" key=&#123;emptyStar&#125; /&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">  &#125;)()&#125;</span><br><span class="line">  &lt;/aside&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CoffeeScript&quot;&gt;&lt;a href=&quot;#CoffeeScript&quot; class=&quot;headerlink&quot; title=&quot;CoffeeScript&quot;&gt;&lt;/a&gt;CoffeeScript&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;CoffeeScript 是個能夠編譯成 JavaScript 的簡易語言&lt;/strong&gt;。受到 Ruby、Python 與 Haskell 等語言的啟發，CoffeeScript 增強了 JavaScript 的簡潔性與可讀性。&lt;/p&gt;
&lt;h3 id=&quot;直接來個簡單的概觀看看&quot;&gt;&lt;a href=&quot;#直接來個簡單的概觀看看&quot; class=&quot;headerlink&quot; title=&quot;直接來個簡單的概觀看看&quot;&gt;&lt;/a&gt;直接來個簡單的概觀看看&lt;/h3&gt;&lt;p&gt;賦值：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 賦值：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number   = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opposite = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 條件式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number = &lt;span class=&quot;number&quot;&gt;-42&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; opposite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 函式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;square&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; -&amp;gt;&lt;/span&gt; x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 陣列：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 物件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  root:   Math.sqrt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  square: square&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cube:   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; -&amp;gt;&lt;/span&gt; x * square x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 變參：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;race&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(winner, runners...)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; winner, runners&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 空值偵測：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert &lt;span class=&quot;string&quot;&gt;&quot;I knew it!&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; elvis?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 陣列推導：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cubes = (math.cube num &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;編譯成：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 賦值：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cubes, list, math, num, number, opposite, race, square;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opposite = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opposite) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 條件式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  number = &lt;span class=&quot;number&quot;&gt;-42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x * x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 陣列：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 物件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;math = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  root: &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.sqrt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  square: square,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cube: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x * square(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 變參：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;race = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;winner, ...runners&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; print(winner, runners);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; elvis !== &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt; &amp;amp;&amp;amp; elvis !== &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 空值偵測：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&quot;I knew it!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 陣列推導：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cubes = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i, len, results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = list.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = list[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results.push(math.cube(num));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;CoffeeScript-2&quot;&gt;&lt;a href=&quot;#CoffeeScript-2&quot; class=&quot;headerlink&quot; title=&quot;CoffeeScript 2&quot;&gt;&lt;/a&gt;CoffeeScript 2&lt;/h2&gt;&lt;p&gt;在 CoffeeScript 2 中，最大的改變莫過於輸出的 JavaScript 程式碼格式（現在會輸出成較新的 ES6 或 ES2015 風格）。&lt;/p&gt;
&lt;p&gt;而 CoffeeScript 中的 &lt;code&gt;=&amp;gt;&lt;/code&gt; 亦會變成 JS 中的 &lt;code&gt;=&amp;gt;&lt;/code&gt;，且 CoffeeScript 的 class 也會等同於 JS 的 class 類別標籤…等。還有主要追加的新功能，像是：非同步函式和 JSX。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markup Language" scheme="http://chestertang.site/categories/Markup-Language/"/>
    
    
      <category term="CoffeeScript" scheme="http://chestertang.site/tags/CoffeeScript/"/>
    
      <category term="javascript" scheme="http://chestertang.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Haml 是什麼？</title>
    <link href="http://chestertang.site/2020/01/09/zyx0109/"/>
    <id>http://chestertang.site/2020/01/09/zyx0109/</id>
    <published>2020-01-09T05:11:40.000Z</published>
    <updated>2020-01-20T14:56:51.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Haml（HTML-Abstraction-Markup-Language"><a href="#Haml（HTML-Abstraction-Markup-Language" class="headerlink" title="Haml（HTML Abstraction Markup Language)"></a>Haml（HTML Abstraction Markup Language)</h2><p>HTML 抽象標記式語言是一種模板系統，它可以避免在 Web 文件中內嵌代碼，使 HTML 更簡易和乾淨</p><p>Haml 為 HTML 中提供了一些動態內容的靈活性。為執行 Haml 代碼，檔案需要採用 .haml 副檔名。這些檔案類似 .erb 檔案，這有助於在開發網路應用程式時嵌入 Ruby 代碼。在解析代碼注釋時，Haml 採用與 Ruby 1.9 或之後版本相同的規則</p><p>Haml 只能理解相容 ASCII 的編碼（例如UTF-8），而不能理解不相容ASCII的UTF-16與UTF-32</p><h3 id="來個-Hello-World-例子"><a href="#來個-Hello-World-例子" class="headerlink" title="來個 Hello-World 例子"></a>來個 Hello-World 例子</h3><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sample"</span> <span class="attr">id</span>=<span class="string">"welcome"</span> &gt;</span> Hello, World!!! <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Haml:</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">p</span>&#123;<span class="attr">:class</span> =&gt; <span class="string">"sample"</span>, <span class="attr">:id</span> =&gt; <span class="string">"welcome"</span>&#125;</span> Hello, World!!!</span><br></pre></td></tr></table></figure><p>又可以變成：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">p</span><span class="selector-class">.sample</span><span class="selector-id">#welcome</span></span> Hello, World!!!</span><br></pre></td></tr></table></figure><p>類似 eRuby，Haml也可以存取局部變數（在同一個檔案中以Ruby代碼聲明）</p><ul><li><p>file: app/controllers/messages_controller.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagesController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @message = <span class="string">"Hello, World!!!"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>file: app/views/messages/index.html.haml</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#welcome</span><br><span class="line"><span class="tag">  %<span class="selector-tag">p</span></span>= @message</span><br></pre></td></tr></table></figure></li></ul><p>將得到：</p><ul><li><p>Haml 編譯成 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"welcome"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> Hello, World!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="再來跟跟習慣的-eRuby-erb-比較看看"><a href="#再來跟跟習慣的-eRuby-erb-比較看看" class="headerlink" title="再來跟跟習慣的 eRuby(erb) 比較看看"></a>再來跟跟習慣的 eRuby(erb) 比較看看</h3><ul><li><p>Haml</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#content</span><br><span class="line">  .left.column</span><br><span class="line"><span class="tag">    %<span class="selector-tag">h2</span></span> Welcome to our site!</span><br><span class="line"><span class="tag">    %<span class="selector-tag">p</span></span>= print_information</span><br><span class="line">  .right.column</span><br><span class="line">    =<span class="ruby"> render <span class="symbol">:partial</span> =&gt; <span class="string">"sidebar"</span></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ERB</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left column'</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to our site!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> print_information </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right column"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> render <span class="symbol">:partial</span> =&gt; <span class="string">"sidebar"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="讓專案執行-haml-檔案"><a href="#讓專案執行-haml-檔案" class="headerlink" title="讓專案執行 haml 檔案"></a>讓專案執行 haml 檔案</h3><p>  安裝 Haml gem：</p>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'haml'</span>, <span class="string">'~&gt; 4.0'</span>, <span class="string">'&gt;= 4.0.7'</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://rubygems.org/gems/haml/versions/4.0.7?locale=zh-TW" target="_blank" rel="noopener">Rubygem.org</a></p></blockquote><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>  其實如果有接觸過 pug / sass 這類的話，基本上再來看就會發現整體很熟悉，簡單的規則歸類以下：</p><ol><li>&lt;h1&gt;&lt;/h1&gt; 省略 <code>結尾</code>、 <code>大於小於</code> 變成 %h1</li><li>class / id 將以 <code>.</code> / <code>#</code> 來代表</li><li>&lt;%= %&gt; 將直接以 <code>=</code> 來代表 </li><li>&lt;% %&gt; 將直接以 <code>-</code> 來代表</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Haml（HTML-Abstraction-Markup-Language&quot;&gt;&lt;a href=&quot;#Haml（HTML-Abstraction-Markup-Language&quot; class=&quot;headerlink&quot; title=&quot;Haml（HTML Abstraction Markup Language)&quot;&gt;&lt;/a&gt;Haml（HTML Abstraction Markup Language)&lt;/h2&gt;&lt;p&gt;HTML 抽象標記式語言是一種模板系統，它可以避免在 Web 文件中內嵌代碼，使 HTML 更簡易和乾淨&lt;/p&gt;
&lt;p&gt;Haml 為 HTML 中提供了一些動態內容的靈活性。為執行 Haml 代碼，檔案需要採用 .haml 副檔名。這些檔案類似 .erb 檔案，這有助於在開發網路應用程式時嵌入 Ruby 代碼。在解析代碼注釋時，Haml 採用與 Ruby 1.9 或之後版本相同的規則&lt;/p&gt;
&lt;p&gt;Haml 只能理解相容 ASCII 的編碼（例如UTF-8），而不能理解不相容ASCII的UTF-16與UTF-32&lt;/p&gt;
&lt;h3 id=&quot;來個-Hello-World-例子&quot;&gt;&lt;a href=&quot;#來個-Hello-World-例子&quot; class=&quot;headerlink&quot; title=&quot;來個 Hello-World 例子&quot;&gt;&lt;/a&gt;來個 Hello-World 例子&lt;/h3&gt;&lt;p&gt;HTML:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sample&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;welcome&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt; Hello, World!!! &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Haml:&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;sample&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;:id&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt; Hello, World!!!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;又可以變成：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markup Language" scheme="http://chestertang.site/categories/Markup-Language/"/>
    
    
      <category term="html" scheme="http://chestertang.site/tags/html/"/>
    
      <category term="Ruby on Rails" scheme="http://chestertang.site/tags/Ruby-on-Rails/"/>
    
      <category term="Haml" scheme="http://chestertang.site/tags/Haml/"/>
    
      <category term="erb" scheme="http://chestertang.site/tags/erb/"/>
    
      <category term="gem" scheme="http://chestertang.site/tags/gem/"/>
    
      <category term="eRuby" scheme="http://chestertang.site/tags/eRuby/"/>
    
  </entry>
  
  <entry>
    <title>環境架設 macOS</title>
    <link href="http://chestertang.site/2020/01/06/zyx0107/"/>
    <id>http://chestertang.site/2020/01/06/zyx0107/</id>
    <published>2020-01-06T07:24:40.000Z</published>
    <updated>2020-01-15T05:40:33.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="環境架設-macOS"><a href="#環境架設-macOS" class="headerlink" title="環境架設 macOS"></a>環境架設 macOS</h1><p>這兩天上班架設環境發現一些問題，重新灌了好幾次，於是就想說來把所有的問題都列下來，這樣也好等問題遇到也可以重新來看看ouo</p><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>  Homebrew 是 Mac OSX 上的的套件管理工具，是方便安裝管理 OSX 裡需要用到但預設沒安裝的套件。Homebrew 的安裝只需要打開終端機輸入安裝指令</p><p>  安裝指令：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>  確認是否有安裝成功：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure><h2 id="終端機-iTerm2"><a href="#終端機-iTerm2" class="headerlink" title="終端機 iTerm2"></a>終端機 iTerm2</h2><p>  iTerm2 是一個可以用來取代 MAC 原生終端機的工具，只需到官網下載，或在 terminal 中輸入以下指令，直接透過 homebrew 安裝</p><p>  安裝指令：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你從來沒有用過 brew cask 的話需要先跑這行</span></span><br><span class="line">brew tap caskroom/cask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝 iTerm2</span></span><br><span class="line">brew cask instal iterm2</span><br></pre></td></tr></table></figure><blockquote><h2 id="iTerm2-主題配色"><a href="#iTerm2-主題配色" class="headerlink" title="iTerm2 主題配色"></a>iTerm2 主題配色</h2></blockquote><p>  可以參考以下這個連結來進行主題配色，綜合整篇，我整理我有使用的指令配色等等如下：</p><h3 id="安裝-powerline-font"><a href="#安裝-powerline-font" class="headerlink" title="安裝 powerline font"></a>安裝 powerline font</h3><p>  因為我們要用的 theme 會用一些特殊 icon，所以 iTerm2 選用的字型必需要支援這種特殊 icon font，沒有安裝這個 icon 的話，符號會變成正方形包問號的框框</p><p>  安裝指令：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安裝指令</span></span><br><span class="line">brew cask install font-sourcecodepro-nerd-font</span><br></pre></td></tr></table></figure><p>  裝完後，記得修改 iTerm2 字型。改成 SauceCodePro Nerd Font<br>  設定路徑：<code>Preferences</code> &gt; <code>Profiles</code> &gt; <code>Text</code> &gt; <code>Change Font</code> &gt; <code>SauceCodePro Nerd Font</code></p><h2 id="安裝-zsh"><a href="#安裝-zsh" class="headerlink" title="安裝 zsh"></a>安裝 zsh</h2><p>  zsh 是個取代 bash 的強大 shell，比 bash 好用幾百倍。這篇文章介紹的 command line 設定一定要跑在 zsh。沒用過的一定要試一下</p><p>  安裝指令：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安裝指令</span></span><br><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p>  設定為你的預設終端機為 zsh：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">"echo <span class="variable">$(which zsh)</span> &gt;&gt; /etc/shells"</span> </span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><h2 id="安裝-oh-my-zsh"><a href="#安裝-oh-my-zsh" class="headerlink" title="安裝 oh-my-zsh"></a>安裝 oh-my-zsh</h2><p>  原始的 zsh設定太難搞，所以來安裝 framework oh-my-zsh。現在幾乎所有 zsh 好用的工具都有支援 oh-my-zsh，所以裝就對惹…</p><p>  安裝指令：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="zsh-theme-powerlevel9k"><a href="#zsh-theme-powerlevel9k" class="headerlink" title="zsh theme powerlevel9k"></a>zsh theme powerlevel9k</h2></blockquote><p>  安裝 powerlevel9k ：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>  更改 ZSH_THEME 的主題：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 透過 vscode 打開檔案並編輯 code ~/.zshrc</span></span><br><span class="line">ZSH_THEME=”ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span>”</span><br></pre></td></tr></table></figure><p>  重新執行以下指令才會生效：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>  更改一些我推薦的內容：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command line 左邊圖示 + 版控</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs) <span class="comment"># &lt;= left prompt 設了 "dir" / "vcs" 版本控制的資訊</span></span><br><span class="line"><span class="comment"># command line 右邊時間圖示</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(time) <span class="comment"># &lt;= right prompt 設了 "time"</span></span><br></pre></td></tr></table></figure><hr><h1 id="好用的工具"><a href="#好用的工具" class="headerlink" title="好用的工具"></a>好用的工具</h1><ol><li><h2 id="Spectacle"><a href="#Spectacle" class="headerlink" title="Spectacle"></a><a href="https://www.spectacleapp.com/" target="_blank" rel="noopener">Spectacle</a></h2><p> mac 版本的分割視窗，可以設定在哪個 app 中啟用，快速鍵也都能客製化，習慣把 app 視窗全螢幕，或者是切割螢幕左右查找文件的好幫手</p></li><li><h2 id="Alfred-4"><a href="#Alfred-4" class="headerlink" title="Alfred 4"></a><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred 4</a></h2><p> 跟內建的 Spotlight 搜尋其實滿像的，不過個人覺得好用些，如果查詢不到的資料就可以透過瀏覽器開啟（Spotlight 沒有此項功能，單純搜尋本機的檔案）</p></li><li><h2 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a><a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a></h2><p> 找程式語法的app，同時軟體也支援 Stackoverflow，不管是框架、語法，基本上你能想到的東西都能查，應該說最常用到的工具，前提是你要知道那個語法XDDD</p></li><li><h2 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></h2><p> 看 Git branch / commit 圖像工具，同時也可以在 app 按按鈕完成 merge / pull 指令，有時候輔助整體看 branch / commit 的好工具</p></li><li><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a></h2><p> 測試 API 的工具，還有出 Postwoman 也是相同的～</p></li><li><h2 id="Quiver-APP-Store-付費軟體"><a href="#Quiver-APP-Store-付費軟體" class="headerlink" title="Quiver (APP Store 付費軟體)"></a><a href="https://apps.apple.com/tw/app/quiver-take-better-notes/id866773894?mt=12" target="_blank" rel="noopener">Quiver (APP Store 付費軟體)</a></h2><p> 之前用 <code>Typora</code> 也是大推，不過缺點是沒有同步功能，且想同時在 mac / Pad / Iphone 下使用基本上是不可能，這款付費軟體一次就買斷，寫寫文章也好用，搭配 Dropbox 可以直接備份同步</p></li><li><h2 id="TablePlus"><a href="#TablePlus" class="headerlink" title="TablePlus"></a><a href="https://tableplus.com/" target="_blank" rel="noopener">TablePlus</a></h2><p> 導入 DB 的好工具，目前工作專案才用，之後有什麼心得會補上ouo</p></li></ol><hr><h1 id="從-rvm-切換到-rbenv"><a href="#從-rvm-切換到-rbenv" class="headerlink" title="從 rvm 切換到 rbenv"></a>從 rvm 切換到 rbenv</h1><p>說一下原因好惹，因為發現工作專案要 Ruby 2.3.7 版本，原本的電腦為 2.6.3，在新版 2.6.3 的狀況下，把專案 clone 下來之後，跑 bundle 正常，不過  rails s 會噴錯滿正常的，因為專案內容中的 images 是 2.3.7 版本</p><p>因此透過 <code>rvm</code> 安裝 2.3.7，結果跑 bundle 噴出以下錯誤：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Could not load OpenSSL.</span><br><span class="line">You must recompile Ruby with OpenSSL support or change the sources <span class="keyword">in</span> your Gemfile from <span class="string">'https'</span> to <span class="string">'http'</span>. Instructions</span><br><span class="line"><span class="keyword">for</span> compiling with OpenSSL using RVM are available at http://rvm.io/packages/openssl.</span><br></pre></td></tr></table></figure><p>去安裝 openssl 後</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ brew install openssl                                                                                  </span><br><span class="line">Warning: openssl@1.1 1.1.1d is already installed and up-to-date</span><br><span class="line">To reinstall 1.1.1d, run `brew reinstall openssl@1.1`</span><br></pre></td></tr></table></figure><p>經過研究之後，發現好像踩到地雷了… 所以忍痛割愛（誤</p><h2 id="清理-rvm"><a href="#清理-rvm" class="headerlink" title="清理 rvm"></a>清理 rvm</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rvm implode</span><br><span class="line">sudo rm -rf ~/.rvm</span><br></pre></td></tr></table></figure><h2 id="安裝-rbenv"><a href="#安裝-rbenv" class="headerlink" title="安裝 rbenv"></a>安裝 rbenv</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br><span class="line">brew update</span><br><span class="line">brew install rbenv</span><br><span class="line">brew install ruby-build</span><br></pre></td></tr></table></figure><h2 id="設置-rbenv-的環境"><a href="#設置-rbenv-的環境" class="headerlink" title="設置 rbenv 的環境"></a>設置 rbenv 的環境</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unubtu请放到 ~/.bashrc 里, zsh用戶是 ~/.zshrc</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/Users/andy/.rbenv/shims:<span class="variable">$PATH</span>"</span> <span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安裝-Ruby"><a href="#安裝-Ruby" class="headerlink" title="安裝 Ruby"></a>安裝 Ruby</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbenv install --list         <span class="comment"># 列出所有 ruby 版本</span></span><br><span class="line">rbenv install 2.3.7          <span class="comment"># 安装 2.3.7</span></span><br></pre></td></tr></table></figure><h2 id="列出版本"><a href="#列出版本" class="headerlink" title="列出版本"></a>列出版本</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbenv versions               <span class="comment"># 列出安装的版本</span></span><br><span class="line">rbenv version                <span class="comment"># 列出正在使用的版本</span></span><br></pre></td></tr></table></figure><h2 id="设置版本"><a href="#设置版本" class="headerlink" title="设置版本"></a>设置版本</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbenv global 2.3.7           <span class="comment"># 預設使用 2.3.7</span></span><br><span class="line">rbenv shell 2.3.7            <span class="comment"># 目前的 shell 使用 2.3.7</span></span><br></pre></td></tr></table></figure><h2 id="重啟"><a href="#重啟" class="headerlink" title="重啟"></a>重啟</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">rehash</span>                 <span class="comment"># 切換ruby 版本和執行 bundle 後須執行的指令</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;環境架設-macOS&quot;&gt;&lt;a href=&quot;#環境架設-macOS&quot; class=&quot;headerlink&quot; title=&quot;環境架設 macOS&quot;&gt;&lt;/a&gt;環境架設 macOS&lt;/h1&gt;&lt;p&gt;這兩天上班架設環境發現一些問題，重新灌了好幾次，於是就想說來把所有的問題都列下來，這樣也好等問題遇到也可以重新來看看ouo&lt;/p&gt;
&lt;h2 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h2&gt;&lt;p&gt;  Homebrew 是 Mac OSX 上的的套件管理工具，是方便安裝管理 OSX 裡需要用到但預設沒安裝的套件。Homebrew 的安裝只需要打開終端機輸入安裝指令&lt;/p&gt;
&lt;p&gt;  安裝指令：&lt;/p&gt;
  &lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;  確認是否有安裝成功：&lt;/p&gt;
  &lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;終端機-iTerm2&quot;&gt;&lt;a href=&quot;#終端機-iTerm2&quot; class=&quot;headerlink&quot; title=&quot;終端機 iTerm2&quot;&gt;&lt;/a&gt;終端機 iTerm2&lt;/h2&gt;&lt;p&gt;  iTerm2 是一個可以用來取代 MAC 原生終端機的工具，只需到官網下載，或在 terminal 中輸入以下指令，直接透過 homebrew 安裝&lt;/p&gt;
    
    </summary>
    
    
      <category term="環境架設macOS" scheme="http://chestertang.site/categories/%E7%92%B0%E5%A2%83%E6%9E%B6%E8%A8%ADmacOS/"/>
    
    
      <category term="rvm" scheme="http://chestertang.site/tags/rvm/"/>
    
      <category term="rbenv" scheme="http://chestertang.site/tags/rbenv/"/>
    
      <category term="zsh" scheme="http://chestertang.site/tags/zsh/"/>
    
      <category term="Oh-my-zsh" scheme="http://chestertang.site/tags/Oh-my-zsh/"/>
    
      <category term="iTrem2" scheme="http://chestertang.site/tags/iTrem2/"/>
    
      <category term="macOS" scheme="http://chestertang.site/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>2019 面試分享</title>
    <link href="http://chestertang.site/2019/12/29/Interview2019/"/>
    <id>http://chestertang.site/2019/12/29/Interview2019/</id>
    <published>2019-12-29T08:40:40.000Z</published>
    <updated>2020-01-15T03:58:54.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019-面試分享-11-13-12-24"><a href="#2019-面試分享-11-13-12-24" class="headerlink" title="2019 面試分享(11/13-12/24)"></a>2019 面試分享(11/13-12/24)</h1><ul><li><a href="https://starrocket.io/" target="_blank" rel="noopener">三創基金會</a></li><li><a href="https://www.vysioneer.com/" target="_blank" rel="noopener">Vysioneer 醫隼智慧</a></li><li><a href="http://www.square1research.com/" target="_blank" rel="noopener">SquareOne</a></li><li><a href="https://aktsk.com.tw/" target="_blank" rel="noopener">Akatsuki</a></li><li><a href="https://www.104.com.tw/company/a5hh36w" target="_blank" rel="noopener">合勤集團科技</a></li><li><a href="https://www.104.com.tw/company/18m9x6ah?jobsource=jolist_a_relevance" target="_blank" rel="noopener">T客邦</a></li><li><a href="https://www.104.com.tw/company/oe84aqo" target="_blank" rel="noopener">德義資訊</a></li><li><a href="https://www.104.com.tw/company/1a2x6biidu" target="_blank" rel="noopener">Pinkoi</a></li><li><a href="https://www.104.com.tw/company/1a2x6bjyqi" target="_blank" rel="noopener">天旭國際科技</a></li><li><a href="https://www.104.com.tw/company/1a2x6bk0hw" target="_blank" rel="noopener">塞席爾商悠福科技</a></li><li><a href="https://www.104.com.tw/company/cqcrfnk" target="_blank" rel="noopener">ThinkPower – 昕力資訊</a></li></ul><p>(公司排列順序以面試時間排列，以下將依照前、後和全端來分類)</p><hr><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="三創基金會"><a href="#三創基金會" class="headerlink" title="三創基金會"></a>三創基金會</h2><p>鴻海集團下的基金會，技術主管兼副執行長Lawrence是ROR的前輩（第二屆的評審之一），很喜歡轉職的人，認為人的企圖心比你現在的實力重要，在意你是不是真的想變強，選擇信任他的人為主，是個認為前端會是這個世代的大耀進，團隊勇於嘗試用新的技術（EX: graphql、nuxtjs、now…），工程師人數就是副執行長，他的過往作品就應該不用多說了…</p><ul><li><p>面試問題：主要都在聊天了解個人特質居多，大多為軟性問題</p><ul><li>document.querySelectorAll / document.querySelector 的差別</li><li>你未來想成為什麼樣的人？</li><li>你認為怎樣才是強的人？</li><li>等等… 聊天聊到忘記惹XD</li></ul></li><li><p>工作環境：四顆星，三創11F，工作環境辦公室雖然小，但外面是一個咖啡廳～不一定要在辦公室內工作</p></li><li><p>工作內容：不太方便說，大多工作型態為remote，副執行長比較少在辦公室出現</p></li><li><p>投遞履歷方式(自)：<a href="https://github.com/f2etw/jobs/issues/585" target="_blank" rel="noopener">https://github.com/f2etw/jobs/issues/585</a></p></li></ul><blockquote><p>結果：GET</p></blockquote><h2 id="Vysioneer-醫隼智慧"><a href="#Vysioneer-醫隼智慧" class="headerlink" title="Vysioneer 醫隼智慧"></a>Vysioneer 醫隼智慧</h2><p>醫療產業的公司，基本上跟台大醫院合作，因此地點就在五倍附近的君悅排骨旁的大樓樓上，工程師主要為兩塊，大多為寫演算法的工程師(忘記多少人了好像10個人左右，都在寫醫療的數據等等)，另外處理前端的工程師只有一位Senior，包辦官網、醫療器材影像處理、舉辦大型研討會需要小的Demo作品等等。</p><ul><li><p>面試問題：以Demo Project的方式下去問問題，舉例來說</p><ul><li>你有用過 ROR 的 <code>cocoon</code> 這個 gem，那如果你用JS下去寫該如何實作？</li><li>透過 Devise 及 Ouath2 來處理使用者登入問題，你可以解釋一下整個的流程嗎？</li><li>Cookie / Session 的差別</li><li>過往的工作經驗</li><li>碩士論文也問ww</li><li>等等…（不過沒有問到框架問題 ex：React）</li></ul></li><li><p>工作環境：三顆星，空間為一層的大樓辦公室，出入的人大多都穿西裝</p></li><li><p>工作內容：大致上就是分擔主管的工作，畢竟是新創且只有他一個人，像是花兩個禮拜處理官方網站、之後處理實作一些小作品讓公司在研討會可以給人實作。</p></li><li><p>面試時間：只有一階段、也沒有人資面試(Senior工程師來面試而已)，約莫2.5hr左右～</p></li><li><p>遞履歷方式(自)：<a href="https://github.com/f2etw/jobs/issues/605" target="_blank" rel="noopener">https://github.com/f2etw/jobs/issues/605</a></p></li></ul><blockquote><p>結果：感謝信，主要原因為需要找更有經驗的Junior</p></blockquote><h2 id="天旭國際科技-101博弈業"><a href="#天旭國際科技-101博弈業" class="headerlink" title="天旭國際科技(101博弈業)"></a>天旭國際科技(101博弈業)</h2><p><del>博弈業就大概那樣子…不太好說～博弈業就大概那樣子…不太好說～</del></p><ul><li><p>面試問題：總共五個部分(JS、React、CSS、Web Tech、Git)</p><ol><li>JS<ul><li>Promises 之於 Callbacks 的優劣？</li><li>你曾經用過 Async/Await 嗎？它的好處是什麼？</li><li>你曾經用過 Arrow Function 嗎？它與一般 <code>function() {}</code>的差異是什麼？</li><li>請解釋 Closure 是什麼？</li><li>請解釋 Hoisting 是什麼？</li><li>請問你使用過 Array.prototype.filter 嗎？跟 map / reduce 的差異是什麼？</li><li>你曾經用過哪些 Bundle 工具？為什麼會選擇它？</li></ul></li><li>React<ul><li>請問 State / Props 的使用時機是什麼？</li><li>請問 Function Component / Class Component 的使用時機是什麼？</li><li>請問什麼時候需要用到 PureComponent？</li><li>你會如何預防非必要的 React 元件渲染？</li><li>你曾經用過 Redux 嗎？請解釋它的優/缺點。</li><li>你知道 RenderProps / HighOrderComponent 是什麼嗎？他們的使用時機？</li></ul></li><li>CSS<ul><li>你曾經使用過哪些 UI Framework 呢？他們的優缺點是什麼？你為什麼會選擇它？</li><li>請解釋 CSS 的 Box Model</li><li>請解釋 CSS 的 Flexbox</li><li>請描述三種垂直置中的方式</li></ul></li><li>Web Tech<ul><li>請解釋 RWD 是什麼和實作方式。</li><li>請解釋 PWA 是什麼和實作方式。</li></ul></li><li>Git<ul><li>你曾經在多人協作的專案中使用過 Git 嗎？</li><li>你曾經使用過任何一個 Git Flow 嗎？請描述他們的優缺點</li><li>你會怎麼解決 ConFlict 呢？</li><li>什麼情況下你會用到 rebase 指令？</li></ul></li></ol></li><li><p>工作環境：五顆星，在101有兩層，一層大概一百多人左右…</p></li><li><p>工作內容：你知道的</p></li><li><p>面試時間：人資介紹公司1HR + 面談考試2HR，約莫3HR</p></li><li><p>投遞履歷方式(公司人資104訊息)：<a href="https://www.104.com.tw/job/5vzsd?jobsource=company_job" target="_blank" rel="noopener">https://www.104.com.tw/job/5vzsd?jobsource=company_job</a></p></li></ul><blockquote><p>結果：GET</p></blockquote><h2 id="ThinkPower-昕力"><a href="#ThinkPower-昕力" class="headerlink" title="ThinkPower 昕力"></a>ThinkPower 昕力</h2><p>類似接案公司，主力為數位金融Chatbox產品，公司有四個項目在做，一個是大型接案、小型接案、自有產品、一個忘記惹ouo，不過面試主管居然找了美術的部門來，多在問過往有沒有與UI/UX的經驗等等，主要的產品像是台新銀行的 Richart 、阿發…等等</p><ul><li><p>面試問題：總共兩個部分(邏輯測驗 + JS測驗)</p><ol><li><p>邏輯測驗(15mins)</p><ul><li>選擇*10<ul><li>Ex: 數列 4, 6, 9, 13, 18，下個數字是多少？</li></ul></li><li>多選*5<ul><li>Ex: 有幾座塔是矮人，而有幾個矮人是碼頭工人，以下選項何者正確？ </li></ul></li></ul></li><li><p>JS測驗(20mins)</p><ul><li>選擇*15<ul><li>好好看 Kuro 大大的 008 百分之百都在考前幾章的東西</li></ul></li></ul></li></ol></li><li><p>工作環境：五顆星，在內湖仁寶電腦旁邊大樓，辦公室挺美的</p></li><li><p>工作內容：處理接案內容，依照 UI/UX設計師的 Sketch 設計稿來切版之類的～</p></li><li><p>面試時間：先考紙筆邏輯測驗 + JS測驗後，與 UI/UX設計師介紹，再跟人資面談，約莫2.5HR</p></li><li><p>投遞履歷方式(公司人資104訊息)：<a href="https://www.104.com.tw/job/60fal?jobsource=company_job" target="_blank" rel="noopener">https://www.104.com.tw/job/60fal?jobsource=company_job</a></p></li></ul><blockquote><p>結果：GET</p></blockquote><hr><h1 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h1><h2 id="Akatsuki-Taiwan-曉數碼-手遊"><a href="#Akatsuki-Taiwan-曉數碼-手遊" class="headerlink" title="Akatsuki Taiwan 曉數碼(手遊)"></a>Akatsuki Taiwan 曉數碼(手遊)</h2><p>後端是ROR，流量非常大的日商遊戲產業公司，稍微去官網大概就知道它們的手遊產品有哪兩個～面試人資不會介紹公司，他們認為你應該先做好功課，有多麼想要近來這間公司才是重點（英文面試），下一關技術主管也是大大，主要是系統維運工程師，整體面談給人的感覺偏差。</p><ul><li><p>面試問題：</p><ul><li>可以參考小菜的文章 <a href="https://github.com/River-Ye" target="_blank" rel="noopener">https://github.com/River-Ye</a></li></ul></li><li><p>工作環境：五顆星，新創的概念，很～美</p></li><li><p>工作內容：系統工程師，維護遊戲使用者的資料等等，開發手遊功能，像是轉蛋的概念</p></li><li><p>面試時間：人資1.5hr + 技術面談1.5hr，約莫3hr左右</p></li><li><p>投遞履歷方式(快速面試)</p></li></ul><blockquote><p>結果：感謝信</p></blockquote><h2 id="Pinkoi"><a href="#Pinkoi" class="headerlink" title="Pinkoi"></a>Pinkoi</h2><p>後端是python，人資面試相當親切，主要就是文創的電商平台，後端的面試主管剛好是我的學長，據說裡面有兩個python的大神，另外公司也就在228公園旁邊而已，離五倍距離基本上等於沒有，結束還有小禮物（唯一一個TT</p><ul><li><p>面試問題：</p><ul><li>leetcode * 2，大概都是簡單~中等的題目 ( Ex：ord() )，兩題的內容會再延伸為白板題</li><li>SQL * 2，概念是要考會不會用關聯表，沒有ORM的方式下如何 join 兩個表單</li><li>介紹一下資料結構，何謂陣列、Object、這類型等等…</li><li>常用的 Git 指令 *3</li></ul></li><li><p>工作環境：五顆星，非常美</p></li><li><p>工作內容：後端工程師，電商平台</p></li><li><p>面試時間：紙筆測驗0.5hr + 人資0.5hr + 技術面談1hr(有白板題)，約莫2hr左右</p></li><li><p>投遞履歷方式(自)：<a href="https://www.pinkoi.com/about/careers#backend-engineer" target="_blank" rel="noopener">https://www.pinkoi.com/about/careers#backend-engineer</a></p></li></ul><blockquote><p>結果：感謝信</p></blockquote><hr><h1 id="全端"><a href="#全端" class="headerlink" title="全端"></a>全端</h1><h2 id="SquareOne"><a href="#SquareOne" class="headerlink" title="SquareOne"></a>SquareOne</h2><p>老闆接下一些國外的案子，此外前端框架主要是 React，裡頭的 Senior 大大非常強，性質主要是投資風險的平台，後端全端都要寫，個人覺得老闆的對談非常好，雖然是個小公司，但整體面談分數算這幾間滿高的。</p><ul><li><p>面試問題：</p><ul><li>主要以 DemoProject 來問問題居多</li><li>透過 fb/google 做登入，如果換信箱該如何處理？</li><li>如果想要自己手刻一個 CSS 框架，該如何實作？</li></ul></li><li><p>工作環境：四顆星，cowork 的小公司，整體氣氛滿好的我認為</p></li><li><p>工作內容：全端工程師，前端技術只要是 React</p></li><li><p>面試時間：聊天0.5hr(全英) + Senior技術面談1hr，老闆0.5hr，約莫2.5hr左右</p></li><li><p>投遞履歷方式(快速面試)</p></li></ul><blockquote><p>結果：感謝信，被好朋友幹掉惹ouo</p></blockquote><h2 id="合勤集團科技"><a href="#合勤集團科技" class="headerlink" title="合勤集團科技"></a>合勤集團科技</h2><p>在新竹園區的傳統硬體大公司，主要多能接觸到AWS的部分，有80%的時間都在接觸後端打API之類的，前端偶爾會有網頁要稍微改一下，多為處理較複雜的商業邏輯</p><ul><li><p>面試問題：</p><ul><li>多在問 DemoProject 居多</li><li>必須對 API 的操作跟方式很熟悉</li></ul></li><li><p>工作環境：三顆星，傳統大公司</p></li><li><p>工作內容：全端工程師</p></li><li><p>面試時間：技術面談2hr，約莫2hr左右</p></li><li><p>投遞履歷方式(快速面試)</p></li></ul><blockquote><p>結果：GET</p></blockquote><h2 id="T客邦"><a href="#T客邦" class="headerlink" title="T客邦"></a>T客邦</h2><p>城邦集團底下公司，主要有四個產品(Ｔ客邦、MF變型男、T17)，包含三個論壇以及之後要開發的一個平台，裡面有一個大大 + 一個PM + 一個Senior，整體面試都挺和善，不過要同時經營三個平台的維護加上新平台的開發，新平台的開發前後台的是 React 框架，屬於電商、Ecommerce的平台</p><ul><li><p>面試問題：考卷共五張，前端 / 後端 / Git / Web Tech / 雲端</p><ul><li>一個小時的紙筆測驗(考卷五張)</li><li>題目有點多… 當初忘記拍下來了ouo</li><li>雲端這部分我都空白，單純只會 Heroku 的話基本上都看不懂，唯一看得懂 何謂 redis 而已</li></ul></li><li><p>工作環境：三顆星，傳統小公司</p></li><li><p>工作內容：全端工程師</p></li><li><p>面試時間：紙筆面試*5張1hr  + 技術面談2hr，約莫3hr左右</p></li><li><p>投遞履歷方式(快速面試)</p></li></ul><blockquote><p>結果：GET</p></blockquote><h2 id="德義資訊"><a href="#德義資訊" class="headerlink" title="德義資訊"></a>德義資訊</h2><p>爆炸雷，叫你去學 Java，底下就不用看了</p><ul><li>面試問題：略</li><li>工作環境：兩顆星，傳統公司那樣子</li><li>工作內容：接樂天的案子，在裡面學JAVA？</li><li>面試時間：筆試1hr + 技術面談1.5hr，約莫2.5hr左右</li><li>投遞履歷方式(公司人資104訊息)：<a href="https://www.104.com.tw/company/oe84aqo" target="_blank" rel="noopener">https://www.104.com.tw/company/oe84aqo</a></li></ul><blockquote><p>結果：GET</p></blockquote><h2 id="塞席爾商悠福科技"><a href="#塞席爾商悠福科技" class="headerlink" title="塞席爾商悠福科技"></a>塞席爾商悠福科技</h2><p>小雷，公司小又舊，人非常奇怪。主要在做下廣告的公司，包含 fb/google/SEO 這塊等等…雖然主管問問題都很到位，不管是從前端到後端，但是整體公司氣氛有點詭異，不打卡且要來公司不來都可以</p><ul><li>面試問題：略</li><li>工作環境：一顆星，很小又很破舊</li><li>工作內容：廣告分析的公司，前端要寫Vue</li><li>面試時間：技術面談1.5hr，白板題0.5hr(遞迴數列)，約莫2hr左右</li><li>投遞履歷方式(公司人資104訊息)：<a href="https://www.104.com.tw/company/1a2x6bk0hw" target="_blank" rel="noopener">https://www.104.com.tw/company/1a2x6bk0hw</a></li></ul><blockquote><p>結果：無聲卡</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2019-面試分享-11-13-12-24&quot;&gt;&lt;a href=&quot;#2019-面試分享-11-13-12-24&quot; class=&quot;headerlink&quot; title=&quot;2019 面試分享(11/13-12/24)&quot;&gt;&lt;/a&gt;2019 面試分享(11/13-12/24)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://starrocket.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;三創基金會&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vysioneer.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vysioneer 醫隼智慧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.square1research.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SquareOne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aktsk.com.tw/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Akatsuki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/a5hh36w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;合勤集團科技&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/18m9x6ah?jobsource=jolist_a_relevance&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;T客邦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/oe84aqo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;德義資訊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/1a2x6biidu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pinkoi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/1a2x6bjyqi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;天旭國際科技&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/1a2x6bk0hw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;塞席爾商悠福科技&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.104.com.tw/company/cqcrfnk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThinkPower – 昕力資訊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(公司排列順序以面試時間排列，以下將依照前、後和全端來分類)&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;h2 id=&quot;三創基金會&quot;&gt;&lt;a href=&quot;#三創基金會&quot; class=&quot;headerlink&quot; title=&quot;三創基金會&quot;&gt;&lt;/a&gt;三創基金會&lt;/h2&gt;&lt;p&gt;鴻海集團下的基金會，技術主管兼副執行長Lawrence是ROR的前輩（第二屆的評審之一），很喜歡轉職的人，認為人的企圖心比你現在的實力重要，在意你是不是真的想變強，選擇信任他的人為主，是個認為前端會是這個世代的大耀進，團隊勇於嘗試用新的技術（EX: graphql、nuxtjs、now…），工程師人數就是副執行長，他的過往作品就應該不用多說了…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面試問題：主要都在聊天了解個人特質居多，大多為軟性問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.querySelectorAll / document.querySelector 的差別&lt;/li&gt;
&lt;li&gt;你未來想成為什麼樣的人？&lt;/li&gt;
&lt;li&gt;你認為怎樣才是強的人？&lt;/li&gt;
&lt;li&gt;等等… 聊天聊到忘記惹XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作環境：四顆星，三創11F，工作環境辦公室雖然小，但外面是一個咖啡廳～不一定要在辦公室內工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作內容：不太方便說，大多工作型態為remote，副執行長比較少在辦公室出現&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;投遞履歷方式(自)：&lt;a href=&quot;https://github.com/f2etw/jobs/issues/585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/f2etw/jobs/issues/585&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;結果：GET&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vysioneer-醫隼智慧&quot;&gt;&lt;a href=&quot;#Vysioneer-醫隼智慧&quot; class=&quot;headerlink&quot; title=&quot;Vysioneer 醫隼智慧&quot;&gt;&lt;/a&gt;Vysioneer 醫隼智慧&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面試分享" scheme="http://chestertang.site/categories/%E9%9D%A2%E8%A9%A6%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="2019 面試" scheme="http://chestertang.site/tags/2019-%E9%9D%A2%E8%A9%A6/"/>
    
      <category term="Ruby on Rails" scheme="http://chestertang.site/tags/Ruby-on-Rails/"/>
    
      <category term="React" scheme="http://chestertang.site/tags/React/"/>
    
      <category term="Frontend" scheme="http://chestertang.site/tags/Frontend/"/>
    
      <category term="Backend" scheme="http://chestertang.site/tags/Backend/"/>
    
      <category term="Fullstack" scheme="http://chestertang.site/tags/Fullstack/"/>
    
  </entry>
  
  <entry>
    <title>新手村30 - Whack A Mole</title>
    <link href="http://chestertang.site/2019/10/15/javascript30/"/>
    <id>http://chestertang.site/2019/10/15/javascript30/</id>
    <published>2019-10-14T17:55:04.000Z</published>
    <updated>2020-01-15T03:47:37.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="30-Whack-A-Mole"><a href="#30-Whack-A-Mole" class="headerlink" title="30 - Whack A Mole"></a>30 - Whack A Mole</h2><p>俗話說的好，一天一蘋果，醫生遠離我</p><p>一天一 JS，What the f*ck JavaScript？</p><p>small steps every day - 記錄著新手村日記</p><h1 id="完成目標"><a href="#完成目標" class="headerlink" title="完成目標"></a>完成目標</h1><p>做一個打地鼠的遊戲</p><ul><li>功能<ul><li>一個關卡要幾分鐘要固定</li><li>地鼠冒出來、自動縮下去的時間間隔要不一樣</li></ul></li><li>畫面<ul><li>畫面要顯示目前的關卡</li><li>地鼠要自動冒出來、縮下去</li><li>地鼠被點到要縮下去、數量要增加</li></ul></li></ul><h2 id="index-START-html"><a href="#index-START-html" class="headerlink" title="index_START.html"></a>index_START.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Whack A Mole!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Amatic+SC:400,700'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Whack-a-mole! <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"startGame()"</span>&gt;</span>Start!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"game"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hole hole6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mole"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> holes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.hole'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> scoreBoard = <span class="built_in">document</span>.querySelector(<span class="string">'.score'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> moles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.mole'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffc600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Amatic SC'</span>, cursive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.score</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.2);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.game</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hole</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hole</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(dirt.svg) bottom center no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mole</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'mole.svg'</span>) bottom center no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hole</span><span class="selector-class">.up</span> <span class="selector-class">.mole</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS-step-by-step"><a href="#JS-step-by-step" class="headerlink" title="JS - step by step"></a>JS - step by step</h2><p>首先，我們先將需要的元素選取起來，必須先找到地鼠洞的List、地鼠圖的List、 <code>span</code> 的數量 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> holes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.hole'</span>);</span><br><span class="line">  <span class="keyword">const</span> scoreBoard = <span class="built_in">document</span>.querySelector(<span class="string">'.score'</span>);</span><br><span class="line">  <span class="keyword">const</span> moles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.mole'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(holes)</span><br><span class="line">  <span class="built_in">console</span>.log(scoreBoard)</span><br><span class="line">  <span class="built_in">console</span>.log(moles)</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>先來製作一個函式，讓這個函式執行後有一個上下限的隨機時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> holes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.hole'</span>);</span><br><span class="line">  <span class="keyword">const</span> scoreBoard = <span class="built_in">document</span>.querySelector(<span class="string">'.score'</span>);</span><br><span class="line">  <span class="keyword">const</span> moles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.mole'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomTime</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">    <span class="keyword">return</span> time</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>接下來，我們來取得隨機一個 <code>hole</code> 元素，如果與上一次取到的相同，我們就再次執行一次隨機選取的函式，不同的話就把現在的Hole指定給變數 <code>lastHole</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> holes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.hole'</span>);</span><br><span class="line">  <span class="keyword">const</span> scoreBoard = <span class="built_in">document</span>.querySelector(<span class="string">'.score'</span>);</span><br><span class="line">  <span class="keyword">const</span> moles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.mole'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomTime</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">    <span class="keyword">return</span> time</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lastHole;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomHole</span>(<span class="params">holes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * holes.length);</span><br><span class="line">    <span class="keyword">const</span> hole = holes[idx];</span><br><span class="line">    <span class="keyword">if</span> (hole === lastHole) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Ah nah thats the same one bud'</span>);</span><br><span class="line">      <span class="keyword">return</span> randomHole(holes);</span><br><span class="line">    &#125;</span><br><span class="line">    lastHole = hole;</span><br><span class="line">    <span class="keyword">return</span> hole;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>時間都處理完畢後，我們要來來地鼠可以從地鼠洞跑出來，在前面的CSS當中可以知道，地鼠的一開始是被做了相對定位並 <code>top:100%</code> 及 <code>overflow:hidden</code> 起來了！因此剛開始的時候地鼠其實是偷偷躲在底下的w</p><p>現在只要判斷什麼時候加上一個 Class 讓地鼠從地鼠洞出來以及多久會從地鼠洞出來一次，要新增&amp;移除 Class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="comment">//上略</span></span><br><span class="line">  <span class="keyword">let</span> timeUp = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">peep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = randomTime(<span class="number">200</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">const</span> hole = randomHole(holes);</span><br><span class="line">    hole.classList.add(<span class="string">'up'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      hole.classList.remove(<span class="string">'up'</span>);</span><br><span class="line">      <span class="keyword">if</span> (!timeUp) peep();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>最後，再加上遊戲開始及點到一個就增加分數吧！這部分比較單純只要將 <code>score</code> 宣告變數出來，以及點到分數++就可以，然後趕緊來打地鼠吧w</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="comment">//上略  </span></span><br><span class="line">  moles.forEach(<span class="function"><span class="params">mole</span> =&gt;</span> mole.addEventListener(<span class="string">'click'</span>, bonk));</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bonk</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!e.isTrusted) <span class="keyword">return</span>; <span class="comment">// cheater!</span></span><br><span class="line">    score++;</span><br><span class="line">    <span class="keyword">this</span>.parentNode.classList.remove(<span class="string">'up'</span>);</span><br><span class="line">    scoreBoard.textContent = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">startGame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    scoreBoard.textContent = <span class="number">0</span>;</span><br><span class="line">    timeUp = <span class="literal">false</span>;</span><br><span class="line">    score = <span class="number">0</span>;</span><br><span class="line">    peep();</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> timeUp = <span class="literal">true</span>, <span class="number">10000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>就大功告成啦！</p><h2 id="JS-final"><a href="#JS-final" class="headerlink" title="JS - final"></a>JS - final</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> holes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.hole'</span>);</span><br><span class="line">  <span class="keyword">const</span> scoreBoard = <span class="built_in">document</span>.querySelector(<span class="string">'.score'</span>);</span><br><span class="line">  <span class="keyword">const</span> moles = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.mole'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomTime</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">    <span class="keyword">return</span> time</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lastHole;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomHole</span>(<span class="params">holes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * holes.length);</span><br><span class="line">    <span class="keyword">const</span> hole = holes[idx];</span><br><span class="line">    <span class="keyword">if</span> (hole === lastHole) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Ah nah thats the same one bud'</span>);</span><br><span class="line">      <span class="keyword">return</span> randomHole(holes);</span><br><span class="line">    &#125;</span><br><span class="line">    lastHole = hole;</span><br><span class="line">    <span class="keyword">return</span> hole;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">peep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = randomTime(<span class="number">200</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">const</span> hole = randomHole(holes);</span><br><span class="line">    hole.classList.add(<span class="string">'up'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      hole.classList.remove(<span class="string">'up'</span>);</span><br><span class="line">      <span class="keyword">if</span> (!timeUp) peep();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  moles.forEach(<span class="function"><span class="params">mole</span> =&gt;</span> mole.addEventListener(<span class="string">'click'</span>, bonk));</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bonk</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!e.isTrusted) <span class="keyword">return</span>; <span class="comment">// cheater!</span></span><br><span class="line">    score++;</span><br><span class="line">    <span class="keyword">this</span>.parentNode.classList.remove(<span class="string">'up'</span>);</span><br><span class="line">    scoreBoard.textContent = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">startGame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    scoreBoard.textContent = <span class="number">0</span>;</span><br><span class="line">    timeUp = <span class="literal">false</span>;</span><br><span class="line">    score = <span class="number">0</span>;</span><br><span class="line">    peep();</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> timeUp = <span class="literal">true</span>, <span class="number">10000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>本刊同步於個人網站：<a href="http://chestertang.site/">http://chestertang.site/</a></p><p>本次範例程式碼原作者來源：<a href="https://tinyurl.com/yavm5f5n" target="_blank" rel="noopener">https://tinyurl.com/yavm5f5n</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;30-Whack-A-Mole&quot;&gt;&lt;a href=&quot;#30-Whack-A-Mole&quot; class=&quot;headerlink&quot; title=&quot;30 - Whack A Mole&quot;&gt;&lt;/a&gt;30 - Whack A Mole&lt;/h2&gt;&lt;p&gt;俗話說的好，一天一蘋果，醫生遠離我&lt;/p&gt;
&lt;p&gt;一天一 JS，What the f*ck JavaScript？&lt;/p&gt;
&lt;p&gt;small steps every day - 記錄著新手村日記&lt;/p&gt;
&lt;h1 id=&quot;完成目標&quot;&gt;&lt;a href=&quot;#完成目標&quot; class=&quot;headerlink&quot; title=&quot;完成目標&quot;&gt;&lt;/a&gt;完成目標&lt;/h1&gt;&lt;p&gt;做一個打地鼠的遊戲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能&lt;ul&gt;
&lt;li&gt;一個關卡要幾分鐘要固定&lt;/li&gt;
&lt;li&gt;地鼠冒出來、自動縮下去的時間間隔要不一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;畫面&lt;ul&gt;
&lt;li&gt;畫面要顯示目前的關卡&lt;/li&gt;
&lt;li&gt;地鼠要自動冒出來、縮下去&lt;/li&gt;
&lt;li&gt;地鼠被點到要縮下去、數量要增加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;index-START-html&quot;&gt;&lt;a href=&quot;#index-START-html&quot; class=&quot;headerlink&quot; title=&quot;index_START.html&quot;&gt;&lt;/a&gt;index_START.html&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Whack A Mole!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;https://fonts.googleapis.com/css?family=Amatic+SC:400,700&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;stylesheet&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text/css&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Whack-a-mole! &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;score&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;startGame()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Start!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;game&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole5&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hole hole6&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mole&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; holes = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;.hole&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; scoreBoard = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.score&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; moles = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;.mole&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;style-css&quot;&gt;&lt;a href=&quot;#style-css&quot; class=&quot;headerlink&quot; title=&quot;style.css&quot;&gt;&lt;/a&gt;style.css&lt;/h2&gt;
    
    </summary>
    
    
      <category term="11th鐵人賽" scheme="http://chestertang.site/categories/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="http://chestertang.site/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="前端新手村" scheme="http://chestertang.site/tags/%E5%89%8D%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
      <category term="html" scheme="http://chestertang.site/tags/html/"/>
    
      <category term="css" scheme="http://chestertang.site/tags/css/"/>
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>新手村29 - Countdown Timer</title>
    <link href="http://chestertang.site/2019/10/14/javascript29/"/>
    <id>http://chestertang.site/2019/10/14/javascript29/</id>
    <published>2019-10-14T00:38:04.000Z</published>
    <updated>2020-01-15T03:47:34.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="29-Countdown-Timer"><a href="#29-Countdown-Timer" class="headerlink" title="29 - Countdown Timer"></a>29 - Countdown Timer</h2><p>俗話說的好，一天一蘋果，醫生遠離我</p><p>一天一 JS，What the f*ck JavaScript？</p><p>small steps every day - 記錄著新手村日記</p><h1 id="完成目標"><a href="#完成目標" class="headerlink" title="完成目標"></a>完成目標</h1><p>做一個倒數計時器</p><ul><li>功能<ul><li>各種設定好的時間可以進行倒數</li><li>可以客製化時間倒數</li></ul></li><li>畫面<ul><li>顯示目前倒數的數字</li><li>顯示倒數結束時是幾點幾分</li></ul></li></ul><h2 id="index-START-html"><a href="#index-START-html" class="headerlink" title="index_START.html"></a>index_START.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Countdown Timer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Inconsolata'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timer__controls"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-time</span>=<span class="string">"20"</span> <span class="attr">class</span>=<span class="string">"timer__button"</span>&gt;</span>20 Secs<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-time</span>=<span class="string">"300"</span> <span class="attr">class</span>=<span class="string">"timer__button"</span>&gt;</span>Work 5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-time</span>=<span class="string">"900"</span> <span class="attr">class</span>=<span class="string">"timer__button"</span>&gt;</span>Quick 15<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-time</span>=<span class="string">"1200"</span> <span class="attr">class</span>=<span class="string">"timer__button"</span>&gt;</span>Snack 20<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-time</span>=<span class="string">"3600"</span> <span class="attr">class</span>=<span class="string">"timer__button"</span>&gt;</span>Lunch Break<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"customForm"</span> <span class="attr">id</span>=<span class="string">"custom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"minutes"</span> <span class="attr">placeholder</span>=<span class="string">"Enter Minutes"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"display__time-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"display__end-time"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts-START.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Style-css"><a href="#Style-css" class="headerlink" title="Style.css"></a>Style.css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#8E24AA</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(45deg,  #42a5f5 0%,#478ed1 50%,#0d47a1 100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Inconsolata'</span>, monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.display__time-left</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.05);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__controls</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__controls</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__controls</span> <span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__controls</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.1);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(0,0,0,0.2);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,0.2);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Inconsolata'</span>, monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timer__button</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.timer__button</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.2);</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.display</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.display__end-time</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scripts-START-js"><a href="#scripts-START-js" class="headerlink" title="scripts-START.js"></a>scripts-START.js</h2><p>空</p><h2 id="JS-step-by-step"><a href="#JS-step-by-step" class="headerlink" title="JS - step by step"></a>JS - step by step</h2><p>首先，我們先將需要的元素選取起來，必須先找到點擊的按鈕、點擊按鈕後會觸發的 <code>h1</code>、 <code>p</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> countdown;</span><br><span class="line"><span class="keyword">const</span> timerDisplay = <span class="built_in">document</span>.querySelector(<span class="string">'.display__time-left'</span>);</span><br><span class="line"><span class="keyword">const</span> endTime = <span class="built_in">document</span>.querySelector(<span class="string">'.display__end-time'</span>);</span><br><span class="line"><span class="keyword">const</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[data-time]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timerDisplay);</span><br><span class="line"><span class="comment">//&lt;h1 class="display__time-left"&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(endTime);</span><br><span class="line">  <span class="comment">//&lt;p class="display__end-time"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buttons);</span><br><span class="line"><span class="comment">//NodeList(5) [button.timer__button, button.timer__button, button.timer__button, button.timer__button, button.timer__button]</span></span><br></pre></td></tr></table></figure><p>接下來，當我們觸發點擊按鈕時，我們應該先要取得現在的時間、取得倒數的時間長度、執行倒數計時、顯示剩餘的時間於 h1，顯示結束時間於 p，變數 <code>seconds</code> 為取得 data-attibute 中所代表的倒數計時時間並轉為數字；其中在呼叫方法 <code>timer</code> 之前，我們必須先執行一次 <code>clearInterval()</code> 將先前的 <code>setInterval()</code> 方法先清除掉（後續避免會有BUG），變數 <code>now</code> 為取得目前的時間，變數 <code>then</code> 為將取得的時間轉換為秒數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> seconds = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.dataset.time);</span><br><span class="line">  timer(seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  clearInterval(countdown);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">const</span> then = now + seconds * <span class="number">1000</span>;</span><br><span class="line">  displayTimeLeft(seconds);</span><br><span class="line">  displayEndTime(then);</span><br><span class="line"></span><br><span class="line">  countdown = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> secondsLeft = <span class="built_in">Math</span>.round((then - <span class="built_in">Date</span>.now()) / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(secondsLeft &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      clearInterval(countdown);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    displayTimeLeft(secondsLeft);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來來完成 Function 中的 <code>displayTimeLeft</code> 與 <code>displayEndTime</code> ，一個為計算倒數計時的大標題 <code>h1</code> ，另一個為計算結束時間為何，讓使用者可以知道倒數終止的時間為幾點幾分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTimeLeft</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> minutes = <span class="built_in">Math</span>.floor(seconds / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">const</span> remainderSeconds = seconds % <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">const</span> display = <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;remainderSeconds &lt; <span class="number">10</span> ? <span class="string">'0'</span> : <span class="string">''</span> &#125;</span><span class="subst">$&#123;remainderSeconds&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">document</span>.title = display;</span><br><span class="line">  timerDisplay.textContent = display;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayEndTime</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp);</span><br><span class="line">  <span class="keyword">const</span> hour = end.getHours();</span><br><span class="line">  <span class="keyword">const</span> adjustedHour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">  <span class="keyword">const</span> minutes = end.getMinutes();</span><br><span class="line">  endTime.textContent = <span class="string">`Be Back At <span class="subst">$&#123;adjustedHour&#125;</span>:<span class="subst">$&#123;minutes &lt; <span class="number">10</span> ? <span class="string">'0'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;minutes&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後，再加上讓使用者可以自己輸入時間的 <code>submit</code> 按鈕，可以客製化自己想要多少的時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.customForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> mins = <span class="keyword">this</span>.minutes.value;</span><br><span class="line">  <span class="built_in">console</span>.log(mins);</span><br><span class="line">  timer(mins * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">this</span>.reset();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>就大功告成啦！</p><h2 id="JS-final"><a href="#JS-final" class="headerlink" title="JS - final"></a>JS - final</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> countdown;</span><br><span class="line"><span class="keyword">const</span> timerDisplay = <span class="built_in">document</span>.querySelector(<span class="string">'.display__time-left'</span>);</span><br><span class="line"><span class="keyword">const</span> endTime = <span class="built_in">document</span>.querySelector(<span class="string">'.display__end-time'</span>);</span><br><span class="line"><span class="keyword">const</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[data-time]'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timerDisplay);</span><br><span class="line"><span class="comment">//&lt;h1 class="display__time-left"&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(endTime);</span><br><span class="line"><span class="comment">//&lt;p class="display__end-time"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buttons);</span><br><span class="line"><span class="comment">//NodeList(5) [button.timer__button, button.timer__button, button.timer__button, button.timer__button, button.timer__button]</span></span><br><span class="line"></span><br><span class="line">buttons.forEach(<span class="function"><span class="params">button</span> =&gt;</span> button.addEventListener(<span class="string">'click'</span>, startTimer));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> seconds = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.dataset.time);</span><br><span class="line">  timer(seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// clear any existing timers</span></span><br><span class="line">  clearInterval(countdown);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">const</span> then = now + seconds * <span class="number">1000</span>;</span><br><span class="line">  displayTimeLeft(seconds);</span><br><span class="line">  displayEndTime(then);</span><br><span class="line"></span><br><span class="line">  countdown = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> secondsLeft = <span class="built_in">Math</span>.round((then - <span class="built_in">Date</span>.now()) / <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// check if we should stop it!</span></span><br><span class="line">    <span class="keyword">if</span>(secondsLeft &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      clearInterval(countdown);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// display it</span></span><br><span class="line">    displayTimeLeft(secondsLeft);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTimeLeft</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> minutes = <span class="built_in">Math</span>.floor(seconds / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">const</span> remainderSeconds = seconds % <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">const</span> display = <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;remainderSeconds &lt; <span class="number">10</span> ? <span class="string">'0'</span> : <span class="string">''</span> &#125;</span><span class="subst">$&#123;remainderSeconds&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">document</span>.title = display;</span><br><span class="line">  timerDisplay.textContent = display;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayEndTime</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp);</span><br><span class="line">  <span class="keyword">const</span> hour = end.getHours();</span><br><span class="line">  <span class="keyword">const</span> adjustedHour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">  <span class="keyword">const</span> minutes = end.getMinutes();</span><br><span class="line">  endTime.textContent = <span class="string">`Be Back At <span class="subst">$&#123;adjustedHour&#125;</span>:<span class="subst">$&#123;minutes &lt; <span class="number">10</span> ? <span class="string">'0'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;minutes&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本刊同步於個人網站：<a href="http://chestertang.site/">http://chestertang.site/</a></p><p>本次範例程式碼原作者來源：<a href="https://tinyurl.com/yavm5f5n" target="_blank" rel="noopener">https://tinyurl.com/yavm5f5n</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;29-Countdown-Timer&quot;&gt;&lt;a href=&quot;#29-Countdown-Timer&quot; class=&quot;headerlink&quot; title=&quot;29 - Countdown Timer&quot;&gt;&lt;/a&gt;29 - Countdown Timer&lt;/h2&gt;&lt;p&gt;俗話說的好，一天一蘋果，醫生遠離我&lt;/p&gt;
&lt;p&gt;一天一 JS，What the f*ck JavaScript？&lt;/p&gt;
&lt;p&gt;small steps every day - 記錄著新手村日記&lt;/p&gt;
&lt;h1 id=&quot;完成目標&quot;&gt;&lt;a href=&quot;#完成目標&quot; class=&quot;headerlink&quot; title=&quot;完成目標&quot;&gt;&lt;/a&gt;完成目標&lt;/h1&gt;&lt;p&gt;做一個倒數計時器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能&lt;ul&gt;
&lt;li&gt;各種設定好的時間可以進行倒數&lt;/li&gt;
&lt;li&gt;可以客製化時間倒數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;畫面&lt;ul&gt;
&lt;li&gt;顯示目前倒數的數字&lt;/li&gt;
&lt;li&gt;顯示倒數結束時是幾點幾分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;index-START-html&quot;&gt;&lt;a href=&quot;#index-START-html&quot; class=&quot;headerlink&quot; title=&quot;index_START.html&quot;&gt;&lt;/a&gt;index_START.html&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Countdown Timer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;https://fonts.googleapis.com/css?family=Inconsolata&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;stylesheet&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text/css&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;style.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__controls&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-time&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;20 Secs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-time&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Work 5&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-time&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;900&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Quick 15&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-time&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1200&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Snack 20&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-time&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3600&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;timer__button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lunch Break&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;customForm&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;custom&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;minutes&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Enter Minutes&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;display&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;display__time-left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;display__end-time&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scripts-START.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Style-css&quot;&gt;&lt;a href=&quot;#Style-css&quot; class=&quot;headerlink&quot; title=&quot;Style.css&quot;&gt;&lt;/a&gt;Style.css&lt;/h2&gt;
    
    </summary>
    
    
      <category term="11th鐵人賽" scheme="http://chestertang.site/categories/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="http://chestertang.site/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="前端新手村" scheme="http://chestertang.site/tags/%E5%89%8D%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
      <category term="html" scheme="http://chestertang.site/tags/html/"/>
    
      <category term="css" scheme="http://chestertang.site/tags/css/"/>
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
</feed>
