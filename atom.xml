<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>查斯特部落格 | The Blog Of Chester Tang</title>
  
  <subtitle>查斯特 Chester Tang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chestertang.site/"/>
  <updated>2020-07-27T14:45:42.296Z</updated>
  <id>http://chestertang.site/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>J 筆記 - Spread with Array</title>
    <link href="http://chestertang.site/2020/07/20/zyx0720/"/>
    <id>http://chestertang.site/2020/07/20/zyx0720/</id>
    <published>2020-07-20T04:00:00.000Z</published>
    <updated>2020-07-27T14:45:42.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Use-Case-of-Spread-with-Array"><a href="#5-Use-Case-of-Spread-with-Array" class="headerlink" title="5 Use Case of Spread with Array"></a>5 Use Case of Spread with Array</h1><p>這篇將介紹，常用的 <code>Spread</code> 在陣列中的五種情況，可以拿來複製、合併或者是作轉換為陣列。首先，當然要先來了解 ES6 的 <code>...</code> Spread 代表是什麼？還有它的特性。</p><h2 id="Understanding-Spread"><a href="#Understanding-Spread" class="headerlink" title="Understanding Spread"></a>Understanding Spread</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum.apply(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure><blockquote><p>MDN: Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><h2 id="Spread-Destructuring-assignment"><a href="#Spread-Destructuring-assignment" class="headerlink" title="Spread = Destructuring assignment?"></a>Spread = Destructuring assignment?</h2><p>什麼意思呢？其實，除了解構賦值之外，舉個例子像是， Spread 會把現在 Array 拿掉，然後再把裡面包住的東西放到另一個 Array 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  ...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// ... &gt; []</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  拿掉包住 [1, 2, 3] 的 Array */</span></span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Array-Manipulation"><a href="#Array-Manipulation" class="headerlink" title="Array Manipulation"></a>Array Manipulation</h2><ol><li>Use Spread for Merging Array</li></ol><p>如果有兩個陣列需要把他合成一個，或許之前會是這樣子做，但會有一點瑕疵…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = [array1, array2];</span><br><span class="line"><span class="comment">// [ [1, 2, 3], [4, 5, 6] ]</span></span><br></pre></td></tr></table></figure><p>用 <code>Spread</code> 來做的話</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spread_merge = [</span><br><span class="line">  ...array1,</span><br><span class="line">  ...array2</span><br><span class="line">];</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Clone Array</li></ol><p>這部分在之前的系列筆記中其實已經大致上都有說到過，如果還沒有看過的可以去看一下 <a href="https://chestertang.site/2020/04/18/zyx0418/">Clone an Array</a>。另外，還有這一篇就在更複雜一些 <a href="https://chestertang.site/2020/04/29/zyx0429/">Deep Clone Array</a></p><p>其中的觀念在，會不會影響到原本被複製的陣列，什麼時候是 Pass by reference、什麼時候是 Pass by value 而什麼情況下又會出現 JS 獨有的 Pass by sharing 呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'zero'</span>, <span class="string">'one'</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = original;</span><br><span class="line"></span><br><span class="line">original; <span class="comment">// ['zero', 'one']</span></span><br><span class="line">newArray; <span class="comment">// ['zero', 'one']</span></span><br></pre></td></tr></table></figure><p>看起來沒什麼問題，但如果只要改新陣列裡面的元素時，原本的陣列也會被更動了…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newArray[<span class="number">1</span>] = <span class="string">'💩'</span>;</span><br><span class="line"></span><br><span class="line">newArray;</span><br><span class="line"><span class="comment">// ['zero', '💩']</span></span><br><span class="line"></span><br><span class="line">original;</span><br><span class="line"><span class="comment">// ['zero', '💩']...</span></span><br></pre></td></tr></table></figure><h3 id="Cloning-Array-the-Right-Way"><a href="#Cloning-Array-the-Right-Way" class="headerlink" title="Cloning Array the Right Way"></a>Cloning Array the Right Way</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'zero'</span>, <span class="string">'one'</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [...original];</span><br><span class="line"></span><br><span class="line">newArray[<span class="number">1</span>] = <span class="string">'💩'</span>;</span><br><span class="line"></span><br><span class="line">newArray;</span><br><span class="line"><span class="comment">// ['zero', '💩']</span></span><br><span class="line">original;</span><br><span class="line"><span class="comment">// ['zero', 'one']</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Iterables to Array</li></ol><p>字串的部分就很好理解，也沒有什麼其他多變的情況…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">'hi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...string];</span><br><span class="line"></span><br><span class="line">array;</span><br><span class="line"><span class="comment">// [ 'h' , 'i' ]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Set to Array</li></ol><p>The Set object lets you store unique values of any type, whether primitive values or object references.</p><blockquote><p>Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set’s collection.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">// Set(3) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...set];</span><br><span class="line"></span><br><span class="line">array;</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Node List to Array</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"></span><br><span class="line">nodeList;</span><br><span class="line"><span class="comment">// [p, p, p]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...nodeList];</span><br><span class="line"></span><br><span class="line">array;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">MDN: Spread syntax (…)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN: Set</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;5-Use-Case-of-Spread-with-Array&quot;&gt;&lt;a href=&quot;#5-Use-Case-of-Spread-with-Array&quot; class=&quot;headerlink&quot; title=&quot;5 Use Case of Spread with Array&quot;&gt;&lt;/a&gt;5 Use Case of Spread with Array&lt;/h1&gt;&lt;p&gt;這篇將介紹，常用的 &lt;code&gt;Spread&lt;/code&gt; 在陣列中的五種情況，可以拿來複製、合併或者是作轉換為陣列。首先，當然要先來了解 ES6 的 &lt;code&gt;...&lt;/code&gt; Spread 代表是什麼？還有它的特性。&lt;/p&gt;
&lt;h2 id=&quot;Understanding-Spread&quot;&gt;&lt;a href=&quot;#Understanding-Spread&quot; class=&quot;headerlink&quot; title=&quot;Understanding Spread&quot;&gt;&lt;/a&gt;Understanding Spread&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y, z&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum(...numbers));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, numbers));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;MDN: Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Spread-Destructuring-assignment&quot;&gt;&lt;a href=&quot;#Spread-Destructuring-assignment&quot; class=&quot;headerlink&quot; title=&quot;Spread = Destructuring assignment?&quot;&gt;&lt;/a&gt;Spread = Destructuring assignment?&lt;/h2&gt;&lt;p&gt;什麼意思呢？其實，除了解構賦值之外，舉個例子像是， Spread 會把現在 Array 拿掉，然後再把裡面包住的東西放到另一個 Array 中。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// ... &amp;gt; []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*  拿掉包住 [1, 2, 3] 的 Array */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Array-Manipulation&quot;&gt;&lt;a href=&quot;#Array-Manipulation&quot; class=&quot;headerlink&quot; title=&quot;Array Manipulation&quot;&gt;&lt;/a&gt;Array Manipulation&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Use Spread for Merging Array&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Async/Await in Array</title>
    <link href="http://chestertang.site/2020/05/22/zyx0522/"/>
    <id>http://chestertang.site/2020/05/22/zyx0522/</id>
    <published>2020-05-22T04:00:00.000Z</published>
    <updated>2020-06-09T09:45:01.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-Await-in-Array-Loops"><a href="#Async-Await-in-Array-Loops" class="headerlink" title="Async/Await in Array Loops"></a>Async/Await in Array Loops</h1><p>隨著 <code>ES6</code> 的 <code>Promise</code> 解決 callbacks hell 的問題後，取得代之的就是 <code>Es7</code> 的 <code>Async/Await</code>，都是為了達成 AJAX 獲得更好的體驗。這篇簡單紀錄一下使用 <code>Async/Await</code> 在迴圈裡面遇到的問題，以及該如何解決，以下就以三個例子來舉例：</p><h2 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h2><p>如果是 <code>ForEach</code> 搭配 <code>Async/Await</code> 的時候，會發生什麼事情呢？我們直接來深入了解吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> urls.forEach(<span class="keyword">async</span> (url, idx) =&gt; &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url));</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><p>雖然程式碼都沒有任何錯誤，也不會噴錯跑不成功，但是相信眼尖的你一定會注意 <code>Finished!</code> 居然在 <code>await urls.forEach</code> 之前就執行了！不是說好的 <code>async</code> 要 <code>await</code> 嗎？誰跟你說好～如以下的結果所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"></span><br><span class="line">Finished!</span><br><span class="line">Received Todo <span class="number">1</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/1"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">3</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/3"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">2</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/2"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br></pre></td></tr></table></figure><p>那不能用 <code>ForEach</code> 我們該如何解決呢？來看看底下的兩種方式吧！</p><h2 id="Map-Promise-all"><a href="#Map-Promise-all" class="headerlink" title="Map + Promise.all"></a>Map + Promise.all</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></h3><blockquote><p>Promise.all() 方法回傳一個 Promise 物件，當引數 iterable 中所有的 promises 都被實現（resolved），或引數 iterable 不含任何 promise 時，被實現。或以第一個被拒絕的 promise 的原因被拒絕。</p></blockquote><ul><li>一個已被實現（already resolved）的 <code>Promise</code>，若傳入的 iterable 為空。</li><li>一個非同步地被實現（asynchronously resolved）的 Promise 若傳入的 iterable 不含 promise。注意，Google Chrome 58 對此情形回傳一個已被解決的 promise。</li><li>一個擱置（pending）的 Promise，對所有剩餘情形。此 promise 接著被非同步地被 resolved/rejected（只要堆疊為空）當 iterable 中所有的 promises 都被實現，或其中一個被拒絕。參見下方關於”Promise.all 的非同步與同步性質”的例子。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promises = urls.map(<span class="keyword">async</span> (url, idx) =&gt; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><h2 id="For…of"><a href="#For…of" class="headerlink" title="For…of"></a>For…of</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [idx, url] <span class="keyword">of</span> urls.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><p>上面兩種方法都可以得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Received Todo <span class="number">1</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/1"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">2</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/2"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">3</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/3"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Finished!</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">await</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">Array.prototype.forEach()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Async-Await-in-Array-Loops&quot;&gt;&lt;a href=&quot;#Async-Await-in-Array-Loops&quot; class=&quot;headerlink&quot; title=&quot;Async/Await in Array Loops&quot;&gt;&lt;/a&gt;Async/Await in Array Loops&lt;/h1&gt;&lt;p&gt;隨著 &lt;code&gt;ES6&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 解決 callbacks hell 的問題後，取得代之的就是 &lt;code&gt;Es7&lt;/code&gt; 的 &lt;code&gt;Async/Await&lt;/code&gt;，都是為了達成 AJAX 獲得更好的體驗。這篇簡單紀錄一下使用 &lt;code&gt;Async/Await&lt;/code&gt; 在迴圈裡面遇到的問題，以及該如何解決，以下就以三個例子來舉例：&lt;/p&gt;
&lt;h2 id=&quot;ForEach&quot;&gt;&lt;a href=&quot;#ForEach&quot; class=&quot;headerlink&quot; title=&quot;ForEach&quot;&gt;&lt;/a&gt;ForEach&lt;/h2&gt;&lt;p&gt;如果是 &lt;code&gt;ForEach&lt;/code&gt; 搭配 &lt;code&gt;Async/Await&lt;/code&gt; 的時候，會發生什麼事情呢？我們直接來深入了解吧！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; urls = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTodos&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; urls.forEach(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (url, idx) =&amp;gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Received Todo &lt;span class=&quot;subst&quot;&gt;$&amp;#123;idx+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;:`&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; fetch(url));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Finished!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getTodos();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;雖然程式碼都沒有任何錯誤，也不會噴錯跑不成功，但是相信眼尖的你一定會注意 &lt;code&gt;Finished!&lt;/code&gt; 居然在 &lt;code&gt;await urls.forEach&lt;/code&gt; 之前就執行了！不是說好的 &lt;code&gt;async&lt;/code&gt; 要 &lt;code&gt;await&lt;/code&gt; 嗎？誰跟你說好～如以下的結果所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Promise &amp;#123;&amp;lt;resolved&amp;gt;: undefined&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/1&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/3&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/2&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那不能用 &lt;code&gt;ForEach&lt;/code&gt; 我們該如何解決呢？來看看底下的兩種方式吧！&lt;/p&gt;
&lt;h2 id=&quot;Map-Promise-all&quot;&gt;&lt;a href=&quot;#Map-Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Map + Promise.all&quot;&gt;&lt;/a&gt;Map + Promise.all&lt;/h2&gt;&lt;h3 id=&quot;Promise-all&quot;&gt;&lt;a href=&quot;#Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Promise.all()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Promise.all()&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Clone an Object</title>
    <link href="http://chestertang.site/2020/05/05/zyx0505/"/>
    <id>http://chestertang.site/2020/05/05/zyx0505/</id>
    <published>2020-05-05T03:00:00.000Z</published>
    <updated>2020-06-29T14:33:14.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Clone-an-Object"><a href="#J-筆記-Clone-an-Object" class="headerlink" title="J 筆記 - Clone an Object"></a>J 筆記 - Clone an Object</h1><p>雖然在 JavaScript 裡的物件型別是屬於 Passing by sharing，但正常來說如果沒有傳遞到另一物件的話，正常為 Passing by Address，因此沒有辦法直接用等號 <code>=</code> 來更改值、而會改到址。</p><h2 id="3-Ways-to-Clone-Objects"><a href="#3-Ways-to-Clone-Objects" class="headerlink" title="3 Ways to Clone Objects"></a>3 Ways to Clone Objects</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "Spread"</span></span><br><span class="line">&#123; ...Array &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "Object.assign"</span></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">Array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "JSON"</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6'&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="Passing-by-Address"><a href="#Passing-by-Address" class="headerlink" title="Passing by Address"></a>Passing by Address</h2><p>還記得 <a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a> 吧？基本型別的更新與傳遞會以 <code>Passing by Value</code>，兩者是個是各自獨立的，而物件型別則是如同開頭所述，會更改到原本的實體，因為兩者根本是指向同一個實體的！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coin1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> coin2 = coin1;</span><br><span class="line"></span><br><span class="line">coin1.value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( coin1.value );</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log( coin2.value );</span><br><span class="line"><span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h2 id="Passing-by-sharing"><a href="#Passing-by-sharing" class="headerlink" title="Passing by sharing"></a>Passing by sharing</h2><p>「Pass by sharing」的特點在於，當 function 的參數，如 <code>function changeValue(obj){ ... }</code> 中的 obj 被重新賦值的時候，外部變數的內容是不會被影響的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coin1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;; <span class="comment">// Assignment</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeValue(coin1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(coin1);   </span><br><span class="line"><span class="comment">// &#123; value: 10 &#125;</span></span><br></pre></td></tr></table></figure><p>說了這麼多也知道了原因之後，以下就來介紹三種複製物件的方法。注意的是，Array 的複製也有探討到 <code>深層</code>、<code>淺層</code> 的問題，如同 <a href="https://chestertang.site/2020/04/29/zyx0429/">Deep Clone Array</a> ㄧ樣，JSON 的方式是可以複製到 <code>深層</code> 的，而其他兩種沒有辦法！</p><ol><li>Using Spread</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SpreadCloneArray = &#123; ...Array &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(SpreadCloneArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Using Object.assign</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Object_AssignCloneArray = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">Array</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Object_AssignCloneArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Using JSON</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> JSONArray = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(JSONArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Lodash 在 deep clone 不只是適用於 Array 也同樣適用於 Object </p></blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()</a></li><li><a href="https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript" target="_blank" rel="noopener">What is the most efficient way to deep clone an object in JavaScript?</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Clone-an-Object&quot;&gt;&lt;a href=&quot;#J-筆記-Clone-an-Object&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Clone an Object&quot;&gt;&lt;/a&gt;J 筆記 - Clone an Object&lt;/h1&gt;&lt;p&gt;雖然在 JavaScript 裡的物件型別是屬於 Passing by sharing，但正常來說如果沒有傳遞到另一物件的話，正常為 Passing by Address，因此沒有辦法直接用等號 &lt;code&gt;=&lt;/code&gt; 來更改值、而會改到址。&lt;/p&gt;
&lt;h2 id=&quot;3-Ways-to-Clone-Objects&quot;&gt;&lt;a href=&quot;#3-Ways-to-Clone-Objects&quot; class=&quot;headerlink&quot; title=&quot;3 Ways to Clone Objects&quot;&gt;&lt;/a&gt;3 Ways to Clone Objects&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt; = &amp;#123; &lt;span class=&quot;attr&quot;&gt;old&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;new&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Spread&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; ...Array &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Object.assign&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;JSON&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; old: &#39;ES5&#39;, new: &#39;ES6&#39;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Passing-by-Address&quot;&gt;&lt;a href=&quot;#Passing-by-Address&quot; class=&quot;headerlink&quot; title=&quot;Passing by Address&quot;&gt;&lt;/a&gt;Passing by Address&lt;/h2&gt;&lt;p&gt;還記得 &lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10191057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？&lt;/a&gt; 吧？基本型別的更新與傳遞會以 &lt;code&gt;Passing by Value&lt;/code&gt;，兩者是個是各自獨立的，而物件型別則是如同開頭所述，會更改到原本的實體，因為兩者根本是指向同一個實體的！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin1 = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin2 = coin1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coin1.value = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( coin1.value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( coin2.value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Passing-by-sharing&quot;&gt;&lt;a href=&quot;#Passing-by-sharing&quot; class=&quot;headerlink&quot; title=&quot;Passing by sharing&quot;&gt;&lt;/a&gt;Passing by sharing&lt;/h2&gt;&lt;p&gt;「Pass by sharing」的特點在於，當 function 的參數，如 &lt;code&gt;function changeValue(obj){ ... }&lt;/code&gt; 中的 obj 被重新賦值的時候，外部變數的內容是不會被影響的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin1 = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt; &amp;#125;; &lt;span class=&quot;comment&quot;&gt;// Assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeValue(coin1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(coin1);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; value: 10 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Object to Array</title>
    <link href="http://chestertang.site/2020/05/04/zyx0504/"/>
    <id>http://chestertang.site/2020/05/04/zyx0504/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2020-05-04T09:47:18.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Object-to-Array"><a href="#J-筆記-Object-to-Array" class="headerlink" title="J 筆記 - Object to Array"></a>J 筆記 - Object to Array</h1><p>繼之前的 <a href="https://chestertang.site/2020/04/13/zyx0413/">String to Array</a> 後，我們已經會了許多種將字串轉成陣列的方法。這篇將介紹如何將 Object 轉成 Array …</p><h2 id="Ancient"><a href="#Ancient" class="headerlink" title="Ancient"></a>Ancient</h2><p>在 ES6 以前，我們想將 Object 變成 Array 常常會這樣來使用，但其實這種方法真的不太好用！而且跟 Ruby 超級不合適的，宣告一個空的陣列，然後塞東西進去，通常都可以有更好的方法可以取代掉這種寫法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ancientObjects = &#123;</span><br><span class="line">  obj1: <span class="string">'ancient1'</span>,</span><br><span class="line">  obj2: <span class="string">'ancient2'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptyArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> ancientObject <span class="keyword">in</span> ancientObjects) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ancientObjects.hasOwnProperty(ancientObject)) &#123;</span><br><span class="line">    emptyArray.push(ancientObjects);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emptyArray; </span><br><span class="line"><span class="comment">// [ 'ancient1', 'ancient2' ]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">Object.prototype.hasOwnProperty()</a></p></blockquote><h2 id="ES6-Object-keys"><a href="#ES6-Object-keys" class="headerlink" title="ES6 - Object.keys()"></a>ES6 - Object.keys()</h2><p>ES6後，有了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a> 這個新方法，不過很奇怪的居然只有提供 <code>key</code>，卻沒有 <code>value</code>，意外覺得特別的詭異…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ES6Objects = &#123;</span><br><span class="line">  ES6Obj1: <span class="string">'ES6-1'</span>,</span><br><span class="line">  ES6Obj2: <span class="string">'ES6-2'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(ES6Objects);</span><br><span class="line"><span class="comment">// [ 'ES6Obj1', 'ES6Obj2' ]</span></span><br></pre></td></tr></table></figure><h2 id="ES7-Object-values-Object-entries"><a href="#ES7-Object-values-Object-entries" class="headerlink" title="ES7 - Object.values() / Object.entries()"></a>ES7 - Object.values() / Object.entries()</h2><p>所以 ES7 就生出 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values" target="_blank" rel="noopener">Object.values()</a> 了，不只如此，還連 key + value 同時要印的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries()</a> 都有（這樣才合理阿！！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> ES7Objects = &#123;</span><br><span class="line">    ES7Obj1: <span class="string">'ES7-1'</span>,</span><br><span class="line">    ES7Obj2: <span class="string">'ES7-2'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.values(ES6Objects);</span><br><span class="line">  <span class="comment">// [ 'ES6-1', 'ES6-2' ]</span></span><br><span class="line">  <span class="built_in">Object</span>.entries(ES7Objects);</span><br><span class="line"><span class="comment">// [ ['ES7Obj1', 'ES7-1'], ['ES7Obj2', 'ES7-2'] ]</span></span><br></pre></td></tr></table></figure><h2 id="Object-entries-Destructuring"><a href="#Object-entries-Destructuring" class="headerlink" title="Object.entries + Destructuring"></a>Object.entries + Destructuring</h2><p>解構開來其實就只是長這樣子而已，應該淺顯易懂吧～</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ES7Objects = &#123;</span><br><span class="line">  ES7Obj1: <span class="string">'ES7-1'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectArray = <span class="built_in">Object</span>.entries(ES7Objects);</span><br><span class="line"></span><br><span class="line">objectArray.forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); </span><br><span class="line">  <span class="comment">// 'ES7Obj1'</span></span><br><span class="line">  <span class="built_in">console</span>.log(value); </span><br><span class="line">  <span class="comment">// 'ES7-1'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><p>而本質上與 <code>Object.entries</code> 相反，我們今天想要從 Array 再返回去 Object，就可以使用 <code>Object.fromEntries</code> 這個方法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ES7Array = [</span><br><span class="line">  [<span class="string">'ES7Obj1'</span>, <span class="string">'ES7-1'</span>],</span><br><span class="line">  [<span class="string">'ES7Obj2'</span>, <span class="string">'ES7-2'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.fromEntries(ES7Array);</span><br><span class="line"><span class="comment">// &#123; ES7Obj1: 'ES7-1', ES7Obj2: 'ES7-2' &#125;</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values" target="_blank" rel="noopener">Object.values()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries" target="_blank" rel="noopener">Object.fromEntries()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Object-to-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Object-to-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Object to Array&quot;&gt;&lt;/a&gt;J 筆記 - Object to Array&lt;/h1&gt;&lt;p&gt;繼之前的 &lt;a href=&quot;https://chestertang.site/2020/04/13/zyx0413/&quot;&gt;String to Array&lt;/a&gt; 後，我們已經會了許多種將字串轉成陣列的方法。這篇將介紹如何將 Object 轉成 Array …&lt;/p&gt;
&lt;h2 id=&quot;Ancient&quot;&gt;&lt;a href=&quot;#Ancient&quot; class=&quot;headerlink&quot; title=&quot;Ancient&quot;&gt;&lt;/a&gt;Ancient&lt;/h2&gt;&lt;p&gt;在 ES6 以前，我們想將 Object 變成 Array 常常會這樣來使用，但其實這種方法真的不太好用！而且跟 Ruby 超級不合適的，宣告一個空的陣列，然後塞東西進去，通常都可以有更好的方法可以取代掉這種寫法…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ancientObjects = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj1: &lt;span class=&quot;string&quot;&gt;&#39;ancient1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj2: &lt;span class=&quot;string&quot;&gt;&#39;ancient2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; emptyArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ancientObject &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ancientObjects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ancientObjects.hasOwnProperty(ancientObject)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emptyArray.push(ancientObjects);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emptyArray; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &#39;ancient1&#39;, &#39;ancient2&#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Object.prototype.hasOwnProperty()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ES6-Object-keys&quot;&gt;&lt;a href=&quot;#ES6-Object-keys&quot; class=&quot;headerlink&quot; title=&quot;ES6 - Object.keys()&quot;&gt;&lt;/a&gt;ES6 - Object.keys()&lt;/h2&gt;&lt;p&gt;ES6後，有了 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Object.keys()&lt;/a&gt; 這個新方法，不過很奇怪的居然只有提供 &lt;code&gt;key&lt;/code&gt;，卻沒有 &lt;code&gt;value&lt;/code&gt;，意外覺得特別的詭異…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ES6Objects = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ES6Obj1: &lt;span class=&quot;string&quot;&gt;&#39;ES6-1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ES6Obj2: &lt;span class=&quot;string&quot;&gt;&#39;ES6-2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(ES6Objects);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &#39;ES6Obj1&#39;, &#39;ES6Obj2&#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ES7-Object-values-Object-entries&quot;&gt;&lt;a href=&quot;#ES7-Object-values-Object-entries&quot; class=&quot;headerlink&quot; title=&quot;ES7 - Object.values() / Object.entries()&quot;&gt;&lt;/a&gt;ES7 - Object.values() / Object.entries()&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Append Item to Array</title>
    <link href="http://chestertang.site/2020/04/30/zyx0430/"/>
    <id>http://chestertang.site/2020/04/30/zyx0430/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-05-03T14:34:26.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Append-Item-to-Array"><a href="#J-筆記-Append-Item-to-Array" class="headerlink" title="J 筆記 - Append Item to Array"></a>J 筆記 - Append Item to Array</h1><p>在之前一系列有關 <a href="https://chestertang.site/categories/JavaScript/">Array</a> 的文章當中，有看到各種 clone Array 後，將新元素推進陣列會造成的結果，都直接以 <code>push</code> 來簡單舉例而已。</p><p>這篇將舉例 <code>易變的</code> (mutable)、<code>不易變的</code> (inmutable) 的五種方式，雖然實務上都會直接用 <code>inmutable</code> 的方法，但還是舉例 <code>mutable</code>，來增加自己印象，就算看到這樣的程式碼的時候，也會知道會造成的結果… </p><h2 id="易變的-mutable"><a href="#易變的-mutable" class="headerlink" title="易變的 (mutable)"></a><code>易變的</code> (mutable)</h2><p>透過 <code>push</code>、<code>splice</code>、<code>.length</code> 這三種方式的塞元素，會影響原始的陣列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>];</span><br><span class="line"></span><br><span class="line">array.push(<span class="string">'ES6'</span>);</span><br><span class="line">array.splice(array.length, <span class="number">0</span>, <span class="string">'ES6'</span>);</span><br><span class="line">array[array.length] = <span class="string">'ES6'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br></pre></td></tr></table></figure><h2 id="不易變的-inmutable"><a href="#不易變的-inmutable" class="headerlink" title="不易變的 (inmutable)"></a><code>不易變的</code> (inmutable)</h2><p>透過 <code>spread</code>、<code>concat</code> 兩種方式，會額外新增一個陣列，並且保持原本的陣列不受到更動。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'ES5'</span>];</span><br><span class="line"><span class="keyword">let</span> newArray;</span><br><span class="line"></span><br><span class="line">newArray = original.concat(<span class="string">'ES6'</span>);</span><br><span class="line">newArray = [...original, <span class="string">'ES6'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArray);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br><span class="line"><span class="built_in">console</span>.log(original);</span><br><span class="line"><span class="comment">// ['ES5']</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-Ways-to-Append-Item-to-Array-mutable"><a href="#3-Ways-to-Append-Item-to-Array-mutable" class="headerlink" title="3 Ways to Append Item to Array (mutable)"></a>3 Ways to Append Item to Array (mutable)</h2><p>接下來就來看一下將元素塞進陣列的 3 種變動的方式。</p><h3 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h3><p>將元素添加到數組陣列最後的最簡單方法是使用 <code>push</code></p><blockquote><p>The push() method adds one or more elements to the end of an array and returns the new length of the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> pushedArray = [<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line">array.push(<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">array.push(...pushedArray);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9'];</span></span><br></pre></td></tr></table></figure><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h3><blockquote><p>The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"></span><br><span class="line">array.splice(</span><br><span class="line">  array.length, <span class="comment">// 陣列的最後</span></span><br><span class="line">  <span class="number">0</span>,            <span class="comment">// 不更改原本陣列裡的元素 </span></span><br><span class="line">  <span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9'];</span></span><br></pre></td></tr></table></figure><h3 id="Array-length"><a href="#Array-length" class="headerlink" title="Array.length"></a>Array.length</h3><blockquote><p>The length property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> length = array.length; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">array[length] = <span class="string">'ES7'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(zoo); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7'];</span></span><br></pre></td></tr></table></figure><h2 id="2-Ways-to-Append-Item-to-Array-inmutable"><a href="#2-Ways-to-Append-Item-to-Array-inmutable" class="headerlink" title="2 Ways to Append Item to Array (inmutable)"></a>2 Ways to Append Item to Array (inmutable)</h2><p>2 種不變動將元素塞進陣列的方式。</p><h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h3><p>我們可以使用 <code>concat</code> 方法，透過接受值、陣列來添加多個元素。</p><blockquote><p>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> concatArray   = array.concat(<span class="string">'ES7'</span>);</span><br><span class="line"><span class="keyword">const</span> concatArray2  = array.concat(array2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(concatArray);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7']</span></span><br><span class="line"><span class="built_in">console</span>.log(concatArray2);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br></pre></td></tr></table></figure><h3 id="Spread-syntax"><a href="#Spread-syntax" class="headerlink" title="Spread syntax"></a>Spread syntax</h3><p>我們可以使用 <code>Spread</code> 方法，將每個陣列元素變成為單個元素，這類似於的效果上方的 <code>concat</code></p><blockquote><p>Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">'XXX'</span>, <span class="string">'XXX'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// const XXX = [array, array1];</span></span><br><span class="line"><span class="comment">// [ ['ES5', 'ES6'], ['XXX', 'XXX'] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array2 = [...array, <span class="string">'ES7'</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = [...array, <span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array2);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7']</span></span><br><span class="line"> <span class="built_in">console</span>.log(array3);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6'];</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array.prototype.push()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">Array.prototype.splice()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length" target="_blank" rel="noopener">Array.length</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">Array.prototype.concat()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread syntax</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Append-Item-to-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Append-Item-to-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Append Item to Array&quot;&gt;&lt;/a&gt;J 筆記 - Append Item to Array&lt;/h1&gt;&lt;p&gt;在之前一系列有關 &lt;a href=&quot;https://chestertang.site/categories/JavaScript/&quot;&gt;Array&lt;/a&gt; 的文章當中，有看到各種 clone Array 後，將新元素推進陣列會造成的結果，都直接以 &lt;code&gt;push&lt;/code&gt; 來簡單舉例而已。&lt;/p&gt;
&lt;p&gt;這篇將舉例 &lt;code&gt;易變的&lt;/code&gt; (mutable)、&lt;code&gt;不易變的&lt;/code&gt; (inmutable) 的五種方式，雖然實務上都會直接用 &lt;code&gt;inmutable&lt;/code&gt; 的方法，但還是舉例 &lt;code&gt;mutable&lt;/code&gt;，來增加自己印象，就算看到這樣的程式碼的時候，也會知道會造成的結果… &lt;/p&gt;
&lt;h2 id=&quot;易變的-mutable&quot;&gt;&lt;a href=&quot;#易變的-mutable&quot; class=&quot;headerlink&quot; title=&quot;易變的 (mutable)&quot;&gt;&lt;/a&gt;&lt;code&gt;易變的&lt;/code&gt; (mutable)&lt;/h2&gt;&lt;p&gt;透過 &lt;code&gt;push&lt;/code&gt;、&lt;code&gt;splice&lt;/code&gt;、&lt;code&gt;.length&lt;/code&gt; 這三種方式的塞元素，會影響原始的陣列。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.push(&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.splice(array.length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array[array.length] = &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;, &#39;ES6&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;不易變的-inmutable&quot;&gt;&lt;a href=&quot;#不易變的-inmutable&quot; class=&quot;headerlink&quot; title=&quot;不易變的 (inmutable)&quot;&gt;&lt;/a&gt;&lt;code&gt;不易變的&lt;/code&gt; (inmutable)&lt;/h2&gt;&lt;p&gt;透過 &lt;code&gt;spread&lt;/code&gt;、&lt;code&gt;concat&lt;/code&gt; 兩種方式，會額外新增一個陣列，並且保持原本的陣列不受到更動。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; original = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newArray = original.concat(&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newArray = [...original, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;, &#39;ES6&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(original);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Deep Clone Array</title>
    <link href="http://chestertang.site/2020/04/29/zyx0429/"/>
    <id>http://chestertang.site/2020/04/29/zyx0429/</id>
    <published>2020-04-28T16:00:00.000Z</published>
    <updated>2020-04-29T04:32:47.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Deep-Clone-Array"><a href="#J-筆記-Deep-Clone-Array" class="headerlink" title="J 筆記 - Deep Clone Array"></a>J 筆記 - Deep Clone Array</h1><p>之前有介紹過如何 <a href="https://chestertang.site/2020/04/18/zyx0418/">Clone an Array</a>，但可以知道的問題是，如果今天是 Array 裡面又有更深層的 Array 的話（Deep Array），再複製陣列上就會有點問題，也如同上篇的 Only one level 的結論。因此，這篇就來介紹兩種 Deep Clone Array 的方法吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using JavaScript</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(nestedArray));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Lodash</span></span><br><span class="line">_.cloneDeep(nestedArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Recursion</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">items</span>) =&gt;</span> items.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item) ? clone(item) : item);</span><br><span class="line">clone(nestedArray);</span><br></pre></td></tr></table></figure><h2 id="Copying-a-Value-type"><a href="#Copying-a-Value-type" class="headerlink" title="Copying a Value type"></a>Copying a Value type</h2><p>先來個最基本的數組，這部分應該很好理解，宣告一個 <code>value</code>。而且如果我們更改 <code>valueCopy</code>，不會影響原本的 <code>value</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">9527</span>;</span><br><span class="line"><span class="keyword">let</span> cloneValue = value; </span><br><span class="line"><span class="comment">// clone value</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cloneValue); </span><br><span class="line"><span class="comment">// 9527</span></span><br><span class="line"></span><br><span class="line">cloneValue = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// Change cloneValue</span></span><br><span class="line"><span class="built_in">console</span>.log(cloneValue);</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); </span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="Copying-a-Reference-type"><a href="#Copying-a-Reference-type" class="headerlink" title="Copying a Reference type"></a>Copying a Reference type</h2><p>如果上篇所述，為什麼原始陣列也會受到影響？那是因為複製的不是數組本身，而是指向數組的記憶體位址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = initarray;</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'❌'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br></pre></td></tr></table></figure><p>因此，有了上篇的解決方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = [...initarray];</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'✔️'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "✔️"];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7"];</span></span><br></pre></td></tr></table></figure><h2 id="Deep-Clone"><a href="#Deep-Clone" class="headerlink" title="Deep Clone"></a>Deep Clone</h2><p>知道了上面的方法後，讓我們現在來看看透過 <code>Spread ...</code> 與 <code>Array.from</code> 雖然可以複製陣列，但只能複製 Only one level 的問題，而無法解決巢狀亦又或者是 <code>Deep Clone</code>。</p><p>可以發現，原本的 <code>nestedArray</code> 的陣列一並沒有改變 <code>ES5</code>，這很符合我們上邊敘述複製 Only one Level 的方法，不過後面的 <code>ES6</code> 就被改為 <code>Deep!!!</code> 了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">const</span> copynestedArray = [...nestedArray];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">copynestedArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">copynestedArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(copynestedArray); <span class="comment">// ['ES0', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray);</span><br><span class="line"><span class="comment">// ['ES5', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br></pre></td></tr></table></figure><h2 id="JSON-amp-Recursion-amp-lodash"><a href="#JSON-amp-Recursion-amp-lodash" class="headerlink" title="JSON &amp; Recursion &amp; lodash"></a>JSON &amp; Recursion &amp; lodash</h2><p>接下來，我們來看看透過 <code>JSON</code> 的實作結果，如果有興趣看 <code>lodash</code> 的方法也可以去官網查看，這是一套滿多人在使用，可以更簡潔寫 code 的 js 套件。</p><blockquote><p><a href="https://lodash.com/docs/" target="_blank" rel="noopener">https://lodash.com/docs/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">let</span> JSONcopynestedArray = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(nestedArray)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">JSONcopynestedArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">JSONcopynestedArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(JSONcopynestedArray); <span class="comment">// ['ES0', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✔️ Nested array NOT affected</span></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray); <span class="comment">// ['ES5', ['ES6', ['ES7']], ['ES8']]</span></span><br></pre></td></tr></table></figure><p>另外，也可以使用 <code>Recursion 遞迴</code> 來完成複製</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">items</span>) =&gt;</span> items.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item) ? clone(item) : item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">var</span> RecursionArray = clone(nestedArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">RecursionArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">RecursionArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(RecursionArray); <span class="comment">// [ 'ES0', [ 'Deep!!!', ['ES7'] ], ['ES8'] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✔️ Nested array NOT affected</span></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray); <span class="comment">// ['ES5', ['ES6', ['ES7']], ['ES8']];</span></span><br></pre></td></tr></table></figure><h2 id="Values-Not-Compatible-with-JSON"><a href="#Values-Not-Compatible-with-JSON" class="headerlink" title="Values Not Compatible with JSON"></a>Values Not Compatible with JSON</h2><blockquote><p>Note!!! 值得注意的是，如果數值與 JSON 不兼容，轉譯的時候會出現錯誤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copynestedArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copynestedArray([<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>]) <span class="comment">// [1, null, 2]</span></span><br><span class="line">copynestedArray([<span class="built_in">document</span>.body, <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>)]) <span class="comment">// [&#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener">JSON.parse()</a></li><li><a href="https://lodash.com/docs/4.17.15#cloneDeep" target="_blank" rel="noopener">_.cloneDeep(value)</a></li><li><a href="https://stackoverflow.com/questions/597588/how-do-you-clone-an-array-of-objects-in-javascript" target="_blank" rel="noopener">How do you clone an Array of Objects in Javascript?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Deep-Clone-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Deep-Clone-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Deep Clone Array&quot;&gt;&lt;/a&gt;J 筆記 - Deep Clone Array&lt;/h1&gt;&lt;p&gt;之前有介紹過如何 &lt;a href=&quot;https://chestertang.site/2020/04/18/zyx0418/&quot;&gt;Clone an Array&lt;/a&gt;，但可以知道的問題是，如果今天是 Array 裡面又有更深層的 Array 的話（Deep Array），再複製陣列上就會有點問題，也如同上篇的 Only one level 的結論。因此，這篇就來介紹兩種 Deep Clone Array 的方法吧！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nestedArray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;]], [&lt;span class=&quot;string&quot;&gt;&#39;ES8&#39;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(nestedArray));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using Lodash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_.cloneDeep(nestedArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using Recursion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;items&lt;/span&gt;) =&amp;gt;&lt;/span&gt; items.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(item) ? clone(item) : item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clone(nestedArray);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Copying-a-Value-type&quot;&gt;&lt;a href=&quot;#Copying-a-Value-type&quot; class=&quot;headerlink&quot; title=&quot;Copying a Value type&quot;&gt;&lt;/a&gt;Copying a Value type&lt;/h2&gt;&lt;p&gt;先來個最基本的數組，這部分應該很好理解，宣告一個 &lt;code&gt;value&lt;/code&gt;。而且如果我們更改 &lt;code&gt;valueCopy&lt;/code&gt;，不會影響原本的 &lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;9527&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cloneValue = value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// clone value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(cloneValue); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 9527&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cloneValue = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change cloneValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(cloneValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Copying-a-Reference-type&quot;&gt;&lt;a href=&quot;#Copying-a-Reference-type&quot; class=&quot;headerlink&quot; title=&quot;Copying a Reference type&quot;&gt;&lt;/a&gt;Copying a Reference type&lt;/h2&gt;&lt;p&gt;如果上篇所述，為什麼原始陣列也會受到影響？那是因為複製的不是數組本身，而是指向數組的記憶體位址。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray2 = initarray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initarray2.push(&lt;span class=&quot;string&quot;&gt;&#39;❌&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;, &quot;❌&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;, &quot;❌&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因此，有了上篇的解決方案：&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Remove Array Dup</title>
    <link href="http://chestertang.site/2020/04/19/zyx0419/"/>
    <id>http://chestertang.site/2020/04/19/zyx0419/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-29T03:09:29.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-ES6-Remove-Array-Duplicates"><a href="#J-筆記-ES6-Remove-Array-Duplicates" class="headerlink" title="J 筆記 - ES6 Remove Array Duplicates"></a>J 筆記 - ES6 Remove Array Duplicates</h1><p>在 Ruby 裡面要做這件事情真的方便許多直接 <code>uniq</code> 就可以完成，但常常被寫好的 <code>method</code> 慣壞了卻想不太到 JS 裡頭該怎麼實作，所以整理一些 <code>Remove Array Duplicates</code> 的方法…</p><h2 id="3-ways-in-ES6"><a href="#3-ways-in-ES6" class="headerlink" title="3 ways in ES6"></a>3 ways in ES6</h2><p>總共在 ES6 裡面有 3 種方法可以實作，而我最喜歡的莫過於 <code>Set</code>，又短又不用想到底裡面做了什麼，不像 <code>filter</code>、<code>reduce</code>，另外也覺得有點像 Ruby 的 <code>uniq</code>，所以寫起來快速又實用～</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1: "Set"</span></span><br><span class="line">[...new <span class="built_in">Set</span>(array)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2: "Filter"</span></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> array.indexOf(item) === index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3: "Reduce"</span></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> </span><br><span class="line">  uniq.includes(item) ? uniq : [...uniq, item], []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// ['Remove', 'ES5', 'ES6', 'ES7']</span></span><br></pre></td></tr></table></figure><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1. Set"></a>1. <code>Set</code></h3><blockquote><p>The Set object lets you store unique values of any type, whether primitive values or object references.</p></blockquote><p>ES6 提供了新的數據結構 <code>Set</code>。它類似於數組，但值都是唯一的，没有重複的值。</p><p>因此我們來看看到底做了什麼…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarray = <span class="keyword">new</span> <span class="built_in">Set</span>(array);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(newarray);</span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// Set(4) &#123;"Remove", "ES5", "ES6", "ES7"&#125;</span></span><br></pre></td></tr></table></figure><p>在結合之前前幾篇的 <a href="https://chestertang.site/2020/04/13/zyx0413/">spread operator</a>、<a href="https://chestertang.site/2020/04/18/zyx0418/">Array.from</a> 將它變成陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarray = <span class="keyword">new</span> <span class="built_in">Set</span>(array);</span><br><span class="line"><span class="keyword">const</span> backToArray = [...newarray];</span><br><span class="line"><span class="keyword">const</span> ArrayfromtoArray = <span class="built_in">Array</span>.from(newarray);</span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// Set(4) ["Remove", "ES5", "ES6", "ES7"]</span></span><br></pre></td></tr></table></figure><h3 id="2-filter"><a href="#2-filter" class="headerlink" title="2. filter"></a>2. <code>filter</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2: "Filter"</span></span><br><span class="line">  array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> array.indexOf(item) === index);</span><br></pre></td></tr></table></figure><p>雖然這樣子就能出現答案，但中間 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.indexOf()</a> 是做了什麼事情呢？</p><blockquote><p>The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    index,</span><br><span class="line">    array.indexOf(item),</span><br><span class="line">    array.indexOf(item) === index,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array.indexOf(item) === index</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>index</th><th>indexOf</th><th>condition</th></tr></thead><tbody><tr><td>Remove</td><td>0</td><td>0</td><td>True</td></tr><tr><td>Remove</td><td>1</td><td>0</td><td>False</td></tr><tr><td>ES5</td><td>2</td><td>2</td><td>True</td></tr><tr><td>ES6</td><td>3</td><td>3</td><td>True</td></tr><tr><td>Remove</td><td>4</td><td>0</td><td>False</td></tr><tr><td>ES7</td><td>5</td><td>5</td><td>True</td></tr></tbody></table><h3 id="2-x-相反"><a href="#2-x-相反" class="headerlink" title="2.x 相反"></a>2.x 相反</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    index,</span><br><span class="line">    array.indexOf(item),</span><br><span class="line">    array.indexOf(item) === index,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array.indexOf(item) !== index</span><br><span class="line">  <span class="comment">// ['Remove', 'Remove']</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>index</th><th>indexOf</th><th>condition</th></tr></thead><tbody><tr><td>Remove</td><td>0</td><td>0</td><td>False</td></tr><tr><td>Remove</td><td>1</td><td>0</td><td>True</td></tr><tr><td>ES5</td><td>2</td><td>2</td><td>False</td></tr><tr><td>ES6</td><td>3</td><td>3</td><td>False</td></tr><tr><td>Remove</td><td>4</td><td>0</td><td>True</td></tr><tr><td>ES7</td><td>5</td><td>5</td><td>False</td></tr></tbody></table><h3 id="3-reduce"><a href="#3-reduce" class="headerlink" title="3. reduce"></a>3. <code>reduce</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3: "Reduce"</span></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> </span><br><span class="line">  uniq.includes(item) ? uniq : [...uniq, item], []);</span><br></pre></td></tr></table></figure><p>同上，雖然這樣子就能出現答案，但中間 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce()</a> 是做了什麼事情呢？</p><blockquote><p>The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    uniq,</span><br><span class="line">    uniq.includes(item),</span><br><span class="line">    uniq.includes(item) ? uniq : [...uniq, item],</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> uniq.includes(item) ? uniq : [...uniq, item]</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>Accumulator (BEFORE Reducer Function)</th><th>Push to Accumulator?</th><th>Accumulator (AFTER Reducer Function)</th></tr></thead><tbody><tr><td>Remove</td><td>[]</td><td>Yes</td><td>[‘Remove’]</td></tr><tr><td>Remove</td><td>[‘Remove’]</td><td>NO</td><td>[‘Remove’]</td></tr><tr><td>ES5</td><td>[‘Remove’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’]</td></tr><tr><td>ES6</td><td>[‘Remove’, ‘ES5’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td></tr><tr><td>Remove</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td><td>No</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td></tr><tr><td>ES7</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’, ‘ES6’, ‘ES7’]</td></tr></tbody></table><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN web docs Set</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN web docs Array.prototype.filter()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN web docs Array.prototype.reduce()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-ES6-Remove-Array-Duplicates&quot;&gt;&lt;a href=&quot;#J-筆記-ES6-Remove-Array-Duplicates&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - ES6 Remove Array Duplicates&quot;&gt;&lt;/a&gt;J 筆記 - ES6 Remove Array Duplicates&lt;/h1&gt;&lt;p&gt;在 Ruby 裡面要做這件事情真的方便許多直接 &lt;code&gt;uniq&lt;/code&gt; 就可以完成，但常常被寫好的 &lt;code&gt;method&lt;/code&gt; 慣壞了卻想不太到 JS 裡頭該怎麼實作，所以整理一些 &lt;code&gt;Remove Array Duplicates&lt;/code&gt; 的方法…&lt;/p&gt;
&lt;h2 id=&quot;3-ways-in-ES6&quot;&gt;&lt;a href=&quot;#3-ways-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;3 ways in ES6&quot;&gt;&lt;/a&gt;3 ways in ES6&lt;/h2&gt;&lt;p&gt;總共在 ES6 裡面有 3 種方法可以實作，而我最喜歡的莫過於 &lt;code&gt;Set&lt;/code&gt;，又短又不用想到底裡面做了什麼，不像 &lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;，另外也覺得有點像 Ruby 的 &lt;code&gt;uniq&lt;/code&gt;，所以寫起來快速又實用～&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1: &quot;Set&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...new &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;(array)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2: &quot;Filter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.filter(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;item, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; array.indexOf(item) === index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3: &quot;Reduce&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;uniq, item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uniq.includes(item) ? uniq : [...uniq, item], []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;Remove&#39;, &#39;ES5&#39;, &#39;ES6&#39;, &#39;ES7&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;1-Set&quot;&gt;&lt;a href=&quot;#1-Set&quot; class=&quot;headerlink&quot; title=&quot;1. Set&quot;&gt;&lt;/a&gt;1. &lt;code&gt;Set&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The Set object lets you store unique values of any type, whether primitive values or object references.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ES6 提供了新的數據結構 &lt;code&gt;Set&lt;/code&gt;。它類似於數組，但值都是唯一的，没有重複的值。&lt;/p&gt;
&lt;p&gt;因此我們來看看到底做了什麼…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newarray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newarray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set(4) &amp;#123;&quot;Remove&quot;, &quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Clone an Array</title>
    <link href="http://chestertang.site/2020/04/18/zyx0418/"/>
    <id>http://chestertang.site/2020/04/18/zyx0418/</id>
    <published>2020-04-18T10:00:00.000Z</published>
    <updated>2020-04-25T08:11:11.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Clone-an-Array"><a href="#J-筆記-Clone-an-Array" class="headerlink" title="J 筆記 - Clone an Array"></a>J 筆記 - Clone an Array</h1><p>複製陣列及資料，不管在什麼語言當中，都是很常用到的方式，在了解如何複製之前，應該對所謂的「傳值」、「傳址」大概的了解，才知道為什麼這樣能複製一個新的陣列出來，而不是改到之前的陣列…</p><blockquote><p><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></p></blockquote><h2 id="ES6-Way-to-Clone-an-Array"><a href="#ES6-Way-to-Clone-an-Array" class="headerlink" title="ES6 Way to Clone an Array"></a>ES6 Way to Clone an Array</h2><p>舊有的複製陣列通常都以 <code>slice</code> 來達成，不過 ES6 後，有些其他的方法可以快速複製，就來看看吧…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Old way</span></span><br><span class="line"><span class="keyword">const</span> oldarray = initarray.slice();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 way</span></span><br><span class="line"><span class="keyword">const</span> spreadoperator = [...initarray];</span><br><span class="line"><span class="keyword">const</span> Arrayfrom = <span class="built_in">Array</span>.from(initarray);</span><br></pre></td></tr></table></figure><p>還記得上次的 <a href="https://chestertang.site/2020/04/13/zyx0413/">String to Array</a> 也有用到 <code>spread operator</code>、<code>Array.from</code> 兩者用法，如果忘記得可以再去看看</p><h2 id="Call-by-value-Call-by-address"><a href="#Call-by-value-Call-by-address" class="headerlink" title="Call by value / Call by address"></a>Call by value / Call by address</h2><p>JS 中的數組是 <code>Call by value</code>，因此如果嘗試使用 <code>=</code> 進行複制時，只會複製到原始宣告的那組數組，而不是數組的值。要真正複製一個全新數組，需要在新的 value 下複製數組的值，這樣就不會引用內存中的舊 address。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> errormethod = initarray;</span><br><span class="line"><span class="keyword">const</span> spreadoperator = [...initarray];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray === errormethod);</span><br><span class="line"><span class="comment">//  true --&gt; same memory space (Call by value)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray === spreadoperator);</span><br><span class="line"><span class="comment">// false --&gt; new memory space(Call by address)</span></span><br></pre></td></tr></table></figure><h2 id="initarray-Problem"><a href="#initarray-Problem" class="headerlink" title="initarray Problem"></a>initarray Problem</h2><p>看完了上面的例子，可能還是搞不太懂 true / false 帶來的影響，或許知道了就是在不同的 <code>memory space</code>，且慢看看下面的例子: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = initarray;</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'❌'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br></pre></td></tr></table></figure><p>有發現最初的陣列也被改掉了嗎？明明是要複製全新的陣列然後 <code>push</code> 東西進去，但為什麼原本的陣列也被改掉了！</p><p>這就是「傳值」、「傳址」的差別：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = [...initarray];</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'✔️'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "✔️"];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7"];</span></span><br></pre></td></tr></table></figure><h2 id="Only-one-level"><a href="#Only-one-level" class="headerlink" title="Only one level"></a>Only one level</h2><blockquote><p>Note!!! 記得 <code>Spread operator</code>、<code>Array.from()</code> 兩者複製陣列時只能深入一層，如果要更深入，必須要用其他方法才能達成！</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [[<span class="string">'ES5'</span>, <span class="string">'ES6'</span>], [<span class="string">'ES7'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spread_operator_array = [...initarray];</span><br><span class="line"><span class="keyword">const</span> Array_from_array = <span class="built_in">Array</span>.from(initarray);</span><br><span class="line"></span><br><span class="line">spread_operator_array[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">"❌"</span>;</span><br><span class="line">Array_from_array[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">"❌"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(spread_operator_array);</span><br><span class="line"><span class="built_in">console</span>.log(Array_from_array);</span><br><span class="line"><span class="comment">// [["❌", "ES6"], ["ES7"]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// [["❌", "ES6"], ["ES7"]]</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">MDN web docs Spread syntax</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">MDN web docs Array.prototype.slice()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Clone-an-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Clone-an-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Clone an Array&quot;&gt;&lt;/a&gt;J 筆記 - Clone an Array&lt;/h1&gt;&lt;p&gt;複製陣列及資料，不管在什麼語言當中，都是很常用到的方式，在了解如何複製之前，應該對所謂的「傳值」、「傳址」大概的了解，才知道為什麼這樣能複製一個新的陣列出來，而不是改到之前的陣列…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10191057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ES6-Way-to-Clone-an-Array&quot;&gt;&lt;a href=&quot;#ES6-Way-to-Clone-an-Array&quot; class=&quot;headerlink&quot; title=&quot;ES6 Way to Clone an Array&quot;&gt;&lt;/a&gt;ES6 Way to Clone an Array&lt;/h2&gt;&lt;p&gt;舊有的複製陣列通常都以 &lt;code&gt;slice&lt;/code&gt; 來達成，不過 ES6 後，有些其他的方法可以快速複製，就來看看吧…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Old way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; oldarray = initarray.slice();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ES6 way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spreadoperator = [...initarray];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Arrayfrom = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(initarray);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;還記得上次的 &lt;a href=&quot;https://chestertang.site/2020/04/13/zyx0413/&quot;&gt;String to Array&lt;/a&gt; 也有用到 &lt;code&gt;spread operator&lt;/code&gt;、&lt;code&gt;Array.from&lt;/code&gt; 兩者用法，如果忘記得可以再去看看&lt;/p&gt;
&lt;h2 id=&quot;Call-by-value-Call-by-address&quot;&gt;&lt;a href=&quot;#Call-by-value-Call-by-address&quot; class=&quot;headerlink&quot; title=&quot;Call by value / Call by address&quot;&gt;&lt;/a&gt;Call by value / Call by address&lt;/h2&gt;&lt;p&gt;JS 中的數組是 &lt;code&gt;Call by value&lt;/code&gt;，因此如果嘗試使用 &lt;code&gt;=&lt;/code&gt; 進行複制時，只會複製到原始宣告的那組數組，而不是數組的值。要真正複製一個全新數組，需要在新的 value 下複製數組的值，這樣就不會引用內存中的舊 address。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; errormethod = initarray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spreadoperator = [...initarray];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray === errormethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  true --&amp;gt; same memory space (Call by value)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray === spreadoperator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// false --&amp;gt; new memory space(Call by address)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 筆記 - :empty Selector</title>
    <link href="http://chestertang.site/2020/04/17/zyx0417/"/>
    <id>http://chestertang.site/2020/04/17/zyx0417/</id>
    <published>2020-04-17T03:30:00.000Z</published>
    <updated>2020-04-17T03:48:28.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-筆記-empty-Selector"><a href="#HTML5-筆記-empty-Selector" class="headerlink" title="HTML5 筆記 - :empty Selector"></a>HTML5 筆記 - :empty Selector</h1><p>通常，在我們的元素裡面，大多都會有文本以及子元素，然而假設今天是完全沒有的，但又想要選取該怎麼辦？這時候就可以使用 <code>:empty</code> 選取器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Not Empty --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Empty --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"not empty"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"empty"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: silver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://codepen.io/BeastRush/pen/QWjNqBW" target="_blank" rel="noopener">https://codepen.io/BeastRush/pen/QWjNqBW</a></p></blockquote><h2 id="如何定義-empty？"><a href="#如何定義-empty？" class="headerlink" title="如何定義 empty？"></a>如何定義 empty？</h2><p>當我第一是看到有人這樣用的時候，其實有點看不太懂是什麼，所以我相信如果你沒看過也還搞不太清楚是如何定義 <code>:empty</code>，先來看看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:empty" target="_blank" rel="noopener">MDN</a> 的定義：</p><blockquote><p>The :empty CSS pseudo-class represents any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty.</p></blockquote><h3 id="Only-in-Firefox"><a href="#Only-in-Firefox" class="headerlink" title="Only in Firefox"></a>Only in Firefox</h3><p>空白會被視為 empty，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-only-whitespace" target="_blank" rel="noopener">:-moz-only-whitespace</a>，但基本上是完全可以忽略的東西，除非真的像工作上遇到 <a href="https://stackoverflow.com/questions/11753523/firefox-bug-with-rowspan-border-collapse-border" target="_blank" rel="noopener">FireFox bug with: rowspan + border-collapse + border</a> 裡面少了 table 的底線，又或者是 Windows APP Outlook 多了 td，但是其他瀏覽器、手機 APP 開通通都正常的情況…</p><blockquote><p>Note: In Selectors Level 4 the :empty pseudo-class was changed to act like :-moz-only-whitespace, but no browser currently supports this yet.</p></blockquote><h2 id="Not-Empty"><a href="#Not-Empty" class="headerlink" title="Not Empty"></a>Not Empty</h2><p>如同開頭的例子及定義，有文本、空白、子元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Comment with whitespace--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Chester<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Empty"><a href="#Empty" class="headerlink" title="Empty"></a>Empty</h2><p>標籤裡面沒有東西（包含空白）及裡面是註解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment but Empty--&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="實例"><a href="#實例" class="headerlink" title="實例"></a>實例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- No error message --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Yes error message --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span> Missing Email<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"\02716"</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://codepen.io/BeastRush/pen/QWjNqBW" target="_blank" rel="noopener">https://codepen.io/BeastRush/pen/QWjNqBW</a></p></blockquote><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:empty" target="_blank" rel="noopener">MDN web Docs :empty</a></li><li><a href="https://css-tricks.com/almanac/selectors/e/empty/" target="_blank" rel="noopener">Css trick</a></li><li><a href="http://thenewcode.com/692/Vanishing-Acts-The-CSS-empty-Selector" target="_blank" rel="noopener">Vanishing-Acts</a></li><li><a href="https://codepen.io/katydecorah/post/a-case-for-empty" target="_blank" rel="noopener">A case for :empty</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5-筆記-empty-Selector&quot;&gt;&lt;a href=&quot;#HTML5-筆記-empty-Selector&quot; class=&quot;headerlink&quot; title=&quot;HTML5 筆記 - :empty Selector&quot;&gt;&lt;/a&gt;HTML5 筆記 - :empty Selector&lt;/h1&gt;&lt;p&gt;通常，在我們的元素裡面，大多都會有文本以及子元素，然而假設今天是完全沒有的，但又想要選取該怎麼辦？這時候就可以使用 &lt;code&gt;:empty&lt;/code&gt; 選取器&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Not Empty --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Empty --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::before&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;not empty&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:empty&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::before&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;empty&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: silver;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:empty&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/BeastRush/pen/QWjNqBW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/BeastRush/pen/QWjNqBW&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何定義-empty？&quot;&gt;&lt;a href=&quot;#如何定義-empty？&quot; class=&quot;headerlink&quot; title=&quot;如何定義 empty？&quot;&gt;&lt;/a&gt;如何定義 empty？&lt;/h2&gt;&lt;p&gt;當我第一是看到有人這樣用的時候，其實有點看不太懂是什麼，所以我相信如果你沒看過也還搞不太清楚是如何定義 &lt;code&gt;:empty&lt;/code&gt;，先來看看 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:empty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MDN&lt;/a&gt; 的定義：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The :empty CSS pseudo-class represents any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Only-in-Firefox&quot;&gt;&lt;a href=&quot;#Only-in-Firefox&quot; class=&quot;headerlink&quot; title=&quot;Only in Firefox&quot;&gt;&lt;/a&gt;Only in Firefox&lt;/h3&gt;&lt;p&gt;空白會被視為 empty，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-only-whitespace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;:-moz-only-whitespace&lt;/a&gt;，但基本上是完全可以忽略的東西，除非真的像工作上遇到 &lt;a href=&quot;https://stackoverflow.com/questions/11753523/firefox-bug-with-rowspan-border-collapse-border&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FireFox bug with: rowspan + border-collapse + border&lt;/a&gt; 裡面少了 table 的底線，又或者是 Windows APP Outlook 多了 td，但是其他瀏覽器、手機 APP 開通通都正常的情況…&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://chestertang.site/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://chestertang.site/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - String to Array</title>
    <link href="http://chestertang.site/2020/04/13/zyx0413/"/>
    <id>http://chestertang.site/2020/04/13/zyx0413/</id>
    <published>2020-04-13T08:00:00.000Z</published>
    <updated>2020-04-16T10:03:11.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Convert-String-to-Character-Array"><a href="#J-筆記-Convert-String-to-Character-Array" class="headerlink" title="J 筆記 - Convert String to Character Array"></a>J 筆記 - Convert String to Character Array</h1><p>在處理資料不管是在 Ruby、JS 當中，常常需要把一整坨的資料做切開後，再來做應用，而在 JS 中實作的方式有好幾種，但這些方法之中的差異在哪邊，就來實作幾個範例吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester'</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r']</span></span><br></pre></td></tr></table></figure><h2 id="四種-String-gt-Character-Array-方法"><a href="#四種-String-gt-Character-Array-方法" class="headerlink" title="四種 String -&gt; Character Array 方法"></a>四種 String -&gt; Character Array 方法</h2><p>將資料拆開的方法共有四種，隨著 ES6 的廣泛應用，除了常見的 <code>split</code> 還有許多其他的寫法可以解決這個問題，雖然可能有些不太常用到，但至少別人的程式碼當中如果出現，你可以馬上理解這段 code 在幹嘛…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester'</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 選項1 </span></span><br><span class="line">Chester.split(<span class="string">''</span>); </span><br><span class="line"><span class="comment">// 選項2 </span></span><br><span class="line">[... Chester]; </span><br><span class="line"><span class="comment">// 選項3 </span></span><br><span class="line"><span class="built_in">Array</span>.from(Chester); </span><br><span class="line"><span class="comment">// 選項4 </span></span><br><span class="line"><span class="built_in">Object</span>.assign([]，Chester); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r']</span></span><br></pre></td></tr></table></figure><h3 id="情況一：切割每個字"><a href="#情況一：切割每個字" class="headerlink" title="情況一：切割每個字"></a>情況一：切割每個字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'查斯特'</span>;</span><br><span class="line"><span class="keyword">const</span> usingSplit = Chester.split(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">const</span> usingSpread = [... Chester];</span><br><span class="line"><span class="keyword">const</span> usingArrayFrom = <span class="built_in">Array</span>.from(Chester);</span><br><span class="line"><span class="keyword">const</span> usingObjectAssign = <span class="built_in">Object</span>.assign([], Chester);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['查', '斯', '特']</span></span><br></pre></td></tr></table></figure><h3 id="情況二：特定符號"><a href="#情況二：特定符號" class="headerlink" title="情況二：特定符號"></a>情況二：特定符號</h3><p>如果是要把逗號、分號這類型的資料分開，那 <code>split</code> 會是最好的辦法（這也是最常用的方式）！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester-Tang'</span>;</span><br><span class="line"><span class="keyword">const</span> usingSplit = Chester.split(<span class="string">'-'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['Chester', 'Tang']</span></span><br></pre></td></tr></table></figure><p>其他的方法跟情況一得到的答案是相同的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester-Tang'</span>;</span><br><span class="line"><span class="keyword">const</span> usingSpread = [... Chester];</span><br><span class="line"><span class="keyword">const</span> usingArrayFrom = <span class="built_in">Array</span>.from(Chester);</span><br><span class="line"><span class="keyword">const</span> usingObjectAssign = <span class="built_in">Object</span>.assign([], Chester);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r', '-', 'T', 'a', 'n', 'g']</span></span><br></pre></td></tr></table></figure><h3 id="情況三：Emojis"><a href="#情況三：Emojis" class="headerlink" title="情況三：Emojis"></a>情況三：Emojis</h3><p>如果含有 Emojis 的話，<code>Spread</code>、<code>ArrayFrom</code> 是比較好的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester😋'</span>;</span><br><span class="line"><span class="keyword">const</span> usingSpread = [... Chester];</span><br><span class="line"><span class="keyword">const</span> usingArrayFrom = <span class="built_in">Array</span>.from(Chester);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r', '😋']</span></span><br></pre></td></tr></table></figure><p>如果用 <code>split</code>、<code>Object.assign</code> 會發生以下錯誤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Chester = <span class="string">'Chester😋'</span>;</span><br><span class="line"><span class="keyword">const</span> usingSplit = Chester.split(<span class="string">''</span>);</span><br><span class="line"><span class="keyword">const</span> usingObjectAssign = <span class="built_in">Object</span>.assign([], Chester);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果：</span></span><br><span class="line"><span class="comment">// ['C', 'h', 'e', 's', 't', 'e', 'r', '�', '�']</span></span><br></pre></td></tr></table></figure><p>這是因為 <a href="https://github.com/orling/grapheme-splitter" target="_blank" rel="noopener">grapheme-splitter</a> <code>UTF-8</code> 和 <code>UTF-16</code> 不同的關係所造成的。’😋’ 它實際上是由 2 個字組成，而不是我們認為的 1 個。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'😋'</span>.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 中的 <code>Object.assign([], Chester)</code>，在這邊其實還有其他的雷，但前提是你有在寫 TS</p></blockquote><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">MDN Web Docs: split</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">MDN Web Docs: spread</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">MDN Web Docs: Array.from</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">MDN Web Docs: Object.assign</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Convert-String-to-Character-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Convert-String-to-Character-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Convert String to Character Array&quot;&gt;&lt;/a&gt;J 筆記 - Convert String to Character Array&lt;/h1&gt;&lt;p&gt;在處理資料不管是在 Ruby、JS 當中，常常需要把一整坨的資料做切開後，再來做應用，而在 JS 中實作的方式有好幾種，但這些方法之中的差異在哪邊，就來實作幾個範例吧！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Chester = &lt;span class=&quot;string&quot;&gt;&#39;Chester&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;C&#39;, &#39;h&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;r&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;四種-String-gt-Character-Array-方法&quot;&gt;&lt;a href=&quot;#四種-String-gt-Character-Array-方法&quot; class=&quot;headerlink&quot; title=&quot;四種 String -&amp;gt; Character Array 方法&quot;&gt;&lt;/a&gt;四種 String -&amp;gt; Character Array 方法&lt;/h2&gt;&lt;p&gt;將資料拆開的方法共有四種，隨著 ES6 的廣泛應用，除了常見的 &lt;code&gt;split&lt;/code&gt; 還有許多其他的寫法可以解決這個問題，雖然可能有些不太常用到，但至少別人的程式碼當中如果出現，你可以馬上理解這段 code 在幹嘛…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Chester = &lt;span class=&quot;string&quot;&gt;&#39;Chester&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;C&#39;, &#39;h&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;r&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 選項1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chester.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 選項2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[... Chester]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 選項3 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(Chester); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 選項4 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign([]，Chester); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 結果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;C&#39;, &#39;h&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;, &#39;e&#39;, &#39;r&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;情況一：切割每個字&quot;&gt;&lt;a href=&quot;#情況一：切割每個字&quot; class=&quot;headerlink&quot; title=&quot;情況一：切割每個字&quot;&gt;&lt;/a&gt;情況一：切割每個字&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Chester = &lt;span class=&quot;string&quot;&gt;&#39;查斯特&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; usingSplit = Chester.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; usingSpread = [... Chester];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; usingArrayFrom = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(Chester);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; usingObjectAssign = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign([], Chester);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 結果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;查&#39;, &#39;斯&#39;, &#39;特&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;情況二：特定符號&quot;&gt;&lt;a href=&quot;#情況二：特定符號&quot; class=&quot;headerlink&quot; title=&quot;情況二：特定符號&quot;&gt;&lt;/a&gt;情況二：特定符號&lt;/h3&gt;&lt;p&gt;如果是要把逗號、分號這類型的資料分開，那 &lt;code&gt;split&lt;/code&gt; 會是最好的辦法（這也是最常用的方式）！&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - Cancancan</title>
    <link href="http://chestertang.site/2020/04/09/zyx0409/"/>
    <id>http://chestertang.site/2020/04/09/zyx0409/</id>
    <published>2020-04-09T06:00:00.000Z</published>
    <updated>2020-04-09T06:01:34.831Z</updated>
    
    <content type="html"><![CDATA[<p>之前的 DemoProject 中，架構都沒有大到需要用到角色來管理權限（可見多廢xd），所以就算知道可以用什麼來管，但也沒有直接的來寫過或接觸到，這幾天剛好有空就來好好研究，也順手記錄一下一些觀念。</p><p>先講個這個 gem 是幹嘛的：</p><ol><li>定義不同使用者有不同角色，每個角色有不同權限</li><li>簡化 controller 的 code</li></ol><h1 id="Cancancan"><a href="#Cancancan" class="headerlink" title="Cancancan"></a>Cancancan</h1><h2 id="Define-Abilities"><a href="#Define-Abilities" class="headerlink" title="Define Abilities"></a>Define Abilities</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails generate <span class="symbol">cancan:</span>ability</span><br><span class="line"><span class="comment">#create  app/models/ability.rb</span></span><br></pre></td></tr></table></figure><p>ability.rb 定義每個角色擁有哪些權限，並在 view 或 controller  設定條件時，查看是否符合條件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app &gt; models &gt; ability.rb</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ability</span></span></span><br><span class="line">  <span class="keyword">include</span> CanCan::Ability</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(user, staff = <span class="literal">nil</span>)</span></span></span><br><span class="line">    alias_action <span class="symbol">:read</span>, <span class="symbol">:update</span>, <span class="symbol">to:</span> <span class="symbol">:use</span> <span class="comment"># alias</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user.present?  <span class="comment"># additional permissions for logged in users (they can read their own posts)</span></span><br><span class="line">      can [<span class="symbol">:new</span>, <span class="symbol">:create</span>], Forum</span><br><span class="line">      cannot [<span class="symbol">:new</span>], Comment</span><br><span class="line">      basic_read_only</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> user.admin?  <span class="comment"># additional permissions for administrators</span></span><br><span class="line">        can <span class="symbol">:manage</span>, <span class="symbol">:all</span></span><br><span class="line">      <span class="keyword">elsif</span> staff &amp;&amp; staff.role</span><br><span class="line">        eval(<span class="string">"<span class="subst">#&#123;staff.<span class="keyword">class</span>.name.underscore&#125;</span>_ability(staff)"</span>)</span><br><span class="line">        <span class="comment"># eval 去 call 底下的方法</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        can <span class="symbol">:read</span>, Post</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">basic_read_only</span></span></span><br><span class="line">    can <span class="symbol">:read</span>, Forum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 定義 Teacher 所擁有的權限</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">teacher_ability</span><span class="params">(teacher)</span></span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 定義 Student 所擁有的權限</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">student_ability</span><span class="params">(student)</span></span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># can      : 定義被允許的權限，後面接兩個參數，第一個是被允許的 action ，第二個是被允許的 object</span></span><br><span class="line">  <span class="comment"># cannot   : 同上，反之</span></span><br><span class="line">  <span class="comment"># :manage  : 指 所有的 action 方法，:all 表示所有的 object</span></span><br><span class="line">  <span class="comment"># :read    : 指 :index 和 :show</span></span><br><span class="line">  <span class="comment"># :update  : 指 :edit  和 :update</span></span><br><span class="line">  <span class="comment"># :destroy : 指 :destroy</span></span><br><span class="line">  <span class="comment"># :create  : 指 :new   和 :crate</span></span><br></pre></td></tr></table></figure><p>object 後可以設定有權限的其他情況(database columns)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">can <span class="symbol">:update</span>, Reseller <span class="keyword">do</span> <span class="params">|reseller|</span></span><br><span class="line">  (reseller.id == user.id)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">can <span class="symbol">:update</span>, Reseller, <span class="symbol">id:</span> user.id</span><br></pre></td></tr></table></figure><p>自訂 Alias action</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias_action <span class="symbol">:index</span>, <span class="symbol">:show</span>, <span class="symbol">:to</span> =&gt; <span class="symbol">:read</span></span><br><span class="line">alias_action <span class="symbol">:new</span>, <span class="symbol">:to</span> =&gt; <span class="symbol">:create</span></span><br><span class="line">alias_action <span class="symbol">:edit</span>, <span class="symbol">:to</span> =&gt; <span class="symbol">:update</span></span><br></pre></td></tr></table></figure><p>自訂 method</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_read_only</span></span></span><br><span class="line">  can <span class="symbol">:read</span>, Forum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Authorizing-controller-actions"><a href="#Authorizing-controller-actions" class="headerlink" title="Authorizing controller actions"></a>Authorizing controller actions</h2><h3 id="load-and-authorized-resource"><a href="#load-and-authorized-resource" class="headerlink" title="load_and_authorized_resource"></a>load_and_authorized_resource</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> &lt; ActionController::Base</span></span><br><span class="line">  load_and_authorize_resource</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">discontinue</span></span></span><br><span class="line">    <span class="comment"># Automatically does the following:</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@product</span> = Product.find(params[:id])</span></span><br><span class="line">    <span class="comment"># authorize! :discontinue, <span class="doctag">@product</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定 action</span></span><br><span class="line"><span class="comment">#load_and_authorize_resource :only =&gt; [:index, :show]</span></span><br></pre></td></tr></table></figure><p>等於以下兩個方法：</p><ul><li>load_resource</li><li>authorize_resource</li></ul><h3 id="load-resource"><a href="#load-resource" class="headerlink" title="load_resource"></a>load_resource</h3><p><code>load_resource</code> 自動加入 @instance，預設跟 Class 名稱相同，Article =&gt; @article</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ArticlesController</span> <span class="title">&lt;</span> <span class="title">ApplicationController</span></span></span><br><span class="line">  load_resource</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    <span class="comment"># <span class="doctag">@article</span> = Article.new</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">    <span class="comment"># <span class="doctag">@article</span> = Article.find(params[:id])</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="authorize-resource"><a href="#authorize-resource" class="headerlink" title="authorize_resource"></a>authorize_resource</h3><p>將這個 Controller 加入權限的控制，並去 model 裡判斷權限是否有效</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicController</span> &lt; ApplicationController</span></span><br><span class="line">  authorize_resource <span class="symbol">:post</span> <span class="comment">#下方 index action 中的變數名稱</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @post = Topic.all</span><br><span class="line">    <span class="comment">#預設為 <span class="doctag">@topic</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception-Handling"></a>Exception-Handling</h2><p>若 user 無權限進入，cancancan 會噴出一個 CanCan::AccessDenied exception</p><blockquote><p>authorize_resource or authorize! 會丟例外</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application_controller.rb</span></span><br><span class="line"></span><br><span class="line">rescue_from CanCan::AccessDenied <span class="keyword">do</span> <span class="params">|exception|</span></span><br><span class="line">  redirect_to root_url, <span class="symbol">:alert</span> =&gt; exception.messag <span class="comment">#redirect_to</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/CanCanCommunity/cancancan" target="_blank" rel="noopener">https://github.com/CanCanCommunity/cancancan</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的 DemoProject 中，架構都沒有大到需要用到角色來管理權限（可見多廢xd），所以就算知道可以用什麼來管，但也沒有直接的來寫過或接觸到，這幾天剛好有空就來好好研究，也順手記錄一下一些觀念。&lt;/p&gt;
&lt;p&gt;先講個這個 gem 是幹嘛的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定義不同使用者有不同角色，每個角色有不同權限&lt;/li&gt;
&lt;li&gt;簡化 controller 的 code&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Cancancan&quot;&gt;&lt;a href=&quot;#Cancancan&quot; class=&quot;headerlink&quot; title=&quot;Cancancan&quot;&gt;&lt;/a&gt;Cancancan&lt;/h1&gt;&lt;h2 id=&quot;Define-Abilities&quot;&gt;&lt;a href=&quot;#Define-Abilities&quot; class=&quot;headerlink&quot; title=&quot;Define Abilities&quot;&gt;&lt;/a&gt;Define Abilities&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rails generate &lt;span class=&quot;symbol&quot;&gt;cancan:&lt;/span&gt;ability&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#create  app/models/ability.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ability.rb 定義每個角色擁有哪些權限，並在 view 或 controller  設定條件時，查看是否符合條件&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# app &amp;gt; models &amp;gt; ability.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ability&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; CanCan::Ability&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user, staff = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alias_action &lt;span class=&quot;symbol&quot;&gt;:read&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:update&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# alias&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; user.present?  &lt;span class=&quot;comment&quot;&gt;# additional permissions for logged in users (they can read their own posts)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      can [&lt;span class=&quot;symbol&quot;&gt;:new&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:create&lt;/span&gt;], Forum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cannot [&lt;span class=&quot;symbol&quot;&gt;:new&lt;/span&gt;], Comment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      basic_read_only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; user.admin?  &lt;span class=&quot;comment&quot;&gt;# additional permissions for administrators&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        can &lt;span class=&quot;symbol&quot;&gt;:manage&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; staff &amp;amp;&amp;amp; staff.role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eval(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;staff.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;.name.underscore&amp;#125;&lt;/span&gt;_ability(staff)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# eval 去 call 底下的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        can &lt;span class=&quot;symbol&quot;&gt;:read&lt;/span&gt;, Post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  protected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic_read_only&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    can &lt;span class=&quot;symbol&quot;&gt;:read&lt;/span&gt;, Forum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 定義 Teacher 所擁有的權限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;teacher_ability&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(teacher)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 定義 Student 所擁有的權限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;student_ability&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(student)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# can      : 定義被允許的權限，後面接兩個參數，第一個是被允許的 action ，第二個是被允許的 object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# cannot   : 同上，反之&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# :manage  : 指 所有的 action 方法，:all 表示所有的 object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# :read    : 指 :index 和 :show&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# :update  : 指 :edit  和 :update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# :destroy : 指 :destroy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# :create  : 指 :new   和 :crate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;object 後可以設定有權限的其他情況(database columns)&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;can &lt;span class=&quot;symbol&quot;&gt;:update&lt;/span&gt;, Reseller &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|reseller|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (reseller.id == user.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;can &lt;span class=&quot;symbol&quot;&gt;:update&lt;/span&gt;, Reseller, &lt;span class=&quot;symbol&quot;&gt;id:&lt;/span&gt; user.id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://chestertang.site/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://chestertang.site/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>S3 SnowBall</title>
    <link href="http://chestertang.site/2020/04/08/zyx0408/"/>
    <id>http://chestertang.site/2020/04/08/zyx0408/</id>
    <published>2020-04-07T16:00:00.000Z</published>
    <updated>2020-04-08T03:48:16.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-Snow-Ball"><a href="#What’s-Snow-Ball" class="headerlink" title="What’s Snow Ball?"></a>What’s Snow Ball?</h1><h2 id="SnowBall"><a href="#SnowBall" class="headerlink" title="SnowBall"></a>SnowBall</h2><p>Snowball is a petabyte-scale data transparent solution that uses secure appliances to transfer large amount of data into and out of AWS.</p><p>Using Snowball addresses common challenges with large-scale data transfers including high network costs, long transfer times, and security concerns.</p><p>Transferring data with SnowBall is simple, fast, secure and can be as little as one-fifth the cost of high-speed internet.</p><p>Snowball comes in either a 50TB or 80TB size. Snowball uses mutiple layers of security designed to protect your data including tamper-resistant enclosures, 256-bit encryption, and an industry-standard Trusted Platform Module (TPM) designed to ensure both security and full chain-of-custody of your data.</p><p>Once the data transfer job has been processed and verified, AWS performs a software erasure of the SnowBall appliance.</p><h2 id="SnowBall-Edge"><a href="#SnowBall-Edge" class="headerlink" title="SnowBall Edge"></a>SnowBall Edge</h2><p>AWS SnowBall Edge is a 100TB data tranfer device with on-board storage and compute capabilities. You can use SnowBall Edge to move large amounts of data into and out of AWS, as a temporary storage tier for large local datasets, or to support local workloads in remote or offline locations.</p><p>SnowBall Edge connects to your existing applicatinos and infrastructure using standard storage interfaces, streamlining the data transfer process and minimizing setup and integration.</p><p>SnowBall Edge can cluster together to form a local stroage tier and process your data on-premises, helping ensure your applications continue to run even when they are not able to access the cloud.</p><h2 id="Snowmobile"><a href="#Snowmobile" class="headerlink" title="Snowmobile"></a>Snowmobile</h2><p>AWS Snowmobile is an Exabyte-scale data transfer service used to move extremely large amounts of data to AWS. </p><p>You can transfer up to 100PB per Snowmobile, a 45-foot long ruggedized shipping container, pulled by a semi-trailer truck.</p><p>Snowmobile makes it easy to move massive volumes of data to the cloud, including video libararies, image repositories, or even a complete data center migration. Transferring data with Snowmobile is secure, fast and cot effective.</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul><li>Understand what Snowball is </li><li>Import / Export from S3 </li></ul><blockquote><p><a href="https://aws.amazon.com/tw/snowball/" target="_blank" rel="noopener">https://aws.amazon.com/tw/snowball/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-Snow-Ball&quot;&gt;&lt;a href=&quot;#What’s-Snow-Ball&quot; class=&quot;headerlink&quot; title=&quot;What’s Snow Ball?&quot;&gt;&lt;/a&gt;What’s Snow Ball?&lt;/h1&gt;&lt;h2 id=&quot;SnowBall&quot;&gt;&lt;a href=&quot;#SnowBall&quot; class=&quot;headerlink&quot; title=&quot;SnowBall&quot;&gt;&lt;/a&gt;SnowBall&lt;/h2&gt;&lt;p&gt;Snowball is a petabyte-scale data transparent solution that uses secure appliances to transfer large amount of data into and out of AWS.&lt;/p&gt;
&lt;p&gt;Using Snowball addresses common challenges with large-scale data transfers including high network costs, long transfer times, and security concerns.&lt;/p&gt;
&lt;p&gt;Transferring data with SnowBall is simple, fast, secure and can be as little as one-fifth the cost of high-speed internet.&lt;/p&gt;
&lt;p&gt;Snowball comes in either a 50TB or 80TB size. Snowball uses mutiple layers of security designed to protect your data including tamper-resistant enclosures, 256-bit encryption, and an industry-standard Trusted Platform Module (TPM) designed to ensure both security and full chain-of-custody of your data.&lt;/p&gt;
&lt;p&gt;Once the data transfer job has been processed and verified, AWS performs a software erasure of the SnowBall appliance.&lt;/p&gt;
&lt;h2 id=&quot;SnowBall-Edge&quot;&gt;&lt;a href=&quot;#SnowBall-Edge&quot; class=&quot;headerlink&quot; title=&quot;SnowBall Edge&quot;&gt;&lt;/a&gt;SnowBall Edge&lt;/h2&gt;&lt;p&gt;AWS SnowBall Edge is a 100TB data tranfer device with on-board storage and compute capabilities. You can use SnowBall Edge to move large amounts of data into and out of AWS, as a temporary storage tier for large local datasets, or to support local workloads in remote or offline locations.&lt;/p&gt;
&lt;p&gt;SnowBall Edge connects to your existing applicatinos and infrastructure using standard storage interfaces, streamlining the data transfer process and minimizing setup and integration.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="SnowBall" scheme="http://chestertang.site/tags/SnowBall/"/>
    
  </entry>
  
  <entry>
    <title>S3 CloudFront Distribution</title>
    <link href="http://chestertang.site/2020/04/05/zyx0405/"/>
    <id>http://chestertang.site/2020/04/05/zyx0405/</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2020-04-07T08:27:17.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Create-A-CloudFront-Distribution"><a href="#Create-A-CloudFront-Distribution" class="headerlink" title="Create A CloudFront Distribution"></a>Create A CloudFront Distribution</h1><h2 id="Networking-amp-Content-Delivery-CloudFront"><a href="#Networking-amp-Content-Delivery-CloudFront" class="headerlink" title="Networking &amp; Content Delivery / CloudFront"></a>Networking &amp; Content Delivery / CloudFront</h2><p>Amazon CloudFront 是快速內容交付網路 (CDN) 服務，可在支援開發人員的環境中，以低延遲和高速傳輸的方式將資料、影片、應用程式和 API 安全地交付給全球的客戶。</p><p>CloudFront 可與多種服務流暢搭配，包含使用 AWS Shield 減少 DDoS 攻擊次數、以 Amazon S3、Elastic Load Balancing 或 Amazon EC2 做為應用程式的來源，以及使用 Lambda@Edge 在更靠近客戶使用者的位置執行自訂程式碼，並自訂使用者體驗。</p><h3 id="Create-a-CloudFront-Distribution"><a href="#Create-a-CloudFront-Distribution" class="headerlink" title="Create a CloudFront Distribution"></a>Create a CloudFront Distribution</h3><p>點選 <code>Networking &amp; Content Delivery / CloudFront</code> 按鈕，可以看到 <code>CloudFront Distributions</code> 頁面，直接點選 <code>Create Distribution</code> 以建立 <code>CloudFront</code> </p><p><img src="https://i.imgur.com/hl0hNdj.png" alt="image"><br><img src="https://i.imgur.com/Dv7iVV4.png" alt="image"></p><p>總共有兩個步驟：</p><ol><li>Select delivery method</li><li>Create Distribution</li></ol><p>首先，可以選擇 <code>Web</code> 和 <code>RTMP</code> 兩種方式， <code>RTMP</code> 主要是拿來給 Media 類型來使用的 (e.g. Adobe Media)，這邊就直接以 <code>Web / Get Started</code> 來實作範例</p><p><img src="https://i.imgur.com/D8Dx1PN.png" alt="image"></p><p>還記得我們當初在 <a href="https://chestertang.site/2020/03/31/zyx0331/">S3 Cross Region Replication</a> 建立的 S3 Bucket 吧？這時候就可以選擇這個 Bucket 來測試看看</p><p>將 <code>Origin Domain Name</code> 選取要被 <code>Distribution</code> 的 Bucket，其餘選項將以預設來 <code>Create Distribution</code></p><p><img src="https://i.imgur.com/VEOJTM0.png" alt="image"></p><p>完成後大約要等待 15-30 分鐘左右，當 <code>Status</code> 變成 <code>Deployed</code> 就代表完成並且 <code>Enabled</code></p><p><img src="https://i.imgur.com/AuNEVQH.png" alt="image"></p><p>而也會取得一個 <code>Domain name</code> 即其他資訊，可以試著打開這個連結，會發現裡面的內容跟當初建立 S3 Bucket 是相同的，只是現在被 <code>Distribution</code> 到 <code>Edge Location</code> </p><blockquote><p>Domain Name：d2qxnxw978i04y.cloudfront.net</p></blockquote><p><img src="https://i.imgur.com/gyl5cD6.png" alt="image"></p><p>最後，如果在 Origin 的 Bucket 有 Upload 許多檔案的話，現在不用再輸入當初給的 S3 Bucket 連結來取得圖片，我們可以透過剛剛給的 <code>Domain Name</code> 並加上檔案名稱（如同 <a href="https://chestertang.site/2020/03/26/zyx0326/">S3 Bucket</a> ㄧ樣）就可以直接圖取到檔案啦！(e.g. <a href="http://d2qxnxw978i04y.cloudfront.net/icon.png" target="_blank" rel="noopener">http://d2qxnxw978i04y.cloudfront.net/icon.png</a>)</p><p><img src="https://i.imgur.com/IT5N0K6.png" alt="image"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Edge Location：This is the location where content will be cached. This is separate to an AWS Region/AZ.</li><li>Origin：This is the origin of  all the files that the CDN will distribute. This can be either an S3 Bucket, an EC2 Instance, an Elastic Load Balancer, or Route 53.</li><li>Distribution：This is the same given the CDN which consists of collection of Edge Locations.</li><li>Web Distribution：Typically used for Websites.</li><li>RTMP：Used for Media Streaming.</li><li>Edge locations are not just READ only - you can write to them too. (ie put an object on to them)</li><li>Objects are cached for the life of the Time To Live.</li><li>You can clear cached objects, but you will be charged.</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudFront/latest/DeveloperGuide/GettingStarted.SimpleDistribution.html" target="_blank" rel="noopener">Getting Started with a Simple CloudFront Distribution</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Create-A-CloudFront-Distribution&quot;&gt;&lt;a href=&quot;#Create-A-CloudFront-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Create A CloudFront Distribution&quot;&gt;&lt;/a&gt;Create A CloudFront Distribution&lt;/h1&gt;&lt;h2 id=&quot;Networking-amp-Content-Delivery-CloudFront&quot;&gt;&lt;a href=&quot;#Networking-amp-Content-Delivery-CloudFront&quot; class=&quot;headerlink&quot; title=&quot;Networking &amp;amp; Content Delivery / CloudFront&quot;&gt;&lt;/a&gt;Networking &amp;amp; Content Delivery / CloudFront&lt;/h2&gt;&lt;p&gt;Amazon CloudFront 是快速內容交付網路 (CDN) 服務，可在支援開發人員的環境中，以低延遲和高速傳輸的方式將資料、影片、應用程式和 API 安全地交付給全球的客戶。&lt;/p&gt;
&lt;p&gt;CloudFront 可與多種服務流暢搭配，包含使用 AWS Shield 減少 DDoS 攻擊次數、以 Amazon S3、Elastic Load Balancing 或 Amazon EC2 做為應用程式的來源，以及使用 Lambda@Edge 在更靠近客戶使用者的位置執行自訂程式碼，並自訂使用者體驗。&lt;/p&gt;
&lt;h3 id=&quot;Create-a-CloudFront-Distribution&quot;&gt;&lt;a href=&quot;#Create-a-CloudFront-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Create a CloudFront Distribution&quot;&gt;&lt;/a&gt;Create a CloudFront Distribution&lt;/h3&gt;&lt;p&gt;點選 &lt;code&gt;Networking &amp;amp; Content Delivery / CloudFront&lt;/code&gt; 按鈕，可以看到 &lt;code&gt;CloudFront Distributions&lt;/code&gt; 頁面，直接點選 &lt;code&gt;Create Distribution&lt;/code&gt; 以建立 &lt;code&gt;CloudFront&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hl0hNdj.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/Dv7iVV4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;總共有兩個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select delivery method&lt;/li&gt;
&lt;li&gt;Create Distribution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，可以選擇 &lt;code&gt;Web&lt;/code&gt; 和 &lt;code&gt;RTMP&lt;/code&gt; 兩種方式， &lt;code&gt;RTMP&lt;/code&gt; 主要是拿來給 Media 類型來使用的 (e.g. Adobe Media)，這邊就直接以 &lt;code&gt;Web / Get Started&lt;/code&gt; 來實作範例&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="CloudFront Distribution" scheme="http://chestertang.site/tags/CloudFront-Distribution/"/>
    
  </entry>
  
  <entry>
    <title>S3 Cross Region Replication</title>
    <link href="http://chestertang.site/2020/03/31/zyx0331/"/>
    <id>http://chestertang.site/2020/03/31/zyx0331/</id>
    <published>2020-03-31T07:00:00.000Z</published>
    <updated>2020-04-04T10:37:26.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="S3-Cross-Region-Replication-LAB"><a href="#S3-Cross-Region-Replication-LAB" class="headerlink" title="S3 Cross Region Replication - LAB"></a>S3 Cross Region Replication - LAB</h1><h2 id="S3-Cross-Region-Replication"><a href="#S3-Cross-Region-Replication" class="headerlink" title="S3 Cross Region Replication"></a>S3 Cross Region Replication</h2><p>這篇將介紹如果要複製一個 S3 bucket ，不只複製現在部分，而且在被複製的 bucket 上如果 <code>Upload</code> 新的檔案，複製的 bucket 也有一樣的效果該如何實作？此外還有一些預設該知道的觀念。</p><p>以下將用 <a href="https://chestertang.site/2020/03/27/zyx0327/">Versioning</a> 建立的 S3 Bucket 繼續實作這篇的，如果裡面的概念忘記或者不熟可以先回去看看</p><p>首先，先點選我們當初建立的 <code>chestertang1231-versiontest</code> 的 bucket</p><p><img src="https://i.imgur.com/dY6p2Uu.png" alt="IMAGE"></p><p>點選 <code>Management</code> 按鈕後，可以看到 <code>Replication</code> 中有 <code>Add rule</code> 建立複寫的規則，這邊還沒有建立過，所以就來直接建一個吧！</p><p><img src="https://i.imgur.com/sj5VzM8.png" alt="IMAGE"></p><p>Replication rule 的 Set source 的部分中，我們直接將整個 bucket 都選取</p><p><img src="https://i.imgur.com/KqslMWe.png" alt="IMAGE"></p><p>建立一個新的 bucket</p><p><img src="https://i.imgur.com/OLS2oDP.png" alt="IMAGE"></p><p>取一個 S3 bucket 的名字，可以有個開頭方便好知道這個是現在這個 bucket 的副本</p><p><img src="https://i.imgur.com/rnOQnR6.png" alt="IMAGE"></p><p>最後只要再給這個 <code>Rule name</code> 取一個名字，就完成啦！</p><p><img src="https://i.imgur.com/EmnyWRx.png" alt="IMAGE"></p><p>可以看到完成後，這個 <code>Bucket</code> 裡面可以知道你剛剛建立的複製的 <code>Bucket</code>，明細大致上就是跟上面再建立 <code>Replication rule</code> 的明細是相同的</p><p><img src="https://i.imgur.com/lmbRr8L.png" alt="IMAGE"></p><p>此外，在 S3 裡面也會多出一個新的 bucket 出來，不只如此，可以試試看在原本被複製的 bucket <code>chestertang1231-versiontest</code> 中 <code>Upload</code> 檔案可以看看複製出來的 <code>chesterdercrossregionreplication</code> 的 bucket 會有什麼變化？</p><p><img src="https://i.imgur.com/HNqAZQ0.png" alt="IMAGE"></p><blockquote><ol><li>新建立出來的 <code>chesterdercrossregionreplication</code> bucket 是空的，就算被複製的 bucket 有 file 也不會複寫過來 </li><li>在被複製的 bucket 中刪除 Object、Version 都不會覆寫到複製的 <code>chesterdercrossregionreplication</code> bucket</li></ol></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Versioning must be enabled on both the source and destination buckets</li><li>Files in an existing bucket are not replication automatically</li><li>All subsequent updated files will be replication automatically</li><li>Delete markers are not replicated</li><li>Deleting individual versions or delete markers will noe be replicated</li><li>Understand what Cross Region Replication is at a high level</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/zh_tw/AmazonS3/latest/user-guide/enable-replication.html" target="_blank" rel="noopener">How Do I Add a Replication Rule to an S3 Bucket?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;S3-Cross-Region-Replication-LAB&quot;&gt;&lt;a href=&quot;#S3-Cross-Region-Replication-LAB&quot; class=&quot;headerlink&quot; title=&quot;S3 Cross Region Replication - LAB&quot;&gt;&lt;/a&gt;S3 Cross Region Replication - LAB&lt;/h1&gt;&lt;h2 id=&quot;S3-Cross-Region-Replication&quot;&gt;&lt;a href=&quot;#S3-Cross-Region-Replication&quot; class=&quot;headerlink&quot; title=&quot;S3 Cross Region Replication&quot;&gt;&lt;/a&gt;S3 Cross Region Replication&lt;/h2&gt;&lt;p&gt;這篇將介紹如果要複製一個 S3 bucket ，不只複製現在部分，而且在被複製的 bucket 上如果 &lt;code&gt;Upload&lt;/code&gt; 新的檔案，複製的 bucket 也有一樣的效果該如何實作？此外還有一些預設該知道的觀念。&lt;/p&gt;
&lt;p&gt;以下將用 &lt;a href=&quot;https://chestertang.site/2020/03/27/zyx0327/&quot;&gt;Versioning&lt;/a&gt; 建立的 S3 Bucket 繼續實作這篇的，如果裡面的概念忘記或者不熟可以先回去看看&lt;/p&gt;
&lt;p&gt;首先，先點選我們當初建立的 &lt;code&gt;chestertang1231-versiontest&lt;/code&gt; 的 bucket&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dY6p2Uu.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;點選 &lt;code&gt;Management&lt;/code&gt; 按鈕後，可以看到 &lt;code&gt;Replication&lt;/code&gt; 中有 &lt;code&gt;Add rule&lt;/code&gt; 建立複寫的規則，這邊還沒有建立過，所以就來直接建一個吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sj5VzM8.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;Replication rule 的 Set source 的部分中，我們直接將整個 bucket 都選取&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KqslMWe.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Cross Region Replication" scheme="http://chestertang.site/tags/S3-Cross-Region-Replication/"/>
    
  </entry>
  
  <entry>
    <title>S3 Cross-Account Access</title>
    <link href="http://chestertang.site/2020/03/30/zyx0330/"/>
    <id>http://chestertang.site/2020/03/30/zyx0330/</id>
    <published>2020-03-30T04:00:00.000Z</published>
    <updated>2020-07-19T14:43:34.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-Organizations"><a href="#AWS-Organizations" class="headerlink" title="AWS Organizations"></a>AWS Organizations</h1><p>這篇首先前半段是跟 S3 比較沒有直接相關的部分，不過因為為了後面要分享 S3 權限給其他帳號，所以必須先設定 Organization 才有辦法完成。</p><p>另外文中的主帳號為 <code>m0761005</code>，分享的帳號為 <code>chester.tang</code> 這隻帳號（寫在前頭方便觀看這篇圖例中現在的角色關係）</p><p>首先，要分享權限給其他人，可以透過兩種方式進入到 <code>AWS Organizations</code>:</p><ol><li>點選右上方帳號 <code>My Organization</code></li><li><code>Management &amp; Governance / AWS Organizations</code></li></ol><p>進入到頁面後，點選 <code>Create organization</code> 按鈕來建立組織吧！ </p><p><img src="https://i.imgur.com/lLIbo7V.png" alt="IMAGE"></p><p>完成後可以看到，目前的使用者前面有個星號，而我們要透過點選 <code>Add account</code> 來新增使用者</p><p><img src="https://i.imgur.com/xMMNQfl.png" alt="IMAGE"></p><p>選擇要 <code>Invite account</code> 按鈕，並輸入 Email 帳戶或 <code>account ID</code> 來寄送邀請 Mail</p><p><img src="https://i.imgur.com/Nb0jBk0.png" alt="IMAGE"></p><p>收到信件後，切換帳號到剛剛寄送的 AWS 帳號，並 <code>Accept</code> 邀請後就可以加入了！</p><p><img src="https://i.imgur.com/h2PkXnr.png" alt="IMAGE"></p><p>然後裡面就會出現現在擁有的成員～</p><p><img src="https://i.imgur.com/N1PwEGx.png" alt="IMAGE"></p><hr><h1 id="Lab-Sharing-S3-Buckets-Across-Accounts"><a href="#Lab-Sharing-S3-Buckets-Across-Accounts" class="headerlink" title="Lab - Sharing S3 Buckets Across Accounts"></a>Lab - Sharing S3 Buckets Across Accounts</h1><h2 id="3-differents-ways-to-share-S3-buckets-across-accounts"><a href="#3-differents-ways-to-share-S3-buckets-across-accounts" class="headerlink" title="3 differents ways to share S3 buckets across accounts"></a>3 differents ways to share S3 buckets across accounts</h2><ul><li>Using Bucket Policies &amp; IAM (applies across the entire bucket). Programmatic Access Only.</li><li>Using Bucket ACLs &amp; IAM (individual objects). Programmatic Access Only.</li><li>Cross-Account IAM Roles. Programmatic AND Console access.</li></ul><h3 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h3><p>完成上述的 AWS Organizations 之後，可以看到目前組織的畫面，接下來我們來 <code>Cross-Account Access</code> 給其他帳戶</p><p><img src="https://i.imgur.com/N1PwEGx.png" alt="IMAGE"></p><p>在 <code>Sharing S3 Buckets Across Accounts</code> 給其他帳號之前，我們先來了解一下整個的流程，如果底下內容有點忘記是什麼了可以參考之前的這篇文章 <a href="https://chestertang.site/2020/03/24/zyx0324/">IAM</a>，流程大致如下： </p><ul><li><code>m0761005</code> 帳號需要建立一個 <code>Roles</code> (輸入要給權限的 AWS Account ID)，並且選取擁有的 <code>Policy</code> (e.g. AmazonS3FullAccess)，完成後會有個專屬連結來給分享的帳號做登入</li><li><code>chester.tang</code> 帳號需要建立一個 <code>Users</code> 來切換身份來知道我現在登入的是 <code>m0761005</code> 開出來的登入權限，因此選取擁有的 <code>Policy</code> (e.g. AdminstrationAccess)，使得帳號可以 <code>Switch Role</code></li></ul><p>首先，在 <code>m0761005</code> 帳戶的 <code>IAM</code> 中先建立 <code>Roles</code></p><p><img src="https://i.imgur.com/sqpHNfr.png" alt="IMAGE"></p><p>因為是要分享給另一個帳號，所以選取 <code>Another AWS account</code> 來 <code>Create role</code>，不過首先要知道另一個帳號的 Account ID 才有辦法進行</p><p><img src="https://i.imgur.com/WMS4V7j.png" alt="IMAGE"></p><p>這個部分應該就滿好懂的，我給這個帳戶要開啟什麼權限，能做什麼操作，都可以透過 <code>policy</code> 來達成，這邊就直接以 S3 ( <code>AmazonS3FullAccess</code> ) 來做範例</p><p><img src="https://i.imgur.com/eGzX6TY.png" alt="IMAGE"></p><p>今天我們分享這個權限給其他人不會每次都需要上面的步驟，我們可以設定一個 <code>Role name</code> 專門在分享某一個權限給特定的人，這樣就不用一直選取要給的權限。</p><p>好比我現在想分享 S3 的權限給我的同事們，我就直接把這個 <code>Role name</code> 叫做 <code>S3_Cross_Account_Access</code> 直接清楚明瞭，也方便之後知道這個 <code>Role</code> 裡面擁有的 <code>Policy</code> 是什麼…</p><p><img src="https://i.imgur.com/waiqGGj.png" alt="IMAGE"></p><p>到這個步驟就完成了上述流程的一半步驟，我們 <code>m0761005</code> 帳戶就有可以給其他帳戶 <code>S3</code> 權限的 <code>Role</code></p><p><img src="https://i.imgur.com/MAOQeDK.png" alt="IMAGE"></p><blockquote><p>圖中的 <code>Give this link to users who can switch roles in the console</code> 此段後的連結可以先存起來，此段為其他帳號要 <code>Switch Roles</code> 的連結</p></blockquote><p>接下來，我們來切換帳戶到 <code>Chester.tang</code>。如果上段的 <code>AWS Organizations</code> 有完成的話，會看到目前帳號的是在哪個 <code>Organizations</code> 下，並且會有個 ID</p><p><img src="https://i.imgur.com/eAfqYF4.png" alt="IMAGE"></p><p><code>Chester.tang</code> 的帳戶中，如上述的流程，我們先要來建立一個 <code>Users</code> 來跟 <code>m0761005</code> 連結，並且方便我們切換角色</p><p><img src="https://i.imgur.com/cDdQB7Z.png" alt="IMAGE"></p><p>點選 <code>Add user</code> 後，首先先取一個 <code>User name</code> 的名字（記住這個名字將會是日後登入 AWS 的帳戶名稱），並且自己設定密碼</p><p><img src="https://i.imgur.com/dx3tuG5.png" alt="IMAGE"></p><p>當然地，這邊擁有的 <code>Policy</code> 就是登入了～跟之前 <code>m0761005</code> 在建立 <code>Roles</code> 是相同的</p><p><img src="https://i.imgur.com/IgALPgm.png" alt="IMAGE"></p><p>完成後可以再次確認一下前面所選取的項目</p><p><img src="https://i.imgur.com/d5TAtBm.png" alt="IMAGE"></p><p>到這邊完成後，我們就登出並再登入剛剛建立的帳戶名稱，這時候就會看到有 <code>Switch Roles</code> 的按鈕可以選取，然後來設定 <code>Role</code></p><p><img src="https://i.imgur.com/0LwDZSC.png" alt="IMAGE"></p><blockquote><p>還記得在 <code>m0761005</code> 在建立 <code>Roles</code> 的時候有的 <code>Give this link to users who can switch roles in the console</code> 後存起來的連結嗎？這邊也可以直接貼那段連結就會挑轉到這個頁面了</p></blockquote><p><img src="https://i.imgur.com/8mULcNq.png" alt="IMAGE"></p><p>完成後，就可以看到目前的 <code>Role</code> 並且還有其他資訊</p><p><img src="https://i.imgur.com/KR9Px3x.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Always enable multi-factor authentication on root account </li><li>Always using a strong and complex password on root account</li><li>Paying account should be used for billing purposes only. Do not deploy resources into the paying payment.</li><li>Enable/Disable AWS services using Service Control Policies(SCP) either on OU or on individual accounts.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AWS-Organizations&quot;&gt;&lt;a href=&quot;#AWS-Organizations&quot; class=&quot;headerlink&quot; title=&quot;AWS Organizations&quot;&gt;&lt;/a&gt;AWS Organizations&lt;/h1&gt;&lt;p&gt;這篇首先前半段是跟 S3 比較沒有直接相關的部分，不過因為為了後面要分享 S3 權限給其他帳號，所以必須先設定 Organization 才有辦法完成。&lt;/p&gt;
&lt;p&gt;另外文中的主帳號為 &lt;code&gt;m0761005&lt;/code&gt;，分享的帳號為 &lt;code&gt;chester.tang&lt;/code&gt; 這隻帳號（寫在前頭方便觀看這篇圖例中現在的角色關係）&lt;/p&gt;
&lt;p&gt;首先，要分享權限給其他人，可以透過兩種方式進入到 &lt;code&gt;AWS Organizations&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;點選右上方帳號 &lt;code&gt;My Organization&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Management &amp;amp; Governance / AWS Organizations&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;進入到頁面後，點選 &lt;code&gt;Create organization&lt;/code&gt; 按鈕來建立組織吧！ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lLIbo7V.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成後可以看到，目前的使用者前面有個星號，而我們要透過點選 &lt;code&gt;Add account&lt;/code&gt; 來新增使用者&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xMMNQfl.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;選擇要 &lt;code&gt;Invite account&lt;/code&gt; 按鈕，並輸入 Email 帳戶或 &lt;code&gt;account ID&lt;/code&gt; 來寄送邀請 Mail&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Cross-Account Access" scheme="http://chestertang.site/tags/S3-Cross-Account-Access/"/>
    
  </entry>
  
  <entry>
    <title>S3 Lifecycle Management</title>
    <link href="http://chestertang.site/2020/03/28/zyx0328/"/>
    <id>http://chestertang.site/2020/03/28/zyx0328/</id>
    <published>2020-03-28T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:12.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lifecycle-Management"><a href="#Lifecycle-Management" class="headerlink" title="Lifecycle Management"></a>Lifecycle Management</h1><p>Lifecycle Management 定義物件存留期間，S3 所要採取的動作 ( e.g. 將物件轉換成另一個 Stroage Classes、archive Object，或在指定期限後刪除)。</p><p>啟用了 Versioning 的 S3 Bucket 中，同一個物件可有多個 Version，包括 Current version、Previous version，而 Lifecycle Management 就是在定義 Current version、Previous version 的動作。</p><h2 id="建立-Lifecycle-Management"><a href="#建立-Lifecycle-Management" class="headerlink" title="建立 Lifecycle Management"></a>建立 Lifecycle Management</h2><ol><li>選擇你現在要設定 Lifecycle Management 的 S3 Bucket（ <a href="https://console.aws.amazon.com/s3" target="_blank" rel="noopener">https://console.aws.amazon.com/s3</a> ）</li><li>點選 <code>Management</code> 按鈕後，來新增 <code>Add lifecycle rule</code> 訂定一個規則</li></ol><p><img src="https://i.imgur.com/Grj9B9v.png" alt="IMAGE"></p><ol start="3"><li>輸入 rule name 以及看是否要有個 Prefix（前綴）、Tag（標籤）來幫助分類，如果不需要的話，直接選取 <code>Apply to all objects in the bucket</code> 即可</li></ol><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys</a></p></blockquote><p><img src="https://i.imgur.com/Grj9B9v.png" alt="IMAGE"></p><ol start="4"><li>可以同時為 Current version、Previous version 定義 transition（以兩者都定義為範例）</li></ol><ul><li>選擇在 <code>30</code> 天後，將 Upload 的 Object 轉為 <code>Standard-IA</code></li><li>選擇在 <code>60</code> 天後，將 Upload 的 Object 轉為 <code>Glacier</code></li></ul><blockquote><p>Glacier: <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html</a></p></blockquote><p><img src="https://i.imgur.com/rbAIld4.png" alt="IMAGE"></p><ol start="5"><li>接下來設定一些 <code>Expiration</code> 的問題</li></ol><ul><li>選取 <code>Expire current version of object</code>，然後輸入在自 Object Uploaad 的 <code>425</code> 天後，刪除該 Object。如果有選擇此選項，則無法選擇下方的 <code>Clean up expired object delete marker</code> 的選項。</li><li>選取 <code>Permanently delete previous versions</code>，然後輸入自 Object 成為舊版 version 的 <code>425</code> 天後要永久刪除該 Object。</li><li>Clean up incomplete multipart uploads (清除未完成的分段上傳) 在一般來說都建議選取。例如，可以設定要在啟動分段上傳的 <code>7</code> 天後，結束並清除所有未完成的上傳。</li></ul><p><img src="https://i.imgur.com/ftgqnrl.png" alt="IMAGE"></p><ol start="6"><li>最後，稍微看一下自己的設定，就完成 <code>Lifecycle Management</code> 了～</li></ol><p><img src="https://i.imgur.com/G8cOfLZ.png" alt="IMAGE"></p><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-lifecycle.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-lifecycle.html</a></p></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Automates moving your objects between the different storage tiers.</li><li>Can be used in conjunction with versioning.</li><li>Can be applied to current versions and previous versions.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lifecycle-Management&quot;&gt;&lt;a href=&quot;#Lifecycle-Management&quot; class=&quot;headerlink&quot; title=&quot;Lifecycle Management&quot;&gt;&lt;/a&gt;Lifecycle Management&lt;/h1&gt;&lt;p&gt;Lifecycle Management 定義物件存留期間，S3 所要採取的動作 ( e.g. 將物件轉換成另一個 Stroage Classes、archive Object，或在指定期限後刪除)。&lt;/p&gt;
&lt;p&gt;啟用了 Versioning 的 S3 Bucket 中，同一個物件可有多個 Version，包括 Current version、Previous version，而 Lifecycle Management 就是在定義 Current version、Previous version 的動作。&lt;/p&gt;
&lt;h2 id=&quot;建立-Lifecycle-Management&quot;&gt;&lt;a href=&quot;#建立-Lifecycle-Management&quot; class=&quot;headerlink&quot; title=&quot;建立 Lifecycle Management&quot;&gt;&lt;/a&gt;建立 Lifecycle Management&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;選擇你現在要設定 Lifecycle Management 的 S3 Bucket（ &lt;a href=&quot;https://console.aws.amazon.com/s3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://console.aws.amazon.com/s3&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;點選 &lt;code&gt;Management&lt;/code&gt; 按鈕後，來新增 &lt;code&gt;Add lifecycle rule&lt;/code&gt; 訂定一個規則&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Grj9B9v.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;輸入 rule name 以及看是否要有個 Prefix（前綴）、Tag（標籤）來幫助分類，如果不需要的話，直接選取 &lt;code&gt;Apply to all objects in the bucket&lt;/code&gt; 即可&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Grj9B9v.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;可以同時為 Current version、Previous version 定義 transition（以兩者都定義為範例）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Lifecycle Management" scheme="http://chestertang.site/tags/S3-Lifecycle-Management/"/>
    
  </entry>
  
  <entry>
    <title>S3 Versioning</title>
    <link href="http://chestertang.site/2020/03/27/zyx0327/"/>
    <id>http://chestertang.site/2020/03/27/zyx0327/</id>
    <published>2020-03-27T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:07.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="S3-Versioning"><a href="#S3-Versioning" class="headerlink" title="S3 Versioning"></a>S3 Versioning</h1><h2 id="Using-Versioning-with-S3"><a href="#Using-Versioning-with-S3" class="headerlink" title="Using Versioning with S3"></a>Using Versioning with S3</h2><ul><li>Stores all versions of an object. (including all writes and even if you delete an object)</li><li>Great backup tool.</li><li>Once enabled, Versioning cannot be disabled, only suspended.</li><li>Intergrate with Lifecycle rules.</li><li>Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.</li></ul><h2 id="建立-S3-Bucket-Versioning"><a href="#建立-S3-Bucket-Versioning" class="headerlink" title="建立 S3 Bucket Versioning"></a>建立 S3 Bucket Versioning</h2><p>先建立一個新的 S3 Bucket，如果有遺忘的部分可以參考上篇 <a href="https://chestertang.site/2020/03/26/zyx0326/">AWS - S3 Bucket + Encryption</a> 的部分，可先設成 <code>Public</code>！</p><p><img src="https://i.imgur.com/hjqqtQx.png" alt="IMAGE"></p><p>再來上傳第一版本的檔案吧！（這邊以 txt 檔來做範例，記得也設定成 Public 才可以看到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi, chesterTang!</span><br><span class="line"></span><br><span class="line">This is version 1</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IT1sJ83.png" alt="IMAGE"></p><p>完成基本的上傳與設定後，我們要來開啟 <code>Versioning</code> 的功能，點選 <code>Properties</code> 可以看到 <code>Versioning</code> 的框框，這時只要選取到 <code>Enable versioning</code> 並且 <code>Save</code> 就可以開啟。</p><p><img src="https://i.imgur.com/vJMujX2.png" alt="IMAGE"></p><p>將原本上傳的檔案把內容稍微更動一下並且再次上傳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi, chesterTang!</span><br><span class="line"></span><br><span class="line">!!! Oh !!! This is version 2 !!! Oh !!!</span><br></pre></td></tr></table></figure><p>或許剛剛上傳錯檔案想要刪除，結果就發現 Bucket 裡面的 files 都不見了？明明還有上個版本、上上個版本呀？</p><p><img src="https://i.imgur.com/9bxvWJz.png" alt="IMAGE"><br><img src="https://i.imgur.com/8ZsoWFZ.png" alt="IMAGE"></p><p>眼尖的你應該其實就已經發現兩個問題：</p><ol><li>在上述開啟 <code>Versioning</code> 的時候，S3 Bucket 裡面就有多出 <code>Versions Hide/Show</code> 的按鈕</li><li>更改內容再次上傳檔案後或者刪除，txt 檔案真的文字更動了，但是上個版本、上上個版本跑去哪裡了呢？</li></ol><blockquote><p>把 Versions Show 打開，就能看見到底做了什麼！</p></blockquote><p><img src="https://i.imgur.com/uEjjg9I.png" alt="IMAGE"></p><p>可以發現剛剛的刪除，其實不是真正的刪除，居然有一個版本是在做刪除這件事情把它蓋過去。</p><blockquote><p>所以這邊又衍生出了一個新議題，如果我真的想退回上個版本該怎麼做才能達成？</p></blockquote><p>必須在 <code>Versions Show</code> 的狀況下，做 <code>Actions</code> 才能達成退版本的效果，不然只是又新增另一個版本上去而已！</p><p><img src="https://i.imgur.com/6sXMAWz.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Stores all versions of an object. (including all writes and even if you delete an object)</li><li>Once enabled, Versioning cannot be disabled, only suspended.</li><li>Intergrate with Lifecycle rules.</li><li>Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;S3-Versioning&quot;&gt;&lt;a href=&quot;#S3-Versioning&quot; class=&quot;headerlink&quot; title=&quot;S3 Versioning&quot;&gt;&lt;/a&gt;S3 Versioning&lt;/h1&gt;&lt;h2 id=&quot;Using-Versioning-with-S3&quot;&gt;&lt;a href=&quot;#Using-Versioning-with-S3&quot; class=&quot;headerlink&quot; title=&quot;Using Versioning with S3&quot;&gt;&lt;/a&gt;Using Versioning with S3&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stores all versions of an object. (including all writes and even if you delete an object)&lt;/li&gt;
&lt;li&gt;Great backup tool.&lt;/li&gt;
&lt;li&gt;Once enabled, Versioning cannot be disabled, only suspended.&lt;/li&gt;
&lt;li&gt;Intergrate with Lifecycle rules.&lt;/li&gt;
&lt;li&gt;Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;建立-S3-Bucket-Versioning&quot;&gt;&lt;a href=&quot;#建立-S3-Bucket-Versioning&quot; class=&quot;headerlink&quot; title=&quot;建立 S3 Bucket Versioning&quot;&gt;&lt;/a&gt;建立 S3 Bucket Versioning&lt;/h2&gt;&lt;p&gt;先建立一個新的 S3 Bucket，如果有遺忘的部分可以參考上篇 &lt;a href=&quot;https://chestertang.site/2020/03/26/zyx0326/&quot;&gt;AWS - S3 Bucket + Encryption&lt;/a&gt; 的部分，可先設成 &lt;code&gt;Public&lt;/code&gt;！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hjqqtQx.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;再來上傳第一版本的檔案吧！（這邊以 txt 檔來做範例，記得也設定成 Public 才可以看到）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hi, chesterTang!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is version 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IT1sJ83.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成基本的上傳與設定後，我們要來開啟 &lt;code&gt;Versioning&lt;/code&gt; 的功能，點選 &lt;code&gt;Properties&lt;/code&gt; 可以看到 &lt;code&gt;Versioning&lt;/code&gt; 的框框，這時只要選取到 &lt;code&gt;Enable versioning&lt;/code&gt; 並且 &lt;code&gt;Save&lt;/code&gt; 就可以開啟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Versioning" scheme="http://chestertang.site/tags/S3-Versioning/"/>
    
  </entry>
  
  <entry>
    <title>S3 Bucket + Encryption</title>
    <link href="http://chestertang.site/2020/03/26/zyx0326/"/>
    <id>http://chestertang.site/2020/03/26/zyx0326/</id>
    <published>2020-03-26T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:03.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storage-S3"><a href="#Storage-S3" class="headerlink" title="Storage / S3"></a>Storage / S3</h1><h2 id="S3-Objects-stroage-是什麼？"><a href="#S3-Objects-stroage-是什麼？" class="headerlink" title="S3 (Objects stroage) 是什麼？"></a>S3 (Objects stroage) 是什麼？</h2><ul><li>S3 is a safe place to store your files by objects.</li><li>It is Object-based stroage.</li><li>The data is spread across mutiple devices and mutiple facilities.</li></ul><h2 id="The-Basics-基礎"><a href="#The-Basics-基礎" class="headerlink" title="The Basics 基礎"></a>The Basics 基礎</h2><ul><li>S3 is Object-based - i.e. allows you to upload files.</li><li>Files can be from 0 byte to 5TB.</li><li>There is un unlimited stroage.</li><li>Files are stored in Buckets (folder).</li><li>S3 is a univeral namespace. That is, names must be unique globally.</li><li>Upload file to S3, if success will receive HTTP 200 code.</li></ul><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>S3 is Object based. Think of Objects just as files.</p><ul><li>Key (This is simply the name of object)</li><li>Value (This is simply the data and is made up of a sequence of bytes).</li><li>Varsion ID (Important for versioning)</li><li>Metadata (Data about data you are storing)</li><li>Subresources<ul><li>Access Control Lists(ACL)</li><li>Torrent</li></ul></li></ul><blockquote><p>(<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html</a>)</p></blockquote><h2 id="S3-如何儲存資料"><a href="#S3-如何儲存資料" class="headerlink" title="S3 如何儲存資料?"></a>S3 如何儲存資料?</h2><ul><li>Read after Write consistency for PUTS of new objects</li><li>Eventual Consistency for overwrite PUTS and DELETES (will take some time to propagate)</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/redshift/latest/dg/managing-data-consistency.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/redshift/latest/dg/managing-data-consistency.html</a></p></blockquote><h2 id="S3-Guarantees"><a href="#S3-Guarantees" class="headerlink" title="S3 Guarantees"></a>S3 Guarantees</h2><ul><li>Built for 99.99% availability for the S3 platform.</li><li>Amazon guarantee 99.99% availability.</li><li>Amazon guarantee 99.999999999% durability for S3 information (11 * 9’s).</li></ul><blockquote><p><a href="https://aws.amazon.com/tw/s3/faqs/" target="_blank" rel="noopener">https://aws.amazon.com/tw/s3/faqs/</a></p></blockquote><h2 id="S3-Feature"><a href="#S3-Feature" class="headerlink" title="S3 Feature"></a>S3 Feature</h2><ul><li>Tiered Stroage Available</li><li>Lifecycle Management</li><li>Versioning</li><li>Encryption</li><li>MFA delete</li><li>Secure your data using Access Control Lists and Buckets Policies</li></ul><blockquote><p><a href="https://www.amazonaws.cn/en/s3/features/" target="_blank" rel="noopener">https://www.amazonaws.cn/en/s3/features/</a></p></blockquote><hr><h1 id="建立-S3-Bucket"><a href="#建立-S3-Bucket" class="headerlink" title="建立 S3 Bucket"></a>建立 S3 Bucket</h1><ol><li>點選 <code>Stroage / S3</code> 後，可以看到 <code>Amazon S3</code> 的頁面，如果是還沒有建立過 <code>buckets</code> 的帳戶，會顯示 <code>No buckets, You don’t have any buckets</code>。</li></ol><p><img src="https://i.imgur.com/Y0Laeug.png" alt="IMAGE"></p><ol start="2"><li>再來點選 <code>Create Bucket</code> 來建立，記得前面 Basics 所提的 <code>S3 is a univeral namespace. That is, names must be unique globally.</code>：Buckets 的名字不能與任何一個 Buckets 有重複的名稱，如果這邊也人先取過了，那必須要換一個名稱才行，之後就可以建立完成 S3 Bucket。</li></ol><p><img src="https://i.imgur.com/LS838w6.png" alt="IMAGE"></p><ol start="3"><li>建立完成後，可以看到我們現在的 Bucket 還是空的，所以來 Upload 一些檔案上去吧！</li></ol><p><img src="https://i.imgur.com/G162wFZ.png" alt="IMAGE"></p><p>當完成上傳後，伺服器會回傳 200 給使用者 (Basic)，這時就可以選取想看的檔案名稱，來看檔案內容。其中值得注意的有以下兩點：</p><ul><li>可以看到 <code>Key</code> 的名字與檔案的名稱是相同的。</li><li>從 <code>Object URL    https://chestertang1231.s3.amazonaws.com/Chester.jpg</code> 這段可以看出這張照片現在的 <code>domain name</code>，這也是為什麼上述 <code>Bucket name</code> 不能相同的原因</li></ul><p><img src="https://i.imgur.com/EjrjTBL.png" alt="IMAGE"></p><blockquote><p>有沒有點進去連結想看照片，結果什麼都沒有呢？（沒錯，因為少了點設定…</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This XML file does not appear to have any style information associated with it. The document tree is shown below.</span><br><span class="line"><span class="tag">&lt;<span class="name">Error</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Code</span>&gt;</span>AccessDenied<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Message</span>&gt;</span>Access Denied<span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RequestId</span>&gt;</span>3436A43898A832D2<span class="tag">&lt;/<span class="name">RequestId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HostId</span>&gt;</span></span><br><span class="line">    ajZsWrnWWZJVaby4VOG0/Sgv2+bsOOq9Z9y+iNKscFNvMYI8RIklkCVh4U0le4KN1sDR9b7D/9I=</span><br><span class="line">    <span class="tag">&lt;/<span class="name">HostId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Error</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>點選 <code>Actions</code> 按鈕來對這張被選取的照片進行其他動作，但是會發現 <code>Make Public</code> 顯示灰色不給你點選，原因是你現在的 <code>S3</code> 在一開始是設定為不公開的（上述 Create Bucket 步驟中的 <code>Block all public setting</code>），因此這張照片也無法被公開！</li></ol><p><img src="https://i.imgur.com/DffECB6.png" alt="IMAGE"></p><ol start="5"><li>點選 <code>Permissions</code> 按鈕可以看到 <code>Block public access</code> 的一些設定內容，這跟當初在 <code>Create Bucket</code> 時是相同的，因此只要選取右方的 <code>Edit</code> 按鈕並把 <code>Block all public access</code> 反勾選在 <code>Save</code> 起來就可以！（會要你確定嗎？confirm，只需打上 comfirm 即可）</li></ol><p><img src="https://i.imgur.com/cYMsbPt.png" alt="IMAGE"></p><ol start="6"><li>完成後再點選 <code>Actions</code> 按鈕，把它設定為 <code>Make Public</code> 就可以進去剛剛的連結啦！</li></ol><blockquote><p>補充 &gt; 可以選擇檔案放在哪種 Storage Classes 的儲存空間：<a href="https://docs.aws.amazon.com/zh_tw/AmazonS3/latest/dev/storage-class-intro.html" target="_blank" rel="noopener">S3 Stroage Classes</a></p></blockquote><hr><h1 id="Security-And-Encryption"><a href="#Security-And-Encryption" class="headerlink" title="Security And Encryption"></a>Security And Encryption</h1><h2 id="The-Basics-基礎-1"><a href="#The-Basics-基礎-1" class="headerlink" title="The Basics 基礎"></a>The Basics 基礎</h2><p>Amazon S3 預設加密提供一種為 Amazon S3 儲存貯體設定預設加密行為的方式。可以在儲存貯體上設定預設加密，讓所有物件在存放於儲存貯體中時維持加密狀態。這些物件的加密，是使用伺服器端加密搭配 Amazon S3 受管金鑰 (SSE-S3) 或 AWS Key Management Service (AWS KMS) 客戶主金鑰 (CMK)。</p><p>所有新建立的 buckets 都是 PRIVATE 的，可以透過以下兩種方式來控制權限：</p><ul><li>Bucket Policies</li><li>Access Control Lists</li></ul><p>Encryptions In Transit is achieved by </p><ul><li>SSL / TLS</li></ul><h3 id="Encryptions-At-Rest-Server-side-is-achieved-by"><a href="#Encryptions-At-Rest-Server-side-is-achieved-by" class="headerlink" title="Encryptions At Rest (Server side) is achieved by"></a>Encryptions At Rest (Server side) is achieved by</h3><ul><li>S3 Managed Keys - SSE-S3</li><li>AWS Key Management Service, Managed Keys - SSE-KMS</li><li>Server Side Encryption with Customer Provided Keys - SSE-C</li></ul><h3 id="Client-Side-Encryption"><a href="#Client-Side-Encryption" class="headerlink" title="Client Side Encryption"></a>Client Side Encryption</h3><h1 id="Encryption-加密"><a href="#Encryption-加密" class="headerlink" title="Encryption 加密"></a>Encryption 加密</h1><ol><li>ㄧ樣來對我們剛剛 Upload 的圖片來做加密的動作，從 <code>Properties</code> 可以看到目前的 <code>Encryption</code> 是沒有加密過的，只要點選 <code>Encryption</code> 就能更改目前的狀態。</li></ol><p><img src="https://i.imgur.com/fAe8RhL.png" alt="IMAGE"></p><ol start="2"><li>這邊可以選擇：(1)AES-256、(2)AWS-KMS 兩種方式（以下就直接以(1)的方式來加密）</li></ol><p><img src="https://i.imgur.com/ILSOWaP.png" alt="IMAGE"></p><ol start="3"><li>點選 <code>Save</code> 按鈕後，就完成了加密啦！</li></ol><p><img src="https://i.imgur.com/bUsi3eS.png" alt="IMAGE"></p><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html</a></p></blockquote><h2 id="Default-Encryption-加密"><a href="#Default-Encryption-加密" class="headerlink" title="Default Encryption 加密"></a>Default Encryption 加密</h2><p>除了單張照片加密之外，也可以預設加密的方法，其實與上述都大同小異，可以點選 <code>Properties</code> 的 <code>Default Encryption</code> 然後選取 <code>AES-256</code> 也就完成。</p><p><img src="https://i.imgur.com/zuRt4H6.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Simple creating of S3 Bucket and Permissions of the Block public access</li><li>Buckets are a universal name space</li><li>Upload an object to S3 receive a HTTP 200 Code</li><li>S3, S3-IA, S3-IA (One Zone), Glacier</li><li>Control access to buckets using either a bucket ACL or using Bucket Polices</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Storage-S3&quot;&gt;&lt;a href=&quot;#Storage-S3&quot; class=&quot;headerlink&quot; title=&quot;Storage / S3&quot;&gt;&lt;/a&gt;Storage / S3&lt;/h1&gt;&lt;h2 id=&quot;S3-Objects-stroage-是什麼？&quot;&gt;&lt;a href=&quot;#S3-Objects-stroage-是什麼？&quot; class=&quot;headerlink&quot; title=&quot;S3 (Objects stroage) 是什麼？&quot;&gt;&lt;/a&gt;S3 (Objects stroage) 是什麼？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;S3 is a safe place to store your files by objects.&lt;/li&gt;
&lt;li&gt;It is Object-based stroage.&lt;/li&gt;
&lt;li&gt;The data is spread across mutiple devices and mutiple facilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The-Basics-基礎&quot;&gt;&lt;a href=&quot;#The-Basics-基礎&quot; class=&quot;headerlink&quot; title=&quot;The Basics 基礎&quot;&gt;&lt;/a&gt;The Basics 基礎&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;S3 is Object-based - i.e. allows you to upload files.&lt;/li&gt;
&lt;li&gt;Files can be from 0 byte to 5TB.&lt;/li&gt;
&lt;li&gt;There is un unlimited stroage.&lt;/li&gt;
&lt;li&gt;Files are stored in Buckets (folder).&lt;/li&gt;
&lt;li&gt;S3 is a univeral namespace. That is, names must be unique globally.&lt;/li&gt;
&lt;li&gt;Upload file to S3, if success will receive HTTP 200 code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Objects&quot;&gt;&lt;a href=&quot;#Objects&quot; class=&quot;headerlink&quot; title=&quot;Objects&quot;&gt;&lt;/a&gt;Objects&lt;/h2&gt;&lt;p&gt;S3 is Object based. Think of Objects just as files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key (This is simply the name of object)&lt;/li&gt;
&lt;li&gt;Value (This is simply the data and is made up of a sequence of bytes).&lt;/li&gt;
&lt;li&gt;Varsion ID (Important for versioning)&lt;/li&gt;
&lt;li&gt;Metadata (Data about data you are storing)&lt;/li&gt;
&lt;li&gt;Subresources&lt;ul&gt;
&lt;li&gt;Access Control Lists(ACL)&lt;/li&gt;
&lt;li&gt;Torrent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;S3-如何儲存資料&quot;&gt;&lt;a href=&quot;#S3-如何儲存資料&quot; class=&quot;headerlink&quot; title=&quot;S3 如何儲存資料?&quot;&gt;&lt;/a&gt;S3 如何儲存資料?&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Bucket" scheme="http://chestertang.site/tags/S3-Bucket/"/>
    
  </entry>
  
  <entry>
    <title>AWS - CloudWatch - Billing</title>
    <link href="http://chestertang.site/2020/03/25/zyx0325/"/>
    <id>http://chestertang.site/2020/03/25/zyx0325/</id>
    <published>2020-03-25T01:00:00.000Z</published>
    <updated>2020-03-26T06:26:38.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Management-amp-Governance-CloudWatch"><a href="#Management-amp-Governance-CloudWatch" class="headerlink" title="Management &amp; Governance / CloudWatch"></a>Management &amp; Governance / CloudWatch</h1><h2 id="Billing-帳單"><a href="#Billing-帳單" class="headerlink" title="Billing 帳單"></a>Billing 帳單</h2><h3 id="CloudWatch"><a href="#CloudWatch" class="headerlink" title="CloudWatch"></a>CloudWatch</h3><ul><li>點選 <code>Management &amp; Governance / CloudWatch</code> 後，可以看到 <code>CloudWatch</code> 的頁面。<code>CloudWatch</code> 是一種監控和管理服務，可以為 AWS、混合和現場部署應用程式和基礎設施資源提供資料和可行的洞查。</li></ul><p><img src="https://i.imgur.com/MNBZnJb.png" alt="IMAGE"></p><p>使用 CloudWatch 可以監控整個堆疊 (應用程式、基礎設施和服務)，並利用警示、日誌和事件資料來執行自動操作，並縮短平均解決時間。</p><blockquote><p><a href="https://aws.amazon.com/tw/cloudwatch/features/" target="_blank" rel="noopener">https://aws.amazon.com/tw/cloudwatch/features/</a></p></blockquote><p>在之後的文章中會再細部介紹，這篇文章將設定 <code>Billing</code> 帳單的部分。</p><p><img src="https://i.imgur.com/nZMzWKK.png" alt="IMAGE"></p><p><img src="https://i.imgur.com/TUuPnup.png" alt="IMAGE"></p><ul><li>點選 <code>Billing</code> 按鈕後，再點選 “下方” 的 <code>Create alarm</code> 按鈕，這時就可以看到設定 <code>Billing</code> 的四個步驟：</li></ul><ol><li>Specify metric and conditions</li></ol><p>針對 Conditions 的不同，使用者這邊可以設定當額度超過多少美金，就寄送帳單通知信；當然地，反之也可以設定小於多少美金寄送帳單通知信。</p><p><img src="https://i.imgur.com/4eBW3U6.png" alt="IMAGE"></p><p><img src="https://i.imgur.com/YmvLFQn.png" alt="IMAGE"></p><ol start="2"><li>Configure actions</li></ol><p>而寄送通知信給誰？還有標題是什麼就要從這個地方設定啦！如果是還未建立過 <code>topic</code> 的話就無法選擇 <code>Select an existing SNS topic</code>，如圖所示，這邊新建一個新的 <code>topic</code> 並填寫要傳送通知信給哪個信箱。</p><p><img src="https://i.imgur.com/jxgMFbx.png" alt="IMAGE"></p><p>然後就可以收到信件啦！（amazon 的 Subscription confirmed! 信件這邊就不附上惹…懶</p><p><img src="https://i.imgur.com/x46MAri.png" alt="IMAGE"></p><ol start="3"><li>Add name and description</li></ol><p>接下來也設定這個 <code>Alarm</code> 名稱及敘述…</p><p><img src="https://i.imgur.com/j5yOcI7.png" alt="IMAGE"></p><ol start="4"><li>Preview and create</li></ol><p>設定完成後就可以在 <code>CloudWatch &gt; Alarms</code> 中看到設置的 <code>Alarms</code></p><p><img src="https://i.imgur.com/h3OkiX3.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p><a href="https://aws.amazon.com/tw/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc" target="_blank" rel="noopener">CloudWatch Free Tier Includes</a>：</p><ul><li>Simple settings of Billing Alarm</li><li>10 Custom Metrics and 10 Alarms</li><li>1,000,000 API Requests </li><li>5GB of Log Data Ingestion and 5GB of Log Data Archive</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Management-amp-Governance-CloudWatch&quot;&gt;&lt;a href=&quot;#Management-amp-Governance-CloudWatch&quot; class=&quot;headerlink&quot; title=&quot;Management &amp;amp; Governance / CloudWatch&quot;&gt;&lt;/a&gt;Management &amp;amp; Governance / CloudWatch&lt;/h1&gt;&lt;h2 id=&quot;Billing-帳單&quot;&gt;&lt;a href=&quot;#Billing-帳單&quot; class=&quot;headerlink&quot; title=&quot;Billing 帳單&quot;&gt;&lt;/a&gt;Billing 帳單&lt;/h2&gt;&lt;h3 id=&quot;CloudWatch&quot;&gt;&lt;a href=&quot;#CloudWatch&quot; class=&quot;headerlink&quot; title=&quot;CloudWatch&quot;&gt;&lt;/a&gt;CloudWatch&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;點選 &lt;code&gt;Management &amp;amp; Governance / CloudWatch&lt;/code&gt; 後，可以看到 &lt;code&gt;CloudWatch&lt;/code&gt; 的頁面。&lt;code&gt;CloudWatch&lt;/code&gt; 是一種監控和管理服務，可以為 AWS、混合和現場部署應用程式和基礎設施資源提供資料和可行的洞查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MNBZnJb.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 CloudWatch 可以監控整個堆疊 (應用程式、基礎設施和服務)，並利用警示、日誌和事件資料來執行自動操作，並縮短平均解決時間。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/tw/cloudwatch/features/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aws.amazon.com/tw/cloudwatch/features/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在之後的文章中會再細部介紹，這篇文章將設定 &lt;code&gt;Billing&lt;/code&gt; 帳單的部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nZMzWKK.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TUuPnup.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="Billing" scheme="http://chestertang.site/tags/Billing/"/>
    
  </entry>
  
  <entry>
    <title>AWS - IAM</title>
    <link href="http://chestertang.site/2020/03/24/zyx0324/"/>
    <id>http://chestertang.site/2020/03/24/zyx0324/</id>
    <published>2020-03-24T10:47:40.000Z</published>
    <updated>2020-03-25T04:42:25.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Security-Identity-amp-Compliance-IAM"><a href="#Security-Identity-amp-Compliance-IAM" class="headerlink" title="Security, Identity, &amp; Compliance / IAM"></a>Security, Identity, &amp; Compliance / IAM</h1><h2 id="AWS-IAM-是什麼？"><a href="#AWS-IAM-是什麼？" class="headerlink" title="AWS IAM 是什麼？"></a><a href="https://docs.aws.amazon.com/zh_tw/IAM/latest/UserGuide/introduction.html" target="_blank" rel="noopener">AWS IAM</a> 是什麼？</h2><blockquote><p>Identity Access Management allows you to manage users and thier level of access to the AWS Console.</p></blockquote><ul><li>centralised（集中）control of your AWS account</li><li>Shared access to your AWS account</li><li>Granular（粒）Permissions（權限）</li><li>Identity（身份）Federation（including Active Directory, Facebook, Linkin, etc..）</li><li>Multifactor Authentication</li><li>Provide temporary access for users/devices and services where necessary</li><li>integrates（整合）with many deifferent aws services</li><li>Supports PCI DSS（Payment Card Industry Data Security Standard 支付卡行業數據安全標準）Compliance</li></ul><blockquote><p>Key Terminology For IAM</p></blockquote><ul><li>Users：End Users such as people, employees of an organization etc.</li><li>Groups：A collection of users. Each user in the group will inherit the permission of the group.</li><li>Policies：Policies are made up of documents, called Policy documents. These doccuments are in a format called JSON and they give permissions as to what a User/Groups/Role is able to do.</li><li>Roles：you create Roles and then assign them to AWS Resources.</li></ul><hr><h1 id="從-AWS-AIM-設定了解觀念"><a href="#從-AWS-AIM-設定了解觀念" class="headerlink" title="從 AWS AIM 設定了解觀念"></a>從 AWS AIM 設定了解觀念</h1><p><img src="https://i.imgur.com/ixiMVAd.png" alt="IMAGE"></p><p>點選 <code>Security, Identity, &amp; Compliance / IAM</code> 後，可以登入 <code>Welcome to Identity and Access Management</code> 的頁面。</p><h2 id="Customize-IAM-users-sign-in-link"><a href="#Customize-IAM-users-sign-in-link" class="headerlink" title="Customize IAM users sign-in link"></a>Customize IAM users sign-in link</h2><p>其中可以點選 <code>Customize</code> 按鈕修改 <code>IAM users sign-in link</code> 的連結（無法與其他人重複）</p><p><img src="https://i.imgur.com/Y29z4y5.png" alt="IMAGE"></p><p>成功編輯後 <code>IAM users sign-in link</code> 就會被替換（ e.g. <a href="https://chestertang1231.signin.aws.amazon.com/console" target="_blank" rel="noopener">https://chestertang1231.signin.aws.amazon.com/console</a> ）</p><h2 id="Security-Status"><a href="#Security-Status" class="headerlink" title="Security Status"></a>Security Status</h2><h3 id="Activate-MFA-on-your-root-account"><a href="#Activate-MFA-on-your-root-account" class="headerlink" title="Activate MFA on your root account"></a>Activate MFA on your root account</h3><ol><li>Multi-factor authentication（多重要素驗證）</li></ol><p>又譯多因子認證、多因素驗證、多因素認證，是一種電腦存取控制的方法，用戶要通過兩種以上的認證機制之後，才能得到授權，使用電腦資源。例如，使用者要輸入 PIN 碼，插入銀行卡，最後再經指紋比對，通過這三種認證方式，才能獲得授權。這種認證方式可以提高安全性。</p><p>更生活化的例子就像是，現在的預約買口罩需要讀卡機來讀健保卡，又或者是以前玩電玩除了要先登入帳號之外，還要有 beanfun 的讀卡機來讀卡，也就是雙重認證的概念。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Multi-factor_authentication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Multi-factor_authentication</a></p></blockquote><p>點選 <code>Manage MFA</code> 來設定雙重認證，其中又分為以下三種：</p><ul><li><code>Virtual MFA device</code>（uthenticator app installed on your mobile device or computer）</li><li><code>U2F security key</code>（YubiKey or any other compliant U2F device）</li><li><code>Other hardware MFA device</code>（Gemalto token）</li></ul><p><img src="https://i.imgur.com/MsQwVXu.png" alt="IMAGE"></p><p>可以透過手機下載 <code>Google authenticator</code> APP 來進行 <code>Virtual MFA device</code> 驗證，當然也可依照個人喜好選擇其他雙重認證方式。</p><p>流程只需要掃描 QRcode 並輸入兩次手機 App 的 <code>MFA-code</code> 就可以完成。</p><p><img src="https://i.imgur.com/pE4KUht.png" alt="IMAGE"></p><ol start="2"><li>Create individual IAM users</li></ol><p><img src="https://i.imgur.com/e3J1umx.png" alt="IMAGE"></p><p>設定完成 <code>Multi-factor authentication</code> 之後並點選 <code>Manage Users</code> 來 <code>Add Users</code>！</p><p><img src="https://i.imgur.com/X5ekfc2.png" alt="IMAGE"></p><ol start="3"><li>Use groups to assign permissions</li></ol><p>並且設定 <code>Group name</code> 及選擇 <code>Policy name</code></p><p><img src="https://i.imgur.com/jVwtAM0.png" alt="IMAGE"></p><p>之後都選擇下一步即可建立好 User &amp; Group，完成後就會顯示 <code>Success</code> 的畫面：</p><ul><li>注意 <code>Secret access key</code> 的 <code>show</code> 只能點擊一次，之後就無法看到</li><li>建議直接下載 <code>.csv</code> 檔案來查看 <code>Password</code>、<code>Access key ID</code>、<code>Secret access key</code> 等訊息</li><li>後方的 <code>Send Email</code> 也可以直接寄信的使用者</li></ul><p><img src="https://i.imgur.com/PH8UkEI.png" alt="IMAGE"></p><blockquote><p>還記得剛剛設定的 policie name 中的 <code>AdministratorAccess</code> 嗎？</p></blockquote><p>從這個 Police <code>AdministratorAccess</code> 中可以看出，它事實上是一個 JSON 格式，但這又代表著什麼意思呢？可以看到巢狀裡面的 <code>&quot;Effect&quot;: &quot;Allow&quot;</code> 代表著這個人是被允許進入的，且底下的 <code>Action</code>, <code>Resource</code> 的權限是 <code>*</code> 號，也就是代表著最大權限，如同 admin 的概念一樣。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lidvDbc.png" alt="IMAGE"></p><ol start="4"><li>Apply an IAM password policy</li></ol><p><img src="https://i.imgur.com/bGlsefe.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>完成這些初步的設定可以大致了解到 AWS IAM 的用途，稍微做一下這篇的總結，並歸納一下這篇學到的觀念：</p><ul><li>IAM is universal（通用）. It does not apply to regions at this time.</li><li>The <code>root account</code> is simply the account created when first setup your AWS account. It has complete Admin access.</li><li>New Users have NO Permissions when first created.（ e.g. <code>2. Create individual IAM users</code>）</li><li>New Users are assigned Access Key ID &amp; Secret Access Key when first created.</li><li>Access Key ID &amp; Secret Access Key are not the same as a password. You can use this to access AWS via the API and Command Line</li><li>You only get to view Access Key ID &amp; Secret Access Key once. If you lost, you have to generate them.</li><li>Always setup Multifactor Authentication on your root account.</li><li>You can create and customize your own password rotation policies.（ e.g. <code>4. Apply an IAM password policy</code>）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Security-Identity-amp-Compliance-IAM&quot;&gt;&lt;a href=&quot;#Security-Identity-amp-Compliance-IAM&quot; class=&quot;headerlink&quot; title=&quot;Security, Identity, &amp;amp; Compliance / IAM&quot;&gt;&lt;/a&gt;Security, Identity, &amp;amp; Compliance / IAM&lt;/h1&gt;&lt;h2 id=&quot;AWS-IAM-是什麼？&quot;&gt;&lt;a href=&quot;#AWS-IAM-是什麼？&quot; class=&quot;headerlink&quot; title=&quot;AWS IAM 是什麼？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_tw/IAM/latest/UserGuide/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AWS IAM&lt;/a&gt; 是什麼？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Identity Access Management allows you to manage users and thier level of access to the AWS Console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;centralised（集中）control of your AWS account&lt;/li&gt;
&lt;li&gt;Shared access to your AWS account&lt;/li&gt;
&lt;li&gt;Granular（粒）Permissions（權限）&lt;/li&gt;
&lt;li&gt;Identity（身份）Federation（including Active Directory, Facebook, Linkin, etc..）&lt;/li&gt;
&lt;li&gt;Multifactor Authentication&lt;/li&gt;
&lt;li&gt;Provide temporary access for users/devices and services where necessary&lt;/li&gt;
&lt;li&gt;integrates（整合）with many deifferent aws services&lt;/li&gt;
&lt;li&gt;Supports PCI DSS（Payment Card Industry Data Security Standard 支付卡行業數據安全標準）Compliance&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Key Terminology For IAM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Users：End Users such as people, employees of an organization etc.&lt;/li&gt;
&lt;li&gt;Groups：A collection of users. Each user in the group will inherit the permission of the group.&lt;/li&gt;
&lt;li&gt;Policies：Policies are made up of documents, called Policy documents. These doccuments are in a format called JSON and they give permissions as to what a User/Groups/Role is able to do.&lt;/li&gt;
&lt;li&gt;Roles：you create Roles and then assign them to AWS Resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;從-AWS-AIM-設定了解觀念&quot;&gt;&lt;a href=&quot;#從-AWS-AIM-設定了解觀念&quot; class=&quot;headerlink&quot; title=&quot;從 AWS AIM 設定了解觀念&quot;&gt;&lt;/a&gt;從 AWS AIM 設定了解觀念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ixiMVAd.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;點選 &lt;code&gt;Security, Identity, &amp;amp; Compliance / IAM&lt;/code&gt; 後，可以登入 &lt;code&gt;Welcome to Identity and Access Management&lt;/code&gt; 的頁面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="IAM" scheme="http://chestertang.site/tags/IAM/"/>
    
  </entry>
  
</feed>
