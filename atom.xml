<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>查斯特部落格 | The Blog Of Chester Tang</title>
  
  <subtitle>查斯特 Chester Tang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chestertang.site/"/>
  <updated>2020-10-14T01:53:24.353Z</updated>
  <id>http://chestertang.site/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>29 - Sum of Intervals</title>
    <link href="http://chestertang.site/2020/10/14/codewars29/"/>
    <id>http://chestertang.site/2020/10/14/codewars29/</id>
    <published>2020-10-14T01:00:00.000Z</published>
    <updated>2020-10-14T01:53:24.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="29-Sum-of-Intervals"><a href="#29-Sum-of-Intervals" class="headerlink" title="29 - Sum of Intervals"></a>29 - Sum of Intervals</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function called sumIntervals/sum_intervals() that accepts an array of intervals, and returns the sum of all the interval lengths. Overlapping intervals should only be counted once.</p><p>Intervals<br>Intervals are represented by a pair of integers in the form of an array. The first value of the interval will always be less than the second value. Interval example: [1, 5] is an interval from 1 to 5. The length of this interval is 4.</p><p>Overlapping Intervals<br>List containing overlapping intervals:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   [<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">   [<span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">   [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The sum of the lengths of these intervals is 7. Since [1, 4] and [3, 5] overlap, we can treat the interval as [1, 5], which has a length of 4.</p><p>Examples:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sumIntervals( [</span><br><span class="line">   [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">   [<span class="number">6</span>, <span class="number">10</span>],</span><br><span class="line">   [<span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">] ); <span class="regexp">//</span> =&gt; <span class="number">9</span></span><br><span class="line"></span><br><span class="line">sumIntervals( [</span><br><span class="line">   [<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">   [<span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">   [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">] ); <span class="regexp">//</span> =&gt; <span class="number">7</span></span><br><span class="line"></span><br><span class="line">sumIntervals( [</span><br><span class="line">   [<span class="number">1</span>,<span class="number">5</span>],</span><br><span class="line">   [<span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">   [<span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">   [<span class="number">16</span>, <span class="number">19</span>],</span><br><span class="line">   [<span class="number">5</span>, <span class="number">11</span>]</span><br><span class="line">] ); <span class="regexp">//</span> =&gt; <span class="number">19</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_of_intervals</span><span class="params">(intervals)</span></span></span><br><span class="line">  <span class="comment">#return</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(sum_of_intervals([[<span class="number">1</span>, <span class="number">5</span>]]), <span class="number">4</span>)</span><br><span class="line">Test.assert_equals(sum_of_intervals([[<span class="number">1</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">10</span>]]), <span class="number">8</span>)</span><br><span class="line">Test.assert_equals(sum_of_intervals([[<span class="number">1</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">5</span>]]), <span class="number">4</span>)</span><br><span class="line">Test.assert_equals(sum_of_intervals([[<span class="number">1</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">5</span>]]), <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumIntervals</span>(<span class="params">intervals</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'sumIntervals'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  it(<span class="string">'should return the correct sum for non overlapping intervals'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test1 = [[<span class="number">1</span>,<span class="number">5</span>]];</span><br><span class="line">    <span class="keyword">var</span> test2 = [[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">10</span>]];</span><br><span class="line">    Test.assertEquals(sumIntervals(test1), <span class="number">4</span>);</span><br><span class="line">    Test.assertEquals(sumIntervals(test2), <span class="number">8</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it(<span class="string">'should return the correct sum for overlapping intervals'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test1 = [[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">5</span>]];</span><br><span class="line">    <span class="keyword">var</span> test2 = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">7</span>, <span class="number">10</span>],[<span class="number">3</span>, <span class="number">5</span>]];</span><br><span class="line">    Test.assertEquals(sumIntervals(test1), <span class="number">4</span>);</span><br><span class="line">    Test.assertEquals(sumIntervals(test2), <span class="number">7</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 第一個直覺都先 <code>map</code> 來處理，但原來發現有 <code>flat_map</code> 可以更清楚來做<br>想法(2): 注意要為 <code>uniq</code> 才是對的</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201014/20120826VfGTyC0IFD.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201014/20120826VfGTyC0IFD.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/oRi7ansa--g" target="_blank" rel="noopener">Unsplash Vishal Shanto</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/flat_map" target="_blank" rel="noopener">Ruby - apidock flat_map</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">JS - MDN Array.prototype.forEach()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">JS - MDN Object.keys()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_of_intervals</span><span class="params">(intervals)</span></span></span><br><span class="line">  intervals.map&#123; <span class="params">|a|</span> (a[<span class="number">0</span>]...a[<span class="number">1</span>]).to_a &#125;.flatten.uniq.size</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_of_intervals</span><span class="params">(intervals)</span></span></span><br><span class="line">  intervals.flat_map &#123; <span class="params">|x, y|</span> [*x...y] &#125;.uniq.size</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumIntervals</span>(<span class="params">intervals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> numbers = &#123;&#125;;</span><br><span class="line">  intervals.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = x[<span class="number">0</span>]; i &lt; x[<span class="number">1</span>]; i++) &#123;</span><br><span class="line">      numbers[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(numbers).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;29-Sum-of-Intervals&quot;&gt;&lt;a href=&quot;#29-Sum-of-Intervals&quot; class=&quot;headerlink&quot; title=&quot;29 - Sum of Intervals&quot;&gt;&lt;/a&gt;29 - Sum of Intervals&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function called sumIntervals/sum_intervals() that accepts an array of intervals, and returns the sum of all the interval lengths. Overlapping intervals should only be counted once.&lt;/p&gt;
&lt;p&gt;Intervals&lt;br&gt;Intervals are represented by a pair of integers in the form of an array. The first value of the interval will always be less than the second value. Interval example: [1, 5] is an interval from 1 to 5. The length of this interval is 4.&lt;/p&gt;
&lt;p&gt;Overlapping Intervals&lt;br&gt;List containing overlapping intervals:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The sum of the lengths of these intervals is 7. Since [1, 4] and [3, 5] overlap, we can treat the interval as [1, 5], which has a length of 4.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sumIntervals( [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] ); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumIntervals( [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] ); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumIntervals( [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] ); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>28 - Find the missing letter</title>
    <link href="http://chestertang.site/2020/10/13/codewars28/"/>
    <id>http://chestertang.site/2020/10/13/codewars28/</id>
    <published>2020-10-13T01:00:00.000Z</published>
    <updated>2020-10-13T09:24:36.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="28-Find-the-missing-letter"><a href="#28-Find-the-missing-letter" class="headerlink" title="28 - Find the missing letter"></a>28 - Find the missing letter</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.</p><p>You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.<br>The array will always contain letters in only one case.</p><p>Example:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>] -&gt; <span class="string">'e'</span> [<span class="string">'O'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>] -&gt; <span class="string">'P'</span></span><br><span class="line"></span><br><span class="line">[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"f"</span>] -&gt; <span class="string">"e"</span></span><br><span class="line">[<span class="string">"O"</span>,<span class="string">"Q"</span>,<span class="string">"R"</span>,<span class="string">"S"</span>] -&gt; <span class="string">"P"</span></span><br><span class="line">(Use the English alphabet with <span class="number">26</span> letters!)</span><br></pre></td></tr></table></figure><p>Have fun coding it and please don’t forget to vote and rank this kata! :-)</p><p>I have also created other katas. Take a look if you enjoyed this kata!</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_missing_letter</span><span class="params">(arr)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"Basic tests"</span>) <span class="keyword">do</span></span><br><span class="line">   Test.assert_equals(find_missing_letter([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"f"</span>]), <span class="string">"e"</span>)</span><br><span class="line">   Test.assert_equals(find_missing_letter([<span class="string">"O"</span>,<span class="string">"Q"</span>,<span class="string">"R"</span>,<span class="string">"S"</span>]), <span class="string">"P"</span>)</span><br><span class="line">   Test.assert_equals(find_missing_letter([<span class="string">"b"</span>,<span class="string">"d"</span>]), <span class="string">"c"</span>)</span><br><span class="line">   Test.assert_equals(find_missing_letter([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"d"</span>]), <span class="string">"c"</span>)</span><br><span class="line">   Test.assert_equals(find_missing_letter([<span class="string">"b"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>]), <span class="string">"c"</span>)</span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMissingLetter</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"KataTests"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  it(<span class="string">"exampleTests"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Test.assertEquals(findMissingLetter([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>]), <span class="string">'e'</span>);</span><br><span class="line">    Test.assertEquals(findMissingLetter([<span class="string">'O'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>]), <span class="string">'P'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p><img src="https://ithelp.ithome.com.tw/upload/images/20201013/20120826HwX3ZSzM9n.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201013/20120826HwX3ZSzM9n.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/xrVDYZRGdw4" target="_blank" rel="noopener">Unsplash Emile Perron</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/rails/String/ord" target="_blank" rel="noopener">Ruby - apidock ord</a></li><li><a href="https://apidock.com/ruby/Enumerator/next" target="_blank" rel="noopener">Ruby - apidock next</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noopener">JS - MDN String.prototype.charCodeAt()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="noopener">JS - MDN String.fromCharCode()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_missing_letter</span><span class="params">(arr)</span></span></span><br><span class="line">  (arr.length-<span class="number">1</span>).times&#123; <span class="params">|num|</span> <span class="keyword">return</span> (arr[num].ord + <span class="number">1</span>).chr <span class="keyword">if</span> arr[num].ord + <span class="number">1</span> != arr[num + <span class="number">1</span>].ord &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_missing_letter</span><span class="params">(arr)</span></span></span><br><span class="line">  arr[<span class="number">0</span>...-<span class="number">1</span>].each_with_index&#123; <span class="params">|num, index|</span> <span class="keyword">return</span> num.<span class="keyword">next</span> <span class="keyword">if</span> num.<span class="keyword">next</span> != arr[index + <span class="number">1</span>] &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_missing_letter</span><span class="params">(arr)</span></span></span><br><span class="line">  ((arr.first..arr.last).to_a - arr).first</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMissingLetter</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> string = array.join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(string.charCodeAt(i + <span class="number">1</span>) - string.charCodeAt(i) != <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(string.charCodeAt(i) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;28-Find-the-missing-letter&quot;&gt;&lt;a href=&quot;#28-Find-the-missing-letter&quot; class=&quot;headerlink&quot; title=&quot;28 - Find the missing letter&quot;&gt;&lt;/a&gt;28 - Find the missing letter&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.&lt;/p&gt;
&lt;p&gt;You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.&lt;br&gt;The array will always contain letters in only one case.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Q&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;S&#39;&lt;/span&gt;] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;O&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Q&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;R&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;S&quot;&lt;/span&gt;] -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;P&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(Use the English alphabet with &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; letters!)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Have fun coding it and please don’t forget to vote and rank this kata! :-)&lt;/p&gt;
&lt;p&gt;I have also created other katas. Take a look if you enjoyed this kata!&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>27 - First non-repeating character</title>
    <link href="http://chestertang.site/2020/10/12/codewars27/"/>
    <id>http://chestertang.site/2020/10/12/codewars27/</id>
    <published>2020-10-12T01:00:00.000Z</published>
    <updated>2020-10-12T01:04:23.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="27-First-non-repeating-character"><a href="#27-First-non-repeating-character" class="headerlink" title="27 - First non-repeating character"></a>27 - First non-repeating character</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function named <code>first_non_repeating_letter</code> that takes a string input, and returns the first character that is not repeated anywhere in the string.</p><p>For example, if given the input <code>&#39;stress&#39;</code>, the function should return <code>&#39;t&#39;</code>, since the letter t only occurs once in the string, and occurs first in the string.</p><p>As an added challenge, upper- and lowercase letters are considered the same character, but the function should return the correct case for the initial letter. For example, the input <code>&#39;sTreSS&#39;</code> should return <code>&#39;T&#39;</code>.</p><p>If a string contains all repeating characters, it should return an empty string (<code>&quot;&quot;</code>) or <code>None</code> – see sample tests.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongues</span><span class="params">(code)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">'Simple Tests'</span>) <span class="keyword">do</span></span><br><span class="line">   it(<span class="string">'should handle simple tests'</span>) <span class="keyword">do</span></span><br><span class="line">     Test.assert_equals(first_non_repeating_letter(<span class="string">'a'</span>), <span class="string">'a'</span>)</span><br><span class="line">     Test.assert_equals(first_non_repeating_letter(<span class="string">'stress'</span>), <span class="string">'t'</span>)</span><br><span class="line">     Test.assert_equals(first_non_repeating_letter(<span class="string">'moonmen'</span>), <span class="string">'e'</span>)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   it(<span class="string">'should handle empty strings'</span>) <span class="keyword">do</span></span><br><span class="line">     Test.assert_equals(first_non_repeating_letter(<span class="string">''</span>), <span class="string">''</span>)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstNonRepeatingLetter</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Add your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">'Simple Tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should handle simple tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.assertEquals(firstNonRepeatingLetter(<span class="string">'a'</span>), <span class="string">'a'</span>);</span><br><span class="line">    Test.assertEquals(firstNonRepeatingLetter(<span class="string">'stress'</span>), <span class="string">'t'</span>);</span><br><span class="line">    Test.assertEquals(firstNonRepeatingLetter(<span class="string">'moonmen'</span>), <span class="string">'e'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p><img src="https://ithelp.ithome.com.tw/upload/images/20201012/20120826YzLdi5jaAH.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201012/20120826YzLdi5jaAH.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/OVbeSXRk_9E" target="_blank" rel="noopener">Unsplash Nikita Kachanovsky</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/chars" target="_blank" rel="noopener">Ruby - apidock chars</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">JS - MDN RegExp</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_non_repeating_letter</span><span class="params">(s)</span></span></span><br><span class="line">  letter = s.chars.find&#123; <span class="params">|char|</span> s.chars.map(&amp;<span class="symbol">:downcase</span>).count(char.downcase) == <span class="number">1</span> &#125;</span><br><span class="line">  letter.<span class="literal">nil</span>? ? <span class="string">''</span> : letter</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_non_repeating_letter</span><span class="params">(s)</span></span></span><br><span class="line">  s.chars.find&#123; <span class="params">|i|</span> s.downcase.count(i) == <span class="number">1</span> <span class="params">||</span> s.upcase.count(i) == <span class="number">1</span> &#125; <span class="params">||</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstNonRepeatingLetter</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s[i],<span class="string">"gi"</span>)).length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> s[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;27-First-non-repeating-character&quot;&gt;&lt;a href=&quot;#27-First-non-repeating-character&quot; class=&quot;headerlink&quot; title=&quot;27 - First non-repeating character&quot;&gt;&lt;/a&gt;27 - First non-repeating character&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function named &lt;code&gt;first_non_repeating_letter&lt;/code&gt; that takes a string input, and returns the first character that is not repeated anywhere in the string.&lt;/p&gt;
&lt;p&gt;For example, if given the input &lt;code&gt;&amp;#39;stress&amp;#39;&lt;/code&gt;, the function should return &lt;code&gt;&amp;#39;t&amp;#39;&lt;/code&gt;, since the letter t only occurs once in the string, and occurs first in the string.&lt;/p&gt;
&lt;p&gt;As an added challenge, upper- and lowercase letters are considered the same character, but the function should return the correct case for the initial letter. For example, the input &lt;code&gt;&amp;#39;sTreSS&amp;#39;&lt;/code&gt; should return &lt;code&gt;&amp;#39;T&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a string contains all repeating characters, it should return an empty string (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) or &lt;code&gt;None&lt;/code&gt; – see sample tests.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tongues&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(code)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#your code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>26 - Tongues</title>
    <link href="http://chestertang.site/2020/10/11/codewars26/"/>
    <id>http://chestertang.site/2020/10/11/codewars26/</id>
    <published>2020-10-11T01:00:00.000Z</published>
    <updated>2020-10-12T01:03:59.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="26-Tongues"><a href="#26-Tongues" class="headerlink" title="26 - Tongues"></a>26 - Tongues</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Gandalf’s writings have long been available for study, but no one has yet figured out what language they are written in. Recently, due to programming work by a hacker known only by the code name ROT13, it has been discovered that Gandalf used nothing but a simple letter substitution scheme, and further, that it is its own inverse|the same operation scrambles the message as unscrambles it.</p><p>This operation is performed by replacing vowels in the sequence <code>&#39;a&#39; &#39;i&#39; &#39;y&#39; &#39;e&#39; &#39;o&#39; &#39;u&#39;</code> with the vowel three advanced, cyclicly, while preserving case (i.e., lower or upper).</p><p>Similarly, consonants are replaced from the sequence <code>&#39;b&#39; &#39;k&#39; &#39;x&#39; &#39;z&#39; &#39;n&#39; &#39;h&#39; &#39;d&#39; &#39;c&#39; &#39;w&#39; &#39;g&#39; &#39;p&#39; &#39;v&#39; &#39;j&#39; &#39;q&#39; &#39;t&#39; &#39;s&#39; &#39;r&#39; &#39;l&#39; &#39;m&#39; &#39;f&#39;</code> by advancing ten letters.</p><p>So for instance the phrase <code>&#39;One ring to rule them all.&#39;</code> translates to <code>&#39;Ita dotf ni dyca nsaw ecc.&#39;</code></p><p>The fascinating thing about this transformation is that the resulting language yields pronounceable words. For this problem, you will write code to translate Gandalf’s manuscripts into plain text.</p><p>Your job is to write a function that decodes Gandalf’s writings.</p><p>Input</p><p>The function will be passed a string for the function to decode. Each string will contain up to 100 characters, representing some text written by Gandalf. All characters will be plain ASCII, in the range space (32) to tilde (126).</p><p>Output</p><p>For each string passed to the decode function return its translation.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongues</span><span class="params">(code)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(tongues(<span class="string">'Ita dotf ni dyca nsaw ecc.'</span>), <span class="string">'One ring to rule them all.'</span>)</span><br><span class="line">Test.assert_equals(tongues(<span class="string">'Tim oh nsa nowa gid ecc fiir wat ni liwa ni nsa eor ig nsaod liytndu.'</span>), <span class="string">'Now is the time for all good men to come to the aid of their country.'</span>)</span><br><span class="line">Test.assert_equals(tongues(<span class="string">'Giydhlida etr hakat uaedh efi iyd gidagensadh pdiyfsn ytni nsoh'</span>), <span class="string">'Fourscore and seven years ago our forefathers brought unto this'</span>)</span><br><span class="line">Test.assert_equals(tongues(<span class="string">'litnotatn e tam tenoit.'</span>), <span class="string">'continent a new nation.'</span>)</span><br><span class="line">Test.assert_equals(tongues(<span class="string">'Nsa zyolv pdimt gij xywbar ikad nsa cequ rifh.'</span>), <span class="string">'The quick brown fox jumped over the lazy dogs.'</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tongues</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Tongues"</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">"Basic tests"</span>, () =&gt; &#123;</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Ita dotf ni dyca nsaw ecc.'</span>), <span class="string">'One ring to rule them all.'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Tim oh nsa nowa gid ecc fiir wat ni liwa ni nsa eor ig nsaod liytndu.'</span>), <span class="string">'Now is the time for all good men to come to the aid of their country.'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Giydhlida etr hakat uaedh efi iyd gidagensadh pdiyfsn ytni nsoh'</span>), <span class="string">'Fourscore and seven years ago our forefathers brought unto this'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'litnotatn e tam tenoit.'</span>), <span class="string">'continent a new nation.'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Nsa zyolv pdimt gij xywbar ikad nsa cequ rifh.'</span>), <span class="string">'The quick brown fox jumped over the lazy dogs.'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Tywpadh (1234567890) etr bytlnyenoit, nsau hsiycr pins pa ytlsetfar!'</span>), <span class="string">'Numbers (1234567890) and punctuation, they should both be unchanged!'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">' '</span>), <span class="string">' '</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'Nsoh oh tin Vcotfit pyn on liycr pa e roggadatn gidaoft cetfyefa.'</span>), <span class="string">'This is not Klingon but it could be a different foreign language.'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'</span>), <span class="string">'0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>), <span class="string">'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm'</span>), <span class="string">'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'z'</span>), <span class="string">'q'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'n'</span>), <span class="string">'t'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'****************************************************************************************************'</span>), <span class="string">'****************************************************************************************************'</span>);</span><br><span class="line">    assert.strictEqual(tongues(<span class="string">'q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1'</span>), <span class="string">'z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 大小寫得轉換字，沒想到有 <code>tr</code> 這種方法，真的平常都不會有機會用到 ·＿·</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201011/2012082662JAenI2IR.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201011/2012082662JAenI2IR.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/SqAcgMAWIaM" target="_blank" rel="noopener">Unsplash Thought Catalog</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/tr" target="_blank" rel="noopener">Ruby - apidock tr</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noopener">JS - MDN String.prototype.toLowerCase()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noopener">JS - MDN String.prototype.toUpperCase()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">JS - MDN Array.prototype.indexOf()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongues</span><span class="params">(code)</span></span></span><br><span class="line">  code = code.tr(<span class="string">'aeiouy'</span>,<span class="string">'eaoiyu'</span>)</span><br><span class="line">  code = code.tr(<span class="string">'AEIOUY'</span>,<span class="string">'EAOIYU'</span>)</span><br><span class="line">  code = code.tr(<span class="string">'bkxznhdcwgpvjqtsrlmf'</span>,<span class="string">'pvjqtsrlmfbkxznhdcwg'</span>)</span><br><span class="line">  code = code.tr(<span class="string">'BKXZNHDCWGPVJQTSRLMF'</span>,<span class="string">'PVJQTSRLMFBKXZNHDCWG'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongues</span><span class="params">(code)</span></span></span><br><span class="line">  code.tr(<span class="string">'eouaiypvjqtsrlmfbkxznhdcwg'</span>, <span class="string">'aiyeoubkxznhdcwgpvjqtsrlmf'</span>).tr(<span class="string">'eouaiypvjqtsrlmfbkxznhdcwg'</span>.upcase, <span class="string">'aiyeoubkxznhdcwgpvjqtsrlmf'</span>.upcase)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tongues</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> alpha = <span class="string">'aiyeoubkxznhdcwgpvjqtsrlmf'</span>, repl = <span class="string">'eouaiypvjqtsrlmfbkxznhdcwg'</span>;</span><br><span class="line">  <span class="keyword">return</span> code.replace(<span class="regexp">/[a-z]/gi</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lower = m.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> lower == m ? repl[alpha.indexOf(lower)] : repl[alpha.indexOf(lower)].toUpperCase();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;26-Tongues&quot;&gt;&lt;a href=&quot;#26-Tongues&quot; class=&quot;headerlink&quot; title=&quot;26 - Tongues&quot;&gt;&lt;/a&gt;26 - Tongues&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Gandalf’s writings have long been available for study, but no one has yet figured out what language they are written in. Recently, due to programming work by a hacker known only by the code name ROT13, it has been discovered that Gandalf used nothing but a simple letter substitution scheme, and further, that it is its own inverse|the same operation scrambles the message as unscrambles it.&lt;/p&gt;
&lt;p&gt;This operation is performed by replacing vowels in the sequence &lt;code&gt;&amp;#39;a&amp;#39; &amp;#39;i&amp;#39; &amp;#39;y&amp;#39; &amp;#39;e&amp;#39; &amp;#39;o&amp;#39; &amp;#39;u&amp;#39;&lt;/code&gt; with the vowel three advanced, cyclicly, while preserving case (i.e., lower or upper).&lt;/p&gt;
&lt;p&gt;Similarly, consonants are replaced from the sequence &lt;code&gt;&amp;#39;b&amp;#39; &amp;#39;k&amp;#39; &amp;#39;x&amp;#39; &amp;#39;z&amp;#39; &amp;#39;n&amp;#39; &amp;#39;h&amp;#39; &amp;#39;d&amp;#39; &amp;#39;c&amp;#39; &amp;#39;w&amp;#39; &amp;#39;g&amp;#39; &amp;#39;p&amp;#39; &amp;#39;v&amp;#39; &amp;#39;j&amp;#39; &amp;#39;q&amp;#39; &amp;#39;t&amp;#39; &amp;#39;s&amp;#39; &amp;#39;r&amp;#39; &amp;#39;l&amp;#39; &amp;#39;m&amp;#39; &amp;#39;f&amp;#39;&lt;/code&gt; by advancing ten letters.&lt;/p&gt;
&lt;p&gt;So for instance the phrase &lt;code&gt;&amp;#39;One ring to rule them all.&amp;#39;&lt;/code&gt; translates to &lt;code&gt;&amp;#39;Ita dotf ni dyca nsaw ecc.&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The fascinating thing about this transformation is that the resulting language yields pronounceable words. For this problem, you will write code to translate Gandalf’s manuscripts into plain text.&lt;/p&gt;
&lt;p&gt;Your job is to write a function that decodes Gandalf’s writings.&lt;/p&gt;
&lt;p&gt;Input&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>25 - Range Extraction</title>
    <link href="http://chestertang.site/2020/10/10/codewars25/"/>
    <id>http://chestertang.site/2020/10/10/codewars25/</id>
    <published>2020-10-10T01:00:00.000Z</published>
    <updated>2020-10-10T06:13:25.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="25-Range-Extraction"><a href="#25-Range-Extraction" class="headerlink" title="25 - Range Extraction"></a>25 - Range Extraction</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>A format for expressing an ordered list of integers is to use a comma separated list of either</p><ul><li>individual integers</li><li>or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, ‘-‘. The range includes all integers in the interval including both endpoints. It is not considered a range unless it spans at least 3 numbers. For example (“12, 13, 15-17”)</li></ul><p>Complete the solution so that it takes a list of integers in increasing order and returns a correctly formatted string in the range format.</p><p>Example:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  solution([-<span class="number">6</span>, -<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>])</span><br><span class="line">  <span class="comment"># returns "-6,-3-1,3-5,7-11,14,15,17-20"</span></span><br><span class="line"><span class="string">``</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">### Ruby</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Init</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`ruby</span></span><br><span class="line"><span class="string">  def solution(list)</span></span><br><span class="line"><span class="string">    #todo: complete solution</span></span><br><span class="line"><span class="string">  end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(solution([-<span class="number">6</span>, -<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]), <span class="string">"-6,-3-1,3-5,7-11,14,15,17-20"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line"> <span class="comment">//<span class="doctag">TODO:</span> complete solution </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(solution([<span class="number">-6</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]), <span class="string">"-6,-3-1,3-5,7-11,14,15,17-20"</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 如果現在的數 +1 跟下一位數相等，就會被算在同個區間<br>想法(2): 如果只有一位數的話回傳該數，一位到兩位數之間回傳該兩位數，超過則回傳區間並且加上符號 <code>-</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201010/201208261dOJS0P7LB.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201010/201208261dOJS0P7LB.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/nGrfKmtwv24" target="_blank" rel="noopener">Unsplash Sincerely Media</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/chunk_while" target="_blank" rel="noopener">Ruby - apidock chunk_while</a></li><li><a href="https://apidock.com/ruby/Enumerable/flat_map" target="_blank" rel="noopener">Ruby - apidock flat_map</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">JS - MDN Array.prototype.splice()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(list)</span></span></span><br><span class="line">  list.chunk_while &#123; <span class="params">|i, j|</span> i + <span class="number">1</span> == j &#125;</span><br><span class="line">      .flat_map &#123; <span class="params">|a|</span></span><br><span class="line">        <span class="keyword">if</span> a.size == <span class="number">1</span></span><br><span class="line">          a.first.to_s</span><br><span class="line">        <span class="keyword">elsif</span> a.size == <span class="number">2</span> </span><br><span class="line">          [a.first.to_s, a.last.to_s]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="string">"<span class="subst">#&#123;a.first&#125;</span>-<span class="subst">#&#123;a.last&#125;</span>"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      &#125;</span><br><span class="line">      .join(<span class="string">','</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> j = i;</span><br><span class="line">      <span class="keyword">while</span>(list[j] - list[j + <span class="number">1</span>] == <span class="number">-1</span>) j++;</span><br><span class="line">      <span class="keyword">if</span>(j != i &amp;&amp; j-i &gt; <span class="number">1</span>) list.splice(i, j - i+<span class="number">1</span>, list[i] + <span class="string">'-'</span> + list[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;25-Range-Extraction&quot;&gt;&lt;a href=&quot;#25-Range-Extraction&quot; class=&quot;headerlink&quot; title=&quot;25 - Range Extraction&quot;&gt;&lt;/a&gt;25 - Range Extraction&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;A format for expressing an ordered list of integers is to use a comma separated list of either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;individual integers&lt;/li&gt;
&lt;li&gt;or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, ‘-‘. The range includes all integers in the interval including both endpoints. It is not considered a range unless it spans at least 3 numbers. For example (“12, 13, 15-17”)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complete the solution so that it takes a list of integers in increasing order and returns a correctly formatted string in the range format.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  solution([-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# returns &quot;-6,-3-1,3-5,7-11,14,15,17-20&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;### Ruby&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### Init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;`ruby&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  def solution(list)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    #todo: complete solution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(solution([-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]), &lt;span class=&quot;string&quot;&gt;&quot;-6,-3-1,3-5,7-11,14,15,17-20&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>24 - Best travel</title>
    <link href="http://chestertang.site/2020/10/09/codewars24/"/>
    <id>http://chestertang.site/2020/10/09/codewars24/</id>
    <published>2020-10-09T01:00:00.000Z</published>
    <updated>2020-10-09T07:56:02.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="24-Best-travel"><a href="#24-Best-travel" class="headerlink" title="24 - Best travel"></a>24 - Best travel</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>John and Mary want to travel between a few towns A, B, C … Mary has on a sheet of paper a list of distances between these towns. <code>ls = [50, 55, 57, 58, 60]</code>. John is tired of driving and he says to Mary that he doesn’t want to drive more than <code>t = 174</code> miles and he will visit only <code>3</code> towns.</p><p>Which distances, hence which towns, they will choose so that the sum of the distances is the biggest possible to please Mary and John?</p><p>Example:</p><p>With list <code>ls</code> and 3 towns to visit they can make a choice between: <code>[50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60]</code>.</p><p>The sums of distances are then: <code>162, 163, 165, 165, 167, 168, 170, 172, 173, 175</code>.</p><p>The biggest possible sum taking a limit of 174 into account is then 173 and the distances of the 3 corresponding towns is <code>[55, 58, 60]</code>.</p><p>The function chooseBestSum (or <code>choose_best_sum</code> or … depending on the language) will take as parameters t (maximum sum of distances, integer &gt;= 0), <code>k</code> (number of towns to visit, k &gt;= 1) and <code>ls</code> (list of distances, all distances are positive or null integers and this list has at least one element). The function returns the “best” sum ie the biggest possible sum of k distances less than or equal to the given limit t, if that sum exists, or otherwise nil, null, None, Nothing, depending on the language. With C++, C, Rust, Swift, Go, Kotlin return <code>-1</code>.</p><p>Examples:</p><p><code>ts = [50, 55, 56, 57, 58] choose_best_sum(163, 3, ts) -&gt; 163</code></p><p><code>xs = [50] choose_best_sum(163, 3, xs) -&gt; nil (or null or ... or -1 (C++, C, Rust, Swift, Go)</code></p><p><code>ys = [91, 74, 73, 85, 73, 81, 87] choose_best_sum(230, 3, ys) -&gt; 228</code></p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_best_sum</span><span class="params">(t, k, ls)</span></span></span><br><span class="line">    <span class="comment"># your code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"choose_best_sum"</span>) <span class="keyword">do</span></span><br><span class="line">  Test.it(<span class="string">"Basic Tests"</span>) <span class="keyword">do</span></span><br><span class="line">    ts = [<span class="number">50</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>]</span><br><span class="line">    Test.assert_equals(choose_best_sum(<span class="number">163</span>, <span class="number">3</span>, ts), <span class="number">163</span>)</span><br><span class="line">    ts = [<span class="number">50</span>]</span><br><span class="line">    Test.assert_equals(choose_best_sum(<span class="number">163</span>, <span class="number">3</span>, ts), <span class="literal">nil</span>)</span><br><span class="line">    ts = [<span class="number">91</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">85</span>, <span class="number">73</span>, <span class="number">81</span>, <span class="number">87</span>]</span><br><span class="line">    Test.assert_equals(choose_best_sum(<span class="number">230</span>, <span class="number">3</span>, ts), <span class="number">228</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chooseBestSum</span>(<span class="params">t, k, ls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"chooseBestSum"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Test.it(<span class="string">"Basic tests "</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> ts = [<span class="number">50</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>]</span><br><span class="line">    Test.assertEquals(chooseBestSum(<span class="number">163</span>, <span class="number">3</span>, ts), <span class="number">163</span>)</span><br><span class="line">    ts = [<span class="number">50</span>]</span><br><span class="line">    Test.assertEquals(chooseBestSum(<span class="number">163</span>, <span class="number">3</span>, ts), <span class="literal">null</span>)</span><br><span class="line">    ts = [<span class="number">91</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">85</span>, <span class="number">73</span>, <span class="number">81</span>, <span class="number">87</span>]</span><br><span class="line">    Test.assertEquals(chooseBestSum(<span class="number">230</span>, <span class="number">3</span>, ts), <span class="number">228</span>)</span><br><span class="line">&#125;)&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 以 <code>k</code> 個 towns 來作為陣列，並且加總然後選擇小於 <code>t</code> miles 的數字，並且找出最大值<br>想法(2): 這邊查到 <code>combination</code> 這個 ruby 的方法減少很多麻煩… 寫了好幾題覺得 ruby 真好 ·＿·</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201009/20120826gfkMqRiDI0.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201009/20120826gfkMqRiDI0.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/rjm78PEyYLc" target="_blank" rel="noopener">Unsplash Ergita Sela</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Array/combination" target="_blank" rel="noopener">Ruby - apidock combination</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">JS - MDN Array.prototype.concat()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_best_sum</span><span class="params">(t, k, ls)</span></span></span><br><span class="line">  ls.combination(k)</span><br><span class="line">    .map&#123; <span class="params">|array|</span> array.reduce(<span class="symbol">:+</span>) &#125;</span><br><span class="line">    .select&#123; <span class="params">|sum|</span> sum &lt;= t &#125;</span><br><span class="line">    .max</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_best_sum</span><span class="params">(t, k, ls)</span></span></span><br><span class="line">  ls.combination(k).map(&amp;<span class="symbol">:sum</span>).reject &#123; <span class="params">|n|</span> n &gt; t &#125;.max</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chooseBestSum</span>(<span class="params">t, k, ls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> biggestCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> recurseTowns = <span class="function"><span class="keyword">function</span>(<span class="params">townsSoFar, lastIndex</span>) </span>&#123;</span><br><span class="line">    townsSoFar = townsSoFar || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (townsSoFar.length === k) &#123;</span><br><span class="line">      <span class="keyword">var</span> sumDistance = townsSoFar.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b);</span><br><span class="line">      <span class="keyword">if</span> (sumDistance &lt;= t &amp;&amp; sumDistance &gt; biggestCount) &#123;</span><br><span class="line">        biggestCount = sumDistance;</span><br><span class="line">      &#125;      </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = lastIndex + <span class="number">1</span> || <span class="number">0</span>; i &lt; ls.length; i++) &#123;</span><br><span class="line">      recurseTowns(townsSoFar.concat(ls[i]), i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  recurseTowns();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> biggestCount || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;24-Best-travel&quot;&gt;&lt;a href=&quot;#24-Best-travel&quot; class=&quot;headerlink&quot; title=&quot;24 - Best travel&quot;&gt;&lt;/a&gt;24 - Best travel&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;John and Mary want to travel between a few towns A, B, C … Mary has on a sheet of paper a list of distances between these towns. &lt;code&gt;ls = [50, 55, 57, 58, 60]&lt;/code&gt;. John is tired of driving and he says to Mary that he doesn’t want to drive more than &lt;code&gt;t = 174&lt;/code&gt; miles and he will visit only &lt;code&gt;3&lt;/code&gt; towns.&lt;/p&gt;
&lt;p&gt;Which distances, hence which towns, they will choose so that the sum of the distances is the biggest possible to please Mary and John?&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;With list &lt;code&gt;ls&lt;/code&gt; and 3 towns to visit they can make a choice between: &lt;code&gt;[50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The sums of distances are then: &lt;code&gt;162, 163, 165, 165, 167, 168, 170, 172, 173, 175&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The biggest possible sum taking a limit of 174 into account is then 173 and the distances of the 3 corresponding towns is &lt;code&gt;[55, 58, 60]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function chooseBestSum (or &lt;code&gt;choose_best_sum&lt;/code&gt; or … depending on the language) will take as parameters t (maximum sum of distances, integer &amp;gt;= 0), &lt;code&gt;k&lt;/code&gt; (number of towns to visit, k &amp;gt;= 1) and &lt;code&gt;ls&lt;/code&gt; (list of distances, all distances are positive or null integers and this list has at least one element). The function returns the “best” sum ie the biggest possible sum of k distances less than or equal to the given limit t, if that sum exists, or otherwise nil, null, None, Nothing, depending on the language. With C++, C, Rust, Swift, Go, Kotlin return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>23 - Number of Proper Fractions with Denominator d</title>
    <link href="http://chestertang.site/2020/10/08/codewars23/"/>
    <id>http://chestertang.site/2020/10/08/codewars23/</id>
    <published>2020-10-08T01:00:00.000Z</published>
    <updated>2020-10-08T04:21:10.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23-Number-of-Proper-Fractions-with-Denominator-d"><a href="#23-Number-of-Proper-Fractions-with-Denominator-d" class="headerlink" title="23 - Number of Proper Fractions with Denominator d"></a>23 - Number of Proper Fractions with Denominator d</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>If n is the numerator and d the denominator of a fraction, that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.</p><p>For example <code>5/16</code> is a proper fraction, while <code>6/16</code> is not, as both 6 and 16 are divisible by 2, thus the fraction can be reduced to <code>3/8</code>.</p><p>Now, if you consider a given number d, how many proper fractions can be built using d as a denominator?</p><p>For example, let’s assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.</p><p>You are to build a function that computes how many proper fractions you can build with a given denominator:</p><p>The order of the permutations doesn’t matter.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proper_fractions(<span class="number">1</span>)==<span class="number">0</span></span><br><span class="line">proper_fractions(<span class="number">2</span>)==<span class="number">1</span></span><br><span class="line">proper_fractions(<span class="number">5</span>)==<span class="number">4</span></span><br><span class="line">proper_fractions(<span class="number">15</span>)==<span class="number">8</span></span><br><span class="line">proper_fractions(<span class="number">25</span>)==<span class="number">20</span></span><br></pre></td></tr></table></figure><p>Be ready to handle big numbers.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proper_fractions</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(proper_fractions(<span class="number">1</span>),<span class="number">0</span>)</span><br><span class="line">Test.assert_equals(proper_fractions(<span class="number">2</span>),<span class="number">1</span>)</span><br><span class="line">Test.assert_equals(proper_fractions(<span class="number">5</span>),<span class="number">4</span>)</span><br><span class="line">Test.assert_equals(proper_fractions(<span class="number">15</span>),<span class="number">8</span>)</span><br><span class="line">Test.assert_equals(proper_fractions(<span class="number">25</span>),<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">properFractions</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(properFractions(<span class="number">1</span>),<span class="number">0</span>);</span><br><span class="line">Test.assertEquals(properFractions(<span class="number">2</span>),<span class="number">1</span>);</span><br><span class="line">Test.assertEquals(properFractions(<span class="number">5</span>),<span class="number">4</span>);</span><br><span class="line">Test.assertEquals(properFractions(<span class="number">15</span>),<span class="number">8</span>);</span><br><span class="line">Test.assertEquals(properFractions(<span class="number">25</span>),<span class="number">20</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 一開始我是直接暴力破解的，但發現時間複雜度很高，所以沒過 ·＿＿·<br>想法(2): 其實題目就是 <code>1 ~ N 中與 N 互質的數</code>，後來找到原來是 <code>歐拉函示(?)</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201008/201208262DGebhLPVN.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201008/201208262DGebhLPVN.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/GogyKfxfA8o" target="_blank" rel="noopener">Unsplash Annie Spratt</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://ruby-doc.org/core-2.5.0/Math.html" target="_blank" rel="noopener">Ruby - apidock doc Rational</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt" target="_blank" rel="noopener">JS - MDN Math.sqrt()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proper_fractions</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  result = n</span><br><span class="line">  (<span class="number">2</span>..Math.sqrt(n).to_i).each&#123; <span class="params">|x|</span></span><br><span class="line">    <span class="keyword">if</span> n % x &lt; <span class="number">1</span></span><br><span class="line">      n = n / x <span class="keyword">while</span> n % x &lt; <span class="number">1</span> </span><br><span class="line">      result = result - result / x</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  result = result - result / n <span class="keyword">if</span> n &gt; <span class="number">1</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">properFractions</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = n, a = n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(a); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a % i === <span class="number">0</span>) &#123;</span><br><span class="line">      res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(a % i === <span class="number">0</span>) a /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(a &gt; <span class="number">1</span>)</span><br><span class="line">    res = res / a * (a - <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;23-Number-of-Proper-Fractions-with-Denominator-d&quot;&gt;&lt;a href=&quot;#23-Number-of-Proper-Fractions-with-Denominator-d&quot; class=&quot;headerlink&quot; title=&quot;23 - Number of Proper Fractions with Denominator d&quot;&gt;&lt;/a&gt;23 - Number of Proper Fractions with Denominator d&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;If n is the numerator and d the denominator of a fraction, that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.&lt;/p&gt;
&lt;p&gt;For example &lt;code&gt;5/16&lt;/code&gt; is a proper fraction, while &lt;code&gt;6/16&lt;/code&gt; is not, as both 6 and 16 are divisible by 2, thus the fraction can be reduced to &lt;code&gt;3/8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if you consider a given number d, how many proper fractions can be built using d as a denominator?&lt;/p&gt;
&lt;p&gt;For example, let’s assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.&lt;/p&gt;
&lt;p&gt;You are to build a function that computes how many proper fractions you can build with a given denominator:&lt;/p&gt;
&lt;p&gt;The order of the permutations doesn’t matter.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proper_fractions(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proper_fractions(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proper_fractions(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proper_fractions(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proper_fractions(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>22 - Permutations</title>
    <link href="http://chestertang.site/2020/10/07/codewars22/"/>
    <id>http://chestertang.site/2020/10/07/codewars22/</id>
    <published>2020-10-07T01:00:00.000Z</published>
    <updated>2020-10-07T01:29:44.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-Permutations"><a href="#22-Permutations" class="headerlink" title="22 - Permutations"></a>22 - Permutations</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>In this kata you have to create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders.</p><p>Examples:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permutations('a'); # ['a']</span><br><span class="line">permutations('ab'); # ['ab', 'ba']</span><br><span class="line">permutations('aabb'); # ['aabb', 'abab', 'abba', 'baab', 'baba', 'bbaa']</span><br></pre></td></tr></table></figure><p>The order of the permutations doesn’t matter.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(string)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Test.assert_equals(permutations('a').sort, ['a']);</span></span><br><span class="line">Test.assert_equals(permutations(<span class="string">'ab'</span>).sort, [<span class="string">'ab'</span>, <span class="string">'ba'</span>])</span><br><span class="line">Test.assert_equals(permutations(<span class="string">'aabb'</span>).sort, [<span class="string">'aabb'</span>, <span class="string">'abab'</span>, <span class="string">'abba'</span>, <span class="string">'baab'</span>, <span class="string">'baba'</span>, <span class="string">'bbaa'</span>])</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutations</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'permutations'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'examples from description'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.assertSimilar(permutations(<span class="string">'a'</span>), [<span class="string">'a'</span>]);</span><br><span class="line">    Test.assertSimilar(permutations(<span class="string">'ab'</span>).sort(), [<span class="string">'ab'</span>, <span class="string">'ba'</span>].sort());</span><br><span class="line">    Test.assertSimilar(permutations(<span class="string">'aabb'</span>).sort(), [<span class="string">'aabb'</span>, <span class="string">'abab'</span>, <span class="string">'abba'</span>, <span class="string">'baab'</span>, <span class="string">'baba'</span>, <span class="string">'bbaa'</span>].sort());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 字組的所有排列組合，發現 ruby 連這種東西都有，寫起來就是簡潔又快速，真的方便 ·＿＿·</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201007/20120826ivLm6ehvW5.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201007/20120826ivLm6ehvW5.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/8pb7Hq539Zw" target="_blank" rel="noopener">Unsplash XPS</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Array/permutation" target="_blank" rel="noopener">Ruby - apidock permutation</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">JS - Array.prototype.indexOf()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">JS - String.prototype.substring()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">JS - Array.prototype.concat()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(string)</span></span></span><br><span class="line">  string.chars.permutation.map(&amp;<span class="symbol">:join</span>).uniq</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutations</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (string.length &lt;= <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> [string];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; string.length; i++)&#123;</span><br><span class="line">      result = result.concat(permutations(string.substring(<span class="number">0</span>, i) + string.substring(i + <span class="number">1</span>)).map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string[i] + e;</span><br><span class="line">      &#125;).filter(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result.indexOf(e) === <span class="number">-1</span>;</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;22-Permutations&quot;&gt;&lt;a href=&quot;#22-Permutations&quot; class=&quot;headerlink&quot; title=&quot;22 - Permutations&quot;&gt;&lt;/a&gt;22 - Permutations&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;In this kata you have to create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;permutations(&#39;a&#39;); # [&#39;a&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;permutations(&#39;ab&#39;); # [&#39;ab&#39;, &#39;ba&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;permutations(&#39;aabb&#39;); # [&#39;aabb&#39;, &#39;abab&#39;, &#39;abba&#39;, &#39;baab&#39;, &#39;baba&#39;, &#39;bbaa&#39;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The order of the permutations doesn’t matter.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#your code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>21 - Snail</title>
    <link href="http://chestertang.site/2020/10/06/codewars21/"/>
    <id>http://chestertang.site/2020/10/06/codewars21/</id>
    <published>2020-10-06T01:00:00.000Z</published>
    <updated>2020-10-06T01:26:57.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21-Snail"><a href="#21-Snail" class="headerlink" title="21 - Snail"></a>21 - Snail</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Snail Sort</p><p>Given an <code>n x n</code> array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">         [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">         [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">snail(array) <span class="comment">#=&gt; [1,2,3,6,9,8,7,4,5]</span></span><br></pre></td></tr></table></figure><p>For better understanding, please follow the numbers of the next array consecutively:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">         [<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],</span><br><span class="line">         [<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]]</span><br><span class="line">snail(array) <span class="comment">#=&gt; [1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><p>NOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.</p><p>NOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array <code>[[]]</code>.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snail</span><span class="params">(array)</span></span></span><br><span class="line">  <span class="comment"># enjoy</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span> <span class="title">input</span> , <span class="title">expected</span></span></span><br><span class="line">  output = snail(input)</span><br><span class="line">  Test.expect(expected == output, <span class="string">"When snail(<span class="subst">#&#123;input&#125;</span>) expected <span class="subst">#&#123;expected&#125;</span> but got <span class="subst">#&#123;output&#125;</span>"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test( [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]] , [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snail = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// enjoy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assertDeepEquals(snail([[]]), []);</span><br><span class="line">Test.assertDeepEquals(snail([[<span class="number">1</span>]]), [<span class="number">1</span>]);</span><br><span class="line">Test.assertDeepEquals(snail([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">Test.assertDeepEquals(snail([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>], [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>], [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>]]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">13</span>]);</span><br><span class="line">Test.assertDeepEquals(snail([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">7</span>], [<span class="number">19</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">8</span>], [<span class="number">18</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">35</span>, <span class="number">26</span>, <span class="number">9</span>], [<span class="number">17</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">10</span>], [<span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]]), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>]);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 需要花時間找一下規律，每次將陣列取第一個的時候，後面剩餘的陣列必須還有些動作來轉換<br>想法(2): 轉換直至陣列為空為止，可以透過遞迴或者是 while 迴圈來寫</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201006/20120826BoD8viU9wc.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201006/20120826BoD8viU9wc.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/sTo3IYhYC_c" target="_blank" rel="noopener">Unsplash Dagny Reese</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Array/flatten" target="_blank" rel="noopener">Ruby - apidock flatten</a></li><li><a href="https://apidock.com/ruby/Array/transpose" target="_blank" rel="noopener">Ruby - apidock transpose</a></li><li><a href="https://apidock.com/ruby/Array/reverse" target="_blank" rel="noopener">Ruby - apidock reverse</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">JS - MDN shift</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener">JS - MDN pop</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">JS - MDN reverse</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snail</span><span class="params">(array)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">while</span> array.flatten.any?</span><br><span class="line">    result &lt;&lt; array.shift</span><br><span class="line">    array = array.transpose.reverse</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result.flatten</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snail</span><span class="params">(array)</span></span></span><br><span class="line">  array.empty? ? [] : array.shift + snail(array.transpose.reverse)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snail</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vector = [];</span><br><span class="line">  <span class="keyword">while</span> (array.length) &#123;</span><br><span class="line">    vector.push(...array.shift());</span><br><span class="line">    array.map(<span class="function"><span class="params">row</span> =&gt;</span> vector.push(row.pop()));</span><br><span class="line">    array.reverse().map(<span class="function"><span class="params">row</span> =&gt;</span> row.reverse());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;21-Snail&quot;&gt;&lt;a href=&quot;#21-Snail&quot; class=&quot;headerlink&quot; title=&quot;21 - Snail&quot;&gt;&lt;/a&gt;21 - Snail&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Snail Sort&lt;/p&gt;
&lt;p&gt;Given an &lt;code&gt;n x n&lt;/code&gt; array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;array = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snail(array) &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; [1,2,3,6,9,8,7,4,5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For better understanding, please follow the numbers of the next array consecutively:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;array = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snail(array) &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; [1,2,3,4,5,6,7,8,9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;NOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.&lt;/p&gt;
&lt;p&gt;NOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array &lt;code&gt;[[]]&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>20 - Scramblies</title>
    <link href="http://chestertang.site/2020/10/05/codewars20/"/>
    <id>http://chestertang.site/2020/10/05/codewars20/</id>
    <published>2020-10-05T01:00:00.000Z</published>
    <updated>2020-10-05T01:23:44.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-Scramblies"><a href="#20-Scramblies" class="headerlink" title="20 - Scramblies"></a>20 - Scramblies</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Complete the function scramble(str1, str2) that returns true if a portion of str1 characters can be rearranged to match str2, otherwise returns false.</p><p>Notes:</p><ul><li>Only lower case letters will be used (a-z). No punctuation or digits will be included.</li><li>Performance needs to be considered</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Input strings s1 and s2 are <span class="literal">null</span> terminated.</span><br></pre></td></tr></table></figure><p>Examples</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scramble(<span class="string">'rkqodlw'</span>, <span class="string">'world'</span>) ==&gt; True</span><br><span class="line">scramble(<span class="string">'cedewaraaossoqqyt'</span>, <span class="string">'codewars'</span>) ==&gt; True</span><br><span class="line">scramble(<span class="string">'katas'</span>, <span class="string">'steak'</span>) ==&gt; False</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(scramble(<span class="string">'rkqodlw'</span>,<span class="string">'world'</span>),<span class="literal">true</span>)</span><br><span class="line">Test.assert_equals(scramble(<span class="string">'cedewaraaossoqqyt'</span>,<span class="string">'codewars'</span>),<span class="literal">true</span>)</span><br><span class="line">Test.assert_equals(scramble(<span class="string">'katas'</span>,<span class="string">'steak'</span>),<span class="literal">false</span>)</span><br><span class="line">Test.assert_equals(scramble(<span class="string">'scriptjava'</span>,<span class="string">'javascript'</span>),<span class="literal">true</span>)</span><br><span class="line">Test.assert_equals(scramble(<span class="string">'scriptingjava'</span>,<span class="string">'javascript'</span>),<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scramble</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//code me</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Example Tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'rkqodlw'</span>,<span class="string">'world'</span>),<span class="literal">true</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'cedewaraaossoqqyt'</span>,<span class="string">'codewars'</span>),<span class="literal">true</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'katas'</span>,<span class="string">'steak'</span>),<span class="literal">false</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'scriptjava'</span>,<span class="string">'javascript'</span>),<span class="literal">true</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'scriptingjava'</span>,<span class="string">'javascript'</span>),<span class="literal">true</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'scriptsjava'</span>,<span class="string">'javascripts'</span>),<span class="literal">true</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'jscripts'</span>,<span class="string">'javascript'</span>),<span class="literal">false</span>);</span><br><span class="line">  Test.assertEquals(scramble(<span class="string">'aabbcamaomsccdd'</span>,<span class="string">'commas'</span>),<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 後者的值，跟前者比較時，要所有的字都有在前者且數量也要ㄧ樣<br>想法(2): 將後者的值透過 <code>uniq</code> 後，跑迴圈來比較 <code>count</code> 有無 <code>小於等於</code> 前者</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201005/20120826IN9SHwnVlw.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201005/20120826IN9SHwnVlw.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/VKzSN-Xv6So" target="_blank" rel="noopener">Unsplash Buse Doga Ay</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Array/uniq" target="_blank" rel="noopener">Ruby - apidock Uniq</a></li><li><a href="https://apidock.com/ruby/Enumerable/all%3F" target="_blank" rel="noopener">Ruby - apidock All?</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">JS - MDN Array.prototype.every()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span></span></span><br><span class="line">  s3 = s1.split(<span class="string">""</span>)</span><br><span class="line">  s2.split(<span class="string">""</span>).each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">    s3.each_with_index&#123; <span class="params">|y,i|</span> (s3.delete_at i ; <span class="keyword">break</span>) <span class="keyword">if</span> y == x &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  s1.length - s2.length == s3.join.length ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span></span></span><br><span class="line">  s2.chars.uniq.all?&#123; <span class="params">|x|</span> s2.count(x) &lt;= s1.count(x) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scramble</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...str2].every(<span class="function"><span class="params">val</span> =&gt;</span> str2.split(val).length &lt;= str1.split(val).length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;20-Scramblies&quot;&gt;&lt;a href=&quot;#20-Scramblies&quot; class=&quot;headerlink&quot; title=&quot;20 - Scramblies&quot;&gt;&lt;/a&gt;20 - Scramblies&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Complete the function scramble(str1, str2) that returns true if a portion of str1 characters can be rearranged to match str2, otherwise returns false.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only lower case letters will be used (a-z). No punctuation or digits will be included.&lt;/li&gt;
&lt;li&gt;Performance needs to be considered&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input strings s1 and s2 are &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; terminated.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Examples&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scramble(&lt;span class=&quot;string&quot;&gt;&#39;rkqodlw&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;) ==&amp;gt; True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scramble(&lt;span class=&quot;string&quot;&gt;&#39;cedewaraaossoqqyt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;codewars&#39;&lt;/span&gt;) ==&amp;gt; True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scramble(&lt;span class=&quot;string&quot;&gt;&#39;katas&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;steak&#39;&lt;/span&gt;) ==&amp;gt; False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>19 - RGB To Hex Conversion</title>
    <link href="http://chestertang.site/2020/10/04/codewars19/"/>
    <id>http://chestertang.site/2020/10/04/codewars19/</id>
    <published>2020-10-04T01:00:00.000Z</published>
    <updated>2020-10-04T12:17:54.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-RGB-To-Hex-Conversion"><a href="#19-RGB-To-Hex-Conversion" class="headerlink" title="19 - RGB To Hex Conversion"></a>19 - RGB To Hex Conversion</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>The rgb function is incomplete. Complete it so that passing in RGB decimal values will result in a hexadecimal representation being returned. Valid decimal values for RGB are 0 - 255. Any values that fall out of that range must be rounded to the closest valid value.</p><p>Note: Your answer should always be 6 characters long, the shorthand with 3 will not work here.</p><p>The following are examples of expected output values:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rgb(255, 255, 255) # returns FFFFFF</span><br><span class="line">rgb(255, 255, 300) # returns FFFFFF</span><br><span class="line">rgb(0,0,0) # returns 000000</span><br><span class="line">rgb(148, 0, 211) # returns 9400D3</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  <span class="comment"># complete this function</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="string">'000000'</span>)</span><br><span class="line">Test.assert_equals(rgb(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">20</span>), <span class="string">'000000'</span>)</span><br><span class="line">Test.assert_equals(rgb(<span class="number">300</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="string">'FFFFFF'</span>)</span><br><span class="line">Test.assert_equals(rgb(<span class="number">173</span>,<span class="number">255</span>,<span class="number">47</span>), <span class="string">'ADFF2F'</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb</span>(<span class="params">r, g, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// complete this function  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="string">'000000'</span>)</span><br><span class="line">Test.assertEquals(rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-20</span>), <span class="string">'000000'</span>)</span><br><span class="line">Test.assertEquals(rgb(<span class="number">300</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="string">'FFFFFF'</span>)</span><br><span class="line">Test.assertEquals(rgb(<span class="number">173</span>,<span class="number">255</span>,<span class="number">47</span>), <span class="string">'ADFF2F'</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 不管傳進來的值 <code>(r, g, b)</code> 都先考慮當數字不在 <code>0 ~ 255</code> 時，需要給最大、小值<br>想法(2): 判斷完成後，再轉為 <code>16</code> 進位 </p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201004/20120826ebtZaU8Oav.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201004/20120826ebtZaU8Oav.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/zSCHyhiRSeQ" target="_blank" rel="noopener">Unsplash Jonathan Kemper</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://ruby-doc.org/core-2.4.0/Comparable.html" target="_blank" rel="noopener">Ruby - apidock Clamp</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener">JS - MDN Number</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  [r, g, b].map <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    <span class="keyword">if</span> c &lt;= <span class="number">0</span> </span><br><span class="line">      <span class="string">"00"</span></span><br><span class="line">    <span class="keyword">elsif</span> c &gt; <span class="number">255</span></span><br><span class="line">      <span class="string">"FF"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      c.to_s(<span class="number">16</span>).upcase    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>.join(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  <span class="string">"%.2X"</span> * <span class="number">3</span> % [r, g, b].map&#123; <span class="params">|i|</span> [[i, <span class="number">255</span>].min, <span class="number">0</span>].max &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  <span class="string">"%.2X"</span> * <span class="number">3</span> % [r, g, b].map&#123; <span class="params">|i|</span> i.clamp(<span class="number">0</span>, <span class="number">255</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb</span>(<span class="params">r, g, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toHex(r) + toHex(g) + toHex(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHex</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(color &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"00"</span>;</span><br><span class="line">  <span class="keyword">if</span>(color &gt; <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"FF"</span>;</span><br><span class="line">  <span class="keyword">return</span> ( <span class="string">"0"</span> + (<span class="built_in">Number</span>(color).toString(<span class="number">16</span>)) )</span><br><span class="line">                               .slice(<span class="number">-2</span>)</span><br><span class="line">                               .toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19-RGB-To-Hex-Conversion&quot;&gt;&lt;a href=&quot;#19-RGB-To-Hex-Conversion&quot; class=&quot;headerlink&quot; title=&quot;19 - RGB To Hex Conversion&quot;&gt;&lt;/a&gt;19 - RGB To Hex Conversion&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;The rgb function is incomplete. Complete it so that passing in RGB decimal values will result in a hexadecimal representation being returned. Valid decimal values for RGB are 0 - 255. Any values that fall out of that range must be rounded to the closest valid value.&lt;/p&gt;
&lt;p&gt;Note: Your answer should always be 6 characters long, the shorthand with 3 will not work here.&lt;/p&gt;
&lt;p&gt;The following are examples of expected output values:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rgb(255, 255, 255) # returns FFFFFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb(255, 255, 300) # returns FFFFFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb(0,0,0) # returns 000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb(148, 0, 211) # returns 9400D3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(r, g, b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# complete this function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>18 - Maximum subarray sum</title>
    <link href="http://chestertang.site/2020/10/03/codewars18/"/>
    <id>http://chestertang.site/2020/10/03/codewars18/</id>
    <published>2020-10-03T01:00:00.000Z</published>
    <updated>2020-10-03T00:22:31.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-Maximum-subarray-sum"><a href="#18-Maximum-subarray-sum" class="headerlink" title="18 - Maximum subarray sum"></a>18 - Maximum subarray sum</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxSequence [<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// should be 6: [4, -1, 2, 1]</span></span><br></pre></td></tr></table></figure><p>Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</p><p>Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sequence</span><span class="params">(arr)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"Tests"</span>) <span class="keyword">do</span></span><br><span class="line">Test.assert_equals(max_sequence([]), <span class="number">0</span>)</span><br><span class="line">Test.assert_equals(max_sequence([-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>]), <span class="number">6</span>)</span><br><span class="line">Test.assert_equals(max_sequence([<span class="number">11</span>]), <span class="number">11</span>)</span><br><span class="line">Test.assert_equals(max_sequence([-<span class="number">32</span>]), <span class="number">0</span>)</span><br><span class="line">Test.assert_equals(max_sequence([-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">7</span>, <span class="number">4</span>, -<span class="number">10</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>]), <span class="number">12</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSequence = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe( <span class="string">"maxSequence"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  it(<span class="string">"should work on an empty array"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Test.assertEquals(maxSequence([]), <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">"should work on the example"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Test.assertEquals(maxSequence([<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]), <span class="number">6</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 透過迴圈從 <code>1 ~ x</code> 群來計算所有加總後，再來比較所有算出來的結果哪個是最大的而得到答案。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201003/201208268AC5hxNboA.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201003/201208268AC5hxNboA.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/k2Kcwkandwg" target="_blank" rel="noopener">Unsplash Christin Hume</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/each_cons" target="_blank" rel="noopener">Ruby - apidock Each_cons</a></li><li><a href="https://apidock.com/ruby/Array/flatten" target="_blank" rel="noopener">Ruby - apidock flatten</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max" target="_blank" rel="noopener">JS - MDN Math.max()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sequence</span><span class="params">(arr)</span></span></span><br><span class="line">  (<span class="number">1</span>..arr.size).map &#123; <span class="params">|i|</span> arr.each_cons(i).map(&amp;<span class="symbol">:sum</span>) &#125;</span><br><span class="line">               .flatten</span><br><span class="line">               .push(<span class="number">0</span>)</span><br><span class="line">               .max</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="keyword">var</span> maxSequence = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> maxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> currentSum = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    currentSum += arr[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (currentSum &lt;= <span class="number">0</span>) </span><br><span class="line">      currentSum = <span class="number">0</span></span><br><span class="line">    maxSum = <span class="built_in">Math</span>.max(maxSum, currentSum);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18-Maximum-subarray-sum&quot;&gt;&lt;a href=&quot;#18-Maximum-subarray-sum&quot; class=&quot;headerlink&quot; title=&quot;18 - Maximum subarray sum&quot;&gt;&lt;/a&gt;18 - Maximum subarray sum&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;maxSequence [&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// should be 6: [4, -1, 2, 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.&lt;/p&gt;
&lt;p&gt;Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max_sequence&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arr)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#your code here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>17 - Valid Parentheses</title>
    <link href="http://chestertang.site/2020/10/02/codewars17/"/>
    <id>http://chestertang.site/2020/10/02/codewars17/</id>
    <published>2020-10-02T01:00:00.000Z</published>
    <updated>2020-10-02T07:34:11.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Valid-Parentheses"><a href="#17-Valid-Parentheses" class="headerlink" title="17 - Valid Parentheses"></a>17 - Valid Parentheses</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it’s invalid.</p><p>Examples</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"()"</span>              =&gt;  <span class="literal">true</span></span><br><span class="line"><span class="string">")(()))"</span>          =&gt;  <span class="literal">false</span></span><br><span class="line"><span class="string">"("</span>               =&gt;  <span class="literal">false</span></span><br><span class="line"><span class="string">"(())((()())())"</span>  =&gt;  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Constraints</p><p><code>0 &lt;= input.length &lt;= 100</code></p><p>Along with opening (<code>(</code>) and closing (<code>)</code>) parenthesis, input may contain any valid ASCII characters. Furthermore, the input string may be empty and/or not contain any parentheses at all. Do not treat other forms of brackets as parentheses (e.g. <code>[]</code>, <code>{}</code>, <code>&lt;&gt;</code>).</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_parentheses</span><span class="params">(string)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(valid_parentheses(<span class="string">"  ("</span>),<span class="literal">false</span>)</span><br><span class="line">Test.assert_equals(valid_parentheses(<span class="string">")test"</span>),<span class="literal">false</span>)</span><br><span class="line">Test.assert_equals(valid_parentheses(<span class="string">""</span>),<span class="literal">true</span>)</span><br><span class="line">Test.assert_equals(valid_parentheses(<span class="string">"hi())("</span>),<span class="literal">false</span>)</span><br><span class="line">Test.assert_equals(valid_parentheses(<span class="string">"hi(hi)()"</span>),<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validParentheses</span>(<span class="params">parens</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//TODO </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(validParentheses( <span class="string">"()"</span> ), <span class="literal">true</span>);</span><br><span class="line">Test.assertEquals(validParentheses( <span class="string">"())"</span> ), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 唯有先左括弧 <code>(</code> 再配上 <code>)</code> 才可以有機會回傳 <code>true</code>，反之先 <code>)</code> 再左 <code>(</code> 還是應該回傳 <code>false</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201002/20120826gDzqXRaQ1t.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201002/20120826gDzqXRaQ1t.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/UGkKSDjQKUQ" target="_blank" rel="noopener">Unsplash Thought Catalog</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Fixnum/zero%3F" target="_blank" rel="noopener">Ruby - apidock Zero?</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">JS - MDN Array.prototype.includes()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_parentheses</span><span class="params">(string)</span></span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  string.chars.each <span class="keyword">do</span> <span class="params">|char|</span></span><br><span class="line">    count += <span class="number">1</span> <span class="keyword">if</span> char == <span class="string">"("</span></span><br><span class="line">    count -= <span class="number">1</span> <span class="keyword">if</span> char == <span class="string">")"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> count &lt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  count.zero?</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validParentheses</span>(<span class="params">parens</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; parens.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parens[i] === <span class="string">'('</span>) count++;</span><br><span class="line">    <span class="keyword">if</span> (parens[i] === <span class="string">')'</span>) count--;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> count === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validParentheses</span>(<span class="params">parens</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(parens.includes(<span class="string">"()"</span>))&#123;</span><br><span class="line">    parens = parens.replace(<span class="string">"()"</span>, <span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (parens === <span class="string">""</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17-Valid-Parentheses&quot;&gt;&lt;a href=&quot;#17-Valid-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;17 - Valid Parentheses&quot;&gt;&lt;/a&gt;17 - Valid Parentheses&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it’s invalid.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;()&quot;&lt;/span&gt;              =&amp;gt;  &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;)(()))&quot;&lt;/span&gt;          =&amp;gt;  &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;               =&amp;gt;  &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;(())((()())())&quot;&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Constraints&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0 &amp;lt;= input.length &amp;lt;= 100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Along with opening (&lt;code&gt;(&lt;/code&gt;) and closing (&lt;code&gt;)&lt;/code&gt;) parenthesis, input may contain any valid ASCII characters. Furthermore, the input string may be empty and/or not contain any parentheses at all. Do not treat other forms of brackets as parentheses (e.g. &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>16 - Memoized Fibonacci</title>
    <link href="http://chestertang.site/2020/10/01/codewars16/"/>
    <id>http://chestertang.site/2020/10/01/codewars16/</id>
    <published>2020-10-01T01:00:00.000Z</published>
    <updated>2020-10-01T06:36:16.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="16-Memoized-Fibonacci"><a href="#16-Memoized-Fibonacci" class="headerlink" title="16 - Memoized Fibonacci"></a>16 - Memoized Fibonacci</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Problem Context</p><p>The <a href="https://en.wikipedia.org/wiki/Fibonacci_number" target="_blank" rel="noopener">Fibonacci</a> sequence is traditionally used to explain tree recursion.</p><p>This algorithm serves welll its educative purpose but it’s <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="noopener">tremendously inefficient</a>, not only because of recursion, but because we invoke the fibonacci function twice, and the right branch of recursion (i.e. <code>fibonacci(n-2)</code>) recalculates all the Fibonacci numbers already calculated by the left branch (i.e. <code>fibonacci(n-1)</code>).</p><p>This algorithm is so inefficient that the time to calculate any Fibonacci number over 50 is simply too much. You may go for a cup of coffee or go take a nap while you wait for the answer. But if you try it here in Code Wars you will most likely get a code timeout before any answers.</p><p>For this particular Kata we want to implement the memoization solution. This will be cool because it will let us keep using the tree recursion algorithm while still keeping it sufficiently optimized to get an answer very rapidly.</p><p>The trick of the memoized version is that we will keep a cache data structure (most likely an associative array) where we will store the Fibonacci numbers as we calculate them. When a Fibonacci number is calculated, we first look it up in the cache, if it’s not there, we calculate it and put it in the cache, otherwise we returned the cached number.</p><p>Refactor the function into a recursive Fibonacci function that using a memoized data structure avoids the deficiencies of tree recursion Can you make it so the memoization cache is private to this function?</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> n <span class="keyword">if</span> (<span class="number">0</span>..<span class="number">1</span>).<span class="keyword">include</span>? n</span><br><span class="line">  fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(fibonacci(<span class="number">50</span>), <span class="number">12586269025</span>)</span><br><span class="line">Test.assert_equals(fibonacci(<span class="number">60</span>), <span class="number">1548008755920</span>)</span><br><span class="line">Test.assert_equals(fibonacci(<span class="number">70</span>), <span class="number">190392490709135</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Kata Test Suite"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  it(<span class="string">"should calculate large Fibonacci numbers"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Test.assertEquals(fibonacci(<span class="number">70</span>), <span class="number">190392490709135</span>);</span><br><span class="line">    Test.assertEquals(fibonacci(<span class="number">60</span>), <span class="number">1548008755920</span>);</span><br><span class="line">    Test.assertEquals(fibonacci(<span class="number">50</span>), <span class="number">12586269025</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): <code>斐波那契数列</code> 為最經典的面試考題，從 <code>Init</code> 初始化的題目可以看出來不考慮到記憶體的情況下的解法及想法。<br>想法(2): 小於 <code>1~2</code> 的時候應該回傳傳進來的值，更大的數可以透過 <a href="https://en.wikipedia.org/wiki/Recursive_function" target="_blank" rel="noopener">遞迴</a> 來執行</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20201001/20120826slBAZSDayi.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20201001/20120826slBAZSDayi.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/eBRTYyjwpRY" target="_blank" rel="noopener">Unsplash Radek Grzybowski</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Hash/keys" target="_blank" rel="noopener">Ruby - apidock Keys</a></li><li><a href="https://apidock.com/ruby/Array/include%3F" target="_blank" rel="noopener">Ruby - apidock Include?</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noopener">JS - MDN Typeof</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line">Fibs = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> n <span class="keyword">if</span> n == <span class="number">0</span> <span class="params">||</span> n == <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> Fibs[n] <span class="keyword">if</span> Fibs.keys.<span class="keyword">include</span>?(n)</span><br><span class="line">  Fibs[n] = fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = memo[n];</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> result !== <span class="string">'number'</span>)&#123;</span><br><span class="line">        result = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">        memo[n] = result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fib;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">return</span> n;</span><br><span class="line">      <span class="keyword">if</span>(cache[n<span class="number">-2</span>] === <span class="literal">undefined</span>)</span><br><span class="line">        cache[n<span class="number">-2</span>] = fibonacci(n<span class="number">-2</span>);</span><br><span class="line">      <span class="keyword">if</span>(cache[n<span class="number">-1</span>] === <span class="literal">undefined</span>)</span><br><span class="line">        cache[n<span class="number">-1</span>] = fibonacci(n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> cache[n<span class="number">-1</span>] + cache[n<span class="number">-2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;16-Memoized-Fibonacci&quot;&gt;&lt;a href=&quot;#16-Memoized-Fibonacci&quot; class=&quot;headerlink&quot; title=&quot;16 - Memoized Fibonacci&quot;&gt;&lt;/a&gt;16 - Memoized Fibonacci&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Problem Context&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fibonacci&lt;/a&gt; sequence is traditionally used to explain tree recursion.&lt;/p&gt;
&lt;p&gt;This algorithm serves welll its educative purpose but it’s &lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tremendously inefficient&lt;/a&gt;, not only because of recursion, but because we invoke the fibonacci function twice, and the right branch of recursion (i.e. &lt;code&gt;fibonacci(n-2)&lt;/code&gt;) recalculates all the Fibonacci numbers already calculated by the left branch (i.e. &lt;code&gt;fibonacci(n-1)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This algorithm is so inefficient that the time to calculate any Fibonacci number over 50 is simply too much. You may go for a cup of coffee or go take a nap while you wait for the answer. But if you try it here in Code Wars you will most likely get a code timeout before any answers.&lt;/p&gt;
&lt;p&gt;For this particular Kata we want to implement the memoization solution. This will be cool because it will let us keep using the tree recursion algorithm while still keeping it sufficiently optimized to get an answer very rapidly.&lt;/p&gt;
&lt;p&gt;The trick of the memoized version is that we will keep a cache data structure (most likely an associative array) where we will store the Fibonacci numbers as we calculate them. When a Fibonacci number is calculated, we first look it up in the cache, if it’s not there, we calculate it and put it in the cache, otherwise we returned the cached number.&lt;/p&gt;
&lt;p&gt;Refactor the function into a recursive Fibonacci function that using a memoized data structure avoids the deficiencies of tree recursion Can you make it so the memoization cache is private to this function?&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>15 - Directions Reduction</title>
    <link href="http://chestertang.site/2020/09/30/codewars15/"/>
    <id>http://chestertang.site/2020/09/30/codewars15/</id>
    <published>2020-09-30T01:00:00.000Z</published>
    <updated>2020-09-30T06:33:27.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-Directions-Reduction"><a href="#15-Directions-Reduction" class="headerlink" title="15 - Directions Reduction"></a>15 - Directions Reduction</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Once upon a time, on a way through the old wild mountainous west,…<br>… a man was given directions to go from one point to another. The directions were “NORTH”, “SOUTH”, “WEST”, “EAST”. Clearly “NORTH” and “SOUTH” are opposite, “WEST” and “EAST” too.</p><p>Going to one direction and coming back the opposite direction right away is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it’s important to save yourself some energy, otherwise you might die of thirst!</p><p>How I crossed a mountain desert the smart way.<br>The directions given to the man are, for example, the following (depending on the language):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"NORTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>, <span class="string">"WEST"</span>, <span class="string">"NORTH"</span>, <span class="string">"WEST"</span>].</span><br></pre></td></tr></table></figure><p>You can immediatly see that going “NORTH” and immediately “SOUTH” is not reasonable, better stay to the same place! So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"WEST"</span>]</span><br></pre></td></tr></table></figure><p>Other examples:</p><p>In <code>[&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;]</code>, the direction “NORTH” + “SOUTH” is going north and coming back right away.</p><p>The path becomes <code>[&quot;EAST&quot;, &quot;WEST&quot;]</code>, now “EAST” and “WEST” annihilate each other, therefore, the final result is [] (nil in Clojure).</p><p>In [“NORTH”, “EAST”, “WEST”, “SOUTH”, “WEST”, “WEST”], “NORTH” and “SOUTH” are not directly opposite but they become directly opposite after the reduction of “EAST” and “WEST” so the whole path is reducible to [“WEST”, “WEST”].</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirReduc</span><span class="params">(arr)</span></span></span><br><span class="line">  ... your code ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"NORTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>, <span class="string">"WEST"</span>, <span class="string">"NORTH"</span>, <span class="string">"WEST"</span>]</span><br><span class="line">Test.assert_equals(dirReduc(a), [<span class="string">"WEST"</span>])</span><br><span class="line">u=[<span class="string">"NORTH"</span>, <span class="string">"WEST"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>]</span><br><span class="line">Test.assert_equals(dirReduc(u), [<span class="string">"NORTH"</span>, <span class="string">"WEST"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>])</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dirReduc</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assertSimilar(dirReduc([<span class="string">"NORTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>, <span class="string">"WEST"</span>, <span class="string">"NORTH"</span>, <span class="string">"WEST"</span>]), [<span class="string">"WEST"</span>])</span><br><span class="line">Test.assertSimilar(dirReduc([<span class="string">"NORTH"</span>, <span class="string">"WEST"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>]), [<span class="string">"NORTH"</span>, <span class="string">"WEST"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>])</span><br><span class="line">Test.assertSimilar(dirReduc([<span class="string">"NORTH"</span>, <span class="string">"SOUTH"</span>, <span class="string">"EAST"</span>, <span class="string">"WEST"</span>, <span class="string">"EAST"</span>, <span class="string">"WEST"</span>]), [])</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 這邊的想法要稍微想一下，如果是南北、東西互相抵銷的時候必須不能顯示，這就會先要一開始定義然後去比比對了。<br>想法(2): 比對宣告的陣列中，如果進來的值對應到相同的，必須被移除在陣列中，沒有的話，則會被推進去。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200930/20120826EqNRv3mPkX.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200930/20120826EqNRv3mPkX.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/j3aqw_0cNQM" target="_blank" rel="noopener">Unsplash Aleks Marinkovic</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Array/pop" target="_blank" rel="noopener">Ruby - apidock Pop</a></li><li><a href="https://apidock.com/ruby/Array/push" target="_blank" rel="noopener">Ruby - apidock Push</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener">JS - MDN Array.prototype.pop()</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">JS - MDN Array.prototype.push()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line">OPPOSITE = &#123;</span><br><span class="line">  <span class="string">"NORTH"</span> =&gt; <span class="string">"SOUTH"</span>,</span><br><span class="line">  <span class="string">"SOUTH"</span> =&gt; <span class="string">"NORTH"</span>,</span><br><span class="line">  <span class="string">"EAST"</span>  =&gt; <span class="string">"WEST"</span>,</span><br><span class="line">  <span class="string">"WEST"</span>  =&gt; <span class="string">"EAST"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirReduc</span><span class="params">(arr)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  arr.each <span class="keyword">do</span> <span class="params">|dir|</span></span><br><span class="line">    OPPOSITE[dir] == result.last ? result.pop : result.push(dir)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="keyword">const</span> OPPOSITE = &#123;</span><br><span class="line">  <span class="string">"NORTH"</span>: <span class="string">"SOUTH"</span>,</span><br><span class="line">  <span class="string">"SOUTH"</span>: <span class="string">"NORTH"</span>,</span><br><span class="line">  <span class="string">"EAST"</span> : <span class="string">"WEST"</span>,</span><br><span class="line">  <span class="string">"WEST"</span> : <span class="string">"EAST"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dirReduc</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (OPPOSITE[item] === result[result.length - <span class="number">1</span>]) &#123;</span><br><span class="line">      result.pop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="keyword">const</span> OPPOSITE = &#123;</span><br><span class="line">  <span class="string">"NORTH"</span>: <span class="string">"SOUTH"</span>,</span><br><span class="line">  <span class="string">"SOUTH"</span>: <span class="string">"NORTH"</span>,</span><br><span class="line">  <span class="string">"EAST"</span> : <span class="string">"WEST"</span>,</span><br><span class="line">  <span class="string">"WEST"</span> : <span class="string">"EAST"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dirReduc</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">    OPPOSITE[item] === result[result.length - <span class="number">1</span>] ? result.pop() : result.push(item)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;15-Directions-Reduction&quot;&gt;&lt;a href=&quot;#15-Directions-Reduction&quot; class=&quot;headerlink&quot; title=&quot;15 - Directions Reduction&quot;&gt;&lt;/a&gt;15 - Directions Reduction&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Once upon a time, on a way through the old wild mountainous west,…&lt;br&gt;… a man was given directions to go from one point to another. The directions were “NORTH”, “SOUTH”, “WEST”, “EAST”. Clearly “NORTH” and “SOUTH” are opposite, “WEST” and “EAST” too.&lt;/p&gt;
&lt;p&gt;Going to one direction and coming back the opposite direction right away is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it’s important to save yourself some energy, otherwise you might die of thirst!&lt;/p&gt;
&lt;p&gt;How I crossed a mountain desert the smart way.&lt;br&gt;The directions given to the man are, for example, the following (depending on the language):&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can immediatly see that going “NORTH” and immediately “SOUTH” is not reasonable, better stay to the same place! So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Other examples:&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>14 - Simple Pig Latin</title>
    <link href="http://chestertang.site/2020/09/29/codewars14/"/>
    <id>http://chestertang.site/2020/09/29/codewars14/</id>
    <published>2020-09-29T01:00:00.000Z</published>
    <updated>2020-09-29T02:59:56.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-Simple-Pig-Latin"><a href="#14-Simple-Pig-Latin" class="headerlink" title="14 - Simple Pig Latin"></a>14 - Simple Pig Latin</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Move the first letter of each word to the end of it, then add “ay” to the end of the word. Leave punctuation marks untouched.</p><p>Examples</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pig_it('Pig latin is cool') # igPay atinlay siay oolcay</span><br><span class="line">pig_it('Hello world !')     # elloHay orldway !</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pig_it</span> <span class="title">text</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(pig_it(<span class="string">'Pig latin is cool'</span>),<span class="string">'igPay atinlay siay oolcay'</span>)</span><br><span class="line">Test.assert_equals(pig_it(<span class="string">'This is my string'</span>),<span class="string">'hisTay siay ymay tringsay'</span>);</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pigIt</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//Code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(pigIt(<span class="string">'Pig latin is cool'</span>),<span class="string">'igPay atinlay siay oolcay'</span>)</span><br><span class="line">Test.assertEquals(pigIt(<span class="string">'This is my string'</span>),<span class="string">'hisTay siay ymay tringsay'</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 第一個想法就是 <code>regex</code> 直接切兩群，然後把第一群接到第二群後面再加上 <code>ay</code> 的字<br>想法(2): 不過畢竟 regex 如果像我ㄧ樣爛，就想說可以繞開看看，把第一個字組在 slice 掉第一個字後，然後再加上 <code>ay</code> 也是可以（傳入值有可能有<code>驚嘆號!</code>、<code>問號?</code>）</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200929/201208261punaj8vOx.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200929/201208261punaj8vOx.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/SL5d_8ywAAA" target="_blank" rel="noopener">Unsplash Glenn Carstens-Peters</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock Gsub</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">JS - MDN String.prototype.slice()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener">JS - MDN String.prototype.charAt()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pig_it</span> <span class="title">text</span></span></span><br><span class="line">  text.gsub(<span class="regexp">/(\w)(\w+)*/</span>, <span class="string">'\2\1ay'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pigIt</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">Array</span> = [];</span><br><span class="line">  <span class="keyword">let</span> split = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (split[i] != <span class="string">'?'</span> &amp;&amp; split[i] != <span class="string">'!'</span>) &#123;</span><br><span class="line">      <span class="built_in">Array</span>.push(split[i].slice(<span class="number">1</span>) + split[i].charAt(<span class="number">0</span>) + <span class="string">'ay'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Array</span>.push(split[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;14-Simple-Pig-Latin&quot;&gt;&lt;a href=&quot;#14-Simple-Pig-Latin&quot; class=&quot;headerlink&quot; title=&quot;14 - Simple Pig Latin&quot;&gt;&lt;/a&gt;14 - Simple Pig Latin&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Move the first letter of each word to the end of it, then add “ay” to the end of the word. Leave punctuation marks untouched.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pig_it(&#39;Pig latin is cool&#39;) # igPay atinlay siay oolcay&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pig_it(&#39;Hello world !&#39;)     # elloHay orldway !&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pig_it&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;text&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>13 - int32 to IPv4</title>
    <link href="http://chestertang.site/2020/09/28/codewars13/"/>
    <id>http://chestertang.site/2020/09/28/codewars13/</id>
    <published>2020-09-28T01:00:00.000Z</published>
    <updated>2020-09-28T01:15:07.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-int32-to-IPv4"><a href="#13-int32-to-IPv4" class="headerlink" title="13 - int32 to IPv4"></a>13 - int32 to IPv4</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Take the following IPv4 address: <code>128.32.10.1</code></p><p>This address has 4 octets where each octet is a single byte (or 8 bits).</p><ul><li>1st octet 128 has the binary representation: <code>10000000</code></li><li>2nd octet 32 has the binary representation: <code>00100000</code></li><li>3rd octet 10 has the binary representation: <code>00001010</code></li><li>4th octet 1 has the binary representation: <code>00000001</code></li></ul><p>So <code>128.32.10.1</code> == <code>10000000.00100000.00001010.00000001</code></p><p>Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: <code>2149583361</code></p><p>Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.</p><p>Examples</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2149583361</span> ==&gt; <span class="string">"128.32.10.1"</span></span><br><span class="line"><span class="number">32</span>         ==&gt; <span class="string">"0.0.0.32"</span></span><br><span class="line"><span class="number">0</span>          ==&gt; <span class="string">"0.0.0.0"</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  <span class="comment"># your solution</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(int32_to_ip(<span class="number">2154959208</span>), <span class="string">"128.114.17.104"</span>) </span><br><span class="line">Test.assert_equals(int32_to_ip(<span class="number">0</span>), <span class="string">"0.0.0.0"</span>)</span><br><span class="line">Test.assert_equals(int32_to_ip(<span class="number">2149583361</span>), <span class="string">"128.32.10.1"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int32ToIp</span>(<span class="params">int32</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals( int32ToIp(<span class="number">2154959208</span>), <span class="string">"128.114.17.104"</span>, <span class="string">"wrong ip for interger: 2154959208"</span>) </span><br><span class="line">Test.assertEquals( int32ToIp(<span class="number">0</span>), <span class="string">"0.0.0.0"</span>, <span class="string">"wrong ip for integer: 0"</span>)</span><br><span class="line">Test.assertEquals( int32ToIp(<span class="number">2149583361</span>), <span class="string">"128.32.10.1"</span>, <span class="string">"wrong ip for integer: 2149583361"</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 先需要去了解 <a href="https://zh.wikipedia.org/wiki/IPv4" target="_blank" rel="noopener">IPv4</a> 是什麼<br>想法(2): 轉為 <code>binary</code> 後還要 <code>8</code> 個為一群，並且補 <code>0</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200928/20120826hZNjejxq8g.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200928/20120826hZNjejxq8g.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/RYyr-k3Ysqg" target="_blank" rel="noopener">Unsplash Damian Zaleski</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/rjust" target="_blank" rel="noopener">Ruby - apidock Rjust</a></li><li><a href="https://apidock.com/ruby/String/scan" target="_blank" rel="noopener">Ruby - apidock Scan</a></li><li><a href="https://apidock.com/ruby/Socket" target="_blank" rel="noopener">Ruby - apidock Socket</a></li><li><a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/ipaddr/rdoc/IPAddr.html" target="_blank" rel="noopener">Ruby - rubydocs IPAddr</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">JS - MDN String.prototype.padStart()</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">JS - MDN String.prototype.match()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  int32.to_s(<span class="number">2</span>)</span><br><span class="line">       .rjust(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">       .scan(<span class="regexp">/.&#123;8&#125;/</span>)</span><br><span class="line">       .map&#123; <span class="params">|s|</span> s.to_i(<span class="number">2</span>) &#125;</span><br><span class="line">       .join(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ipaddr'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  IPAddr.new(int32, Socket::AF_INET).to_s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int32ToIp</span>(<span class="params">int32</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> int32.toString(<span class="number">2</span>)</span><br><span class="line">              .padStart(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">              .match(<span class="regexp">/([01]&#123;8&#125;)/g</span>)</span><br><span class="line">              .map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>))</span><br><span class="line">              .join(<span class="string">'.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;13-int32-to-IPv4&quot;&gt;&lt;a href=&quot;#13-int32-to-IPv4&quot; class=&quot;headerlink&quot; title=&quot;13 - int32 to IPv4&quot;&gt;&lt;/a&gt;13 - int32 to IPv4&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Take the following IPv4 address: &lt;code&gt;128.32.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This address has 4 octets where each octet is a single byte (or 8 bits).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st octet 128 has the binary representation: &lt;code&gt;10000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2nd octet 32 has the binary representation: &lt;code&gt;00100000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3rd octet 10 has the binary representation: &lt;code&gt;00001010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4th octet 1 has the binary representation: &lt;code&gt;00000001&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So &lt;code&gt;128.32.10.1&lt;/code&gt; == &lt;code&gt;10000000.00100000.00001010.00000001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: &lt;code&gt;2149583361&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>12 - Greed is Dice</title>
    <link href="http://chestertang.site/2020/09/27/codewars12/"/>
    <id>http://chestertang.site/2020/09/27/codewars12/</id>
    <published>2020-09-27T01:00:00.000Z</published>
    <updated>2020-09-28T01:15:28.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Greed-is-Dice"><a href="#12-Greed-is-Dice" class="headerlink" title="12 - Greed is Dice"></a>12 - Greed is Dice</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Greed is a dice game played with five six-sided dice. Your mission, should you choose to accept it, is to score a throw according to these rules. You will always be given an array with five six-sided dice values.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Three <span class="number">1</span><span class="string">'s =&gt; 1000 points</span></span><br><span class="line"><span class="string">Three 6'</span>s =&gt;  <span class="number">600</span> points</span><br><span class="line">Three <span class="number">5</span><span class="string">'s =&gt;  500 points</span></span><br><span class="line"><span class="string">Three 4'</span>s =&gt;  <span class="number">400</span> points</span><br><span class="line">Three <span class="number">3</span><span class="string">'s =&gt;  300 points</span></span><br><span class="line"><span class="string">Three 2'</span>s =&gt;  <span class="number">200</span> points</span><br><span class="line">One   <span class="number">1</span>   =&gt;  <span class="number">100</span> points</span><br><span class="line">One   <span class="number">5</span>   =&gt;   <span class="number">50</span> point</span><br></pre></td></tr></table></figure><p>A single die can only be counted once in each roll. For example, a given “5” can only count as part of a triplet (contributing to the 500 points) or as a single 50 points, but not both in the same roll.</p><p>Example scoring</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Throw       Score</span><br><span class="line">---------   ------------------</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span>   <span class="number">250</span>:  <span class="number">50</span> (<span class="keyword">for</span> the <span class="number">5</span>) + <span class="number">2</span> * <span class="number">100</span> (<span class="keyword">for</span> the <span class="number">1</span>s)</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span>   <span class="number">1100</span>: <span class="number">1000</span> (<span class="keyword">for</span> three <span class="number">1</span>s) + <span class="number">100</span> (<span class="keyword">for</span> the other <span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span>   <span class="number">450</span>:  <span class="number">400</span> (<span class="keyword">for</span> three <span class="number">4</span>s) + <span class="number">50</span> (<span class="keyword">for</span> the <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>In some languages, it is possible to mutate the input to the function. This is something that you should never do. If you mutate the input, you will not be able to pass all the tests.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">( dice )</span></span></span><br><span class="line">  <span class="comment"># Fill me in!</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"Scorer Function"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"should value this as worthless"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>] ) == <span class="number">0</span>,   <span class="string">"Should be 0 :-("</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  it <span class="string">"should value this triplet correctly"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>] ) == <span class="number">200</span>, <span class="string">"Should be 200"</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  it <span class="string">"should value this mixed set correctly"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>] ) == <span class="number">450</span>, <span class="string">"Should be 450"</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params"> dice </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Fill me in!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe( <span class="string">"Scorer Function"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it( <span class="string">"should value this as worthless"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>] ) == <span class="number">0</span>,   <span class="string">"Should be 0 :-("</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it( <span class="string">"should value this triplet correctly"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>] ) == <span class="number">400</span>, <span class="string">"Should be 400"</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it( <span class="string">"should value this mixed set correctly"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>] ) == <span class="number">450</span>, <span class="string">"Should be 450"</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1):<br>想法(2):</p><p>圖片—<br>圖片來源：<a href="https://unsplash.com/photos/SYTO3xs06fU" target="_blank" rel="noopener">Unsplash Marvin Meyer</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/start_with%3F" target="_blank" rel="noopener">Ruby - apidock Start_with?</a></li><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock Gsub</a></li><li><a href="https://docs.ruby-lang.org/en/2.1.0/URI.html" target="_blank" rel="noopener">Ruby - rubydocs URI</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">JS - MDN String.prototype.replace()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(dice)</span></span></span><br><span class="line">  [</span><br><span class="line">    dice.count(<span class="number">1</span>) / <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">    dice.count(<span class="number">6</span>) / <span class="number">3</span> * <span class="number">600</span>,</span><br><span class="line">    dice.count(<span class="number">5</span>) / <span class="number">3</span> * <span class="number">500</span>,</span><br><span class="line">    dice.count(<span class="number">4</span>) / <span class="number">3</span> * <span class="number">400</span>,</span><br><span class="line">    dice.count(<span class="number">3</span>) / <span class="number">3</span> * <span class="number">300</span>,</span><br><span class="line">    dice.count(<span class="number">2</span>) / <span class="number">3</span> * <span class="number">200</span>,</span><br><span class="line">    dice.count(<span class="number">1</span>) % <span class="number">1</span> * <span class="number">100</span>,</span><br><span class="line">    dice.count(<span class="number">5</span>) % <span class="number">5</span> * <span class="number">50</span>,</span><br><span class="line">  ].reduce(<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span> <span class="params">(dice)</span></span></span><br><span class="line">  sum = <span class="number">0</span></span><br><span class="line">  (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    count = dice.select &#123; <span class="params">|d|</span> d == i &#125;.size</span><br><span class="line"></span><br><span class="line">    sum += (i==<span class="number">1</span> ? <span class="number">1000</span> : i*<span class="number">100</span>) <span class="keyword">if</span> count &gt;= <span class="number">3</span></span><br><span class="line">    sum += (count % <span class="number">3</span>)  * <span class="number">100</span>    <span class="keyword">if</span> i == <span class="number">1</span></span><br><span class="line">    sum += (count % <span class="number">3</span>)  *  <span class="number">50</span>    <span class="keyword">if</span> i == <span class="number">5</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params">dice</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> count = dice.filter( <span class="function"><span class="params">d</span> =&gt;</span> d == i).length</span><br><span class="line">    <span class="keyword">if</span>(count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">      sum += (i==<span class="number">1</span> ? <span class="number">1000</span> : i*<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">      sum += (count % <span class="number">3</span>) * <span class="number">100</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">      sum += (count % <span class="number">3</span>) * <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;12-Greed-is-Dice&quot;&gt;&lt;a href=&quot;#12-Greed-is-Dice&quot; class=&quot;headerlink&quot; title=&quot;12 - Greed is Dice&quot;&gt;&lt;/a&gt;12 - Greed is Dice&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Greed is a dice game played with five six-sided dice. Your mission, should you choose to accept it, is to score a throw according to these rules. You will always be given an array with five six-sided dice values.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt; 1000 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 6&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt;  500 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 4&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt;  300 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 2&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   =&amp;gt;  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One   &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;   =&amp;gt;   &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; point&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A single die can only be counted once in each roll. For example, a given “5” can only count as part of a triplet (contributing to the 500 points) or as a single 50 points, but not both in the same roll.&lt;/p&gt;
&lt;p&gt;Example scoring&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Throw       Score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------   ------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;1100&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; three &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;s) + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the other &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;450&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; three &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;s) + &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In some languages, it is possible to mutate the input to the function. This is something that you should never do. If you mutate the input, you will not be able to pass all the tests.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>11 - Extract the domain name from a URL</title>
    <link href="http://chestertang.site/2020/09/26/codewars11/"/>
    <id>http://chestertang.site/2020/09/26/codewars11/</id>
    <published>2020-09-26T01:00:00.000Z</published>
    <updated>2020-09-26T03:49:26.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Extract-the-domain-name-from-a-URL"><a href="#11-Extract-the-domain-name-from-a-URL" class="headerlink" title="11 - Extract the domain name from a URL"></a>11 - Extract the domain name from a URL</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">domain_name(<span class="string">"http://github.com/carbonfive/raygun"</span>) == <span class="string">"github"</span> </span><br><span class="line">domain_name(<span class="string">"http://www.zombie-bites.com"</span>) == <span class="string">"zombie-bites"</span></span><br><span class="line">domain_name(<span class="string">"https://www.cnet.com"</span>) == <span class="string">"cnet"</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  <span class="comment"># return just the domain name</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(domain_name(<span class="string">"http://google.com"</span>), <span class="string">"google"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"http://google.co.jp"</span>), <span class="string">"google"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"www.xakep.ru"</span>), <span class="string">"xakep"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"https://youtube.com"</span>), <span class="string">"youtube"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domainName</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(domainName(<span class="string">"http://google.com"</span>), <span class="string">"google"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"http://google.co.jp"</span>), <span class="string">"google"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"www.xakep.ru"</span>), <span class="string">"xakep"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"https://youtube.com"</span>), <span class="string">"youtube"</span>);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 原本其實是從 <code>URI</code> 的方式寫完的，不過發現要處理的東西有點多，後來覺得 <code>start_with</code> 來解決就可以，也不用 <code>regex</code> 去 metch 所有條件（regex 就爛）<br>想法(2): 用 <code>gsub</code> 把所有要篩選的條件寫進來也不錯</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200926/20120826iQVDzANvdd.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200926/20120826iQVDzANvdd.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/SYTO3xs06fU" target="_blank" rel="noopener">Unsplash Marvin Meyer</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/start_with%3F" target="_blank" rel="noopener">Ruby - apidock Start_with?</a></li><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock Gsub</a></li><li><a href="https://docs.ruby-lang.org/en/2.1.0/URI.html" target="_blank" rel="noopener">Ruby - rubydocs URI</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">JS - MDN String.prototype.replace()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url = url.start_with?(<span class="string">'www.'</span>) ? url.split(<span class="string">'www.'</span>).last : url.split(<span class="string">'//'</span>).last</span><br><span class="line">  url.split(<span class="string">'.'</span>).first</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url.start_with?(<span class="string">'www.'</span>) ? url.split(<span class="string">'www.'</span>).last.split(<span class="string">'.'</span>).first</span><br><span class="line">                          : url.split(<span class="string">'//'</span>).last.split(<span class="string">'.'</span>).first</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url.gsub(<span class="string">'http://'</span>, <span class="string">''</span>)</span><br><span class="line">     .gsub(<span class="string">'https://'</span>, <span class="string">''</span>)</span><br><span class="line">     .gsub(<span class="string">'www.'</span>, <span class="string">''</span>)</span><br><span class="line">     .split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1 gsub to replace XDDD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domainName</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> url.replace(<span class="string">'http://'</span>, <span class="string">''</span>)</span><br><span class="line">            .replace(<span class="string">'https://'</span>, <span class="string">''</span>)</span><br><span class="line">            .replace(<span class="string">'www.'</span>, <span class="string">''</span>)</span><br><span class="line">            .split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;11-Extract-the-domain-name-from-a-URL&quot;&gt;&lt;a href=&quot;#11-Extract-the-domain-name-from-a-URL&quot; class=&quot;headerlink&quot; title=&quot;11 - Extract the domain name from a URL&quot;&gt;&lt;/a&gt;11 - Extract the domain name from a URL&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://github.com/carbonfive/raygun&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;github&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://www.zombie-bites.com&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;zombie-bites&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;https://www.cnet.com&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;cnet&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# return just the domain name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://google.com&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;google&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://google.co.jp&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;google&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;www.xakep.ru&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;xakep&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;https://youtube.com&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;youtube&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>10 - Playing with digits</title>
    <link href="http://chestertang.site/2020/09/25/codewars10/"/>
    <id>http://chestertang.site/2020/09/25/codewars10/</id>
    <published>2020-09-25T01:00:00.000Z</published>
    <updated>2020-09-26T03:49:15.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-Playing-with-digits"><a href="#10-Playing-with-digits" class="headerlink" title="10 - Playing with digits"></a>10 - Playing with digits</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Some numbers have funny properties. For example:</p><blockquote><p>89 –&gt; 8¹ + 9² = 89 * 1</p></blockquote><blockquote><p>695 –&gt; 6² + 9³ + 5⁴= 1390 = 695 * 2</p></blockquote><blockquote><p>46288 –&gt; 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51</p></blockquote><p>Given a positive integer n written as abcd… (a, b, c, d… being digits) and a positive integer p</p><blockquote><p>we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n.</p></blockquote><p>In other words:</p><blockquote><p>Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + …) = n * k</p></blockquote><p>If it is the case we will return k, if not return -1.</p><p>Note: n and p will always be given as strictly positive integers.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dig_pow(<span class="number">89</span>, <span class="number">1</span>) should <span class="keyword">return</span> <span class="number">1</span> since <span class="number">8</span>¹ + <span class="number">9</span>² = <span class="number">89</span> = <span class="number">89</span> * <span class="number">1</span></span><br><span class="line">dig_pow(<span class="number">92</span>, <span class="number">1</span>) should <span class="keyword">return</span> <span class="number">-1</span> since there is no k such <span class="keyword">as</span> <span class="number">9</span>¹ + <span class="number">2</span>² equals <span class="number">92</span> * k</span><br><span class="line">dig_pow(<span class="number">695</span>, <span class="number">2</span>) should <span class="keyword">return</span> <span class="number">2</span> since <span class="number">6</span>² + <span class="number">9</span>³ + <span class="number">5</span>⁴= <span class="number">1390</span> = <span class="number">695</span> * <span class="number">2</span></span><br><span class="line">dig_pow(<span class="number">46288</span>, <span class="number">3</span>) should <span class="keyword">return</span> <span class="number">51</span> since <span class="number">4</span>³ + <span class="number">6</span>⁴+ <span class="number">2</span>⁵ + <span class="number">8</span>⁶ + <span class="number">8</span>⁷ = <span class="number">2360688</span> = <span class="number">46288</span> * <span class="number">51</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  <span class="comment"># your code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(dig_pow(<span class="number">89</span>, <span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">Test.assert_equals(dig_pow(<span class="number">92</span>, <span class="number">1</span>), -<span class="number">1</span>)</span><br><span class="line">Test.assert_equals(dig_pow(<span class="number">46288</span>, <span class="number">3</span>), <span class="number">51</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digPow</span>(<span class="params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(digPow(<span class="number">89</span>, <span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">Test.assertEquals(digPow(<span class="number">92</span>, <span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line">Test.assertEquals(digPow(<span class="number">46288</span>, <span class="number">3</span>), <span class="number">51</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 與 <a href="https://ithelp.ithome.com.tw/articles/10241748" target="_blank" rel="noopener">見習村07 - Sum of Digits / Digital Root</a> 中運用的 <code>recursive</code> 類似<br>想法(2): 要多判斷今天傳進來的值有可能不是從 <code>1</code> 開始，然後再給他平方後加總，再取餘數來判斷回傳值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200925/20120826vy9gRts9zq.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200925/20120826vy9gRts9zq.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/KQ0C6WtEGlo" target="_blank" rel="noopener">Unsplash Jason Strull</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerator/with_index" target="_blank" rel="noopener">Ruby - apidock With_index</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow" target="_blank" rel="noopener">JS - MDN Math.pow()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  number = n.to_s.split(<span class="string">''</span>).map(&amp;<span class="symbol">:to_i</span>)</span><br><span class="line">  sum = number.map.with_index(p) &#123; <span class="params">|num, idx|</span> num ** idx &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line">  sum % n == <span class="number">0</span> ? sum/n : -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  sum = n.to_s.chars.map.with_index(p) &#123; <span class="params">|num, idx|</span> num.to_i ** idx &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line">  sum % n == <span class="number">0</span> ? sum / n : -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digPow</span>(<span class="params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = n.toString().split(<span class="string">''</span>)</span><br><span class="line">             .map(<span class="function">(<span class="params">num, idx</span>) =&gt;</span> <span class="built_in">Math</span>.pow(<span class="built_in">parseInt</span>(num), idx+p))</span><br><span class="line">             .reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b) / n;</span><br><span class="line">  <span class="keyword">return</span> sum % <span class="number">1</span> == <span class="number">0</span> ? sum : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;10-Playing-with-digits&quot;&gt;&lt;a href=&quot;#10-Playing-with-digits&quot; class=&quot;headerlink&quot; title=&quot;10 - Playing with digits&quot;&gt;&lt;/a&gt;10 - Playing with digits&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Some numbers have funny properties. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;89 –&amp;gt; 8¹ + 9² = 89 * 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;695 –&amp;gt; 6² + 9³ + 5⁴= 1390 = 695 * 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;46288 –&amp;gt; 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a positive integer n written as abcd… (a, b, c, d… being digits) and a positive integer p&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words:&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
</feed>
