<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>查斯特部落格 | The Blog Of Chester Tang</title>
  
  <subtitle>查斯特 Chester Tang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chestertang.site/"/>
  <updated>2020-04-08T03:48:16.804Z</updated>
  <id>http://chestertang.site/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>S3 SnowBall</title>
    <link href="http://chestertang.site/2020/04/08/zyx0408/"/>
    <id>http://chestertang.site/2020/04/08/zyx0408/</id>
    <published>2020-04-07T16:00:00.000Z</published>
    <updated>2020-04-08T03:48:16.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-Snow-Ball"><a href="#What’s-Snow-Ball" class="headerlink" title="What’s Snow Ball?"></a>What’s Snow Ball?</h1><h2 id="SnowBall"><a href="#SnowBall" class="headerlink" title="SnowBall"></a>SnowBall</h2><p>Snowball is a petabyte-scale data transparent solution that uses secure appliances to transfer large amount of data into and out of AWS.</p><p>Using Snowball addresses common challenges with large-scale data transfers including high network costs, long transfer times, and security concerns.</p><p>Transferring data with SnowBall is simple, fast, secure and can be as little as one-fifth the cost of high-speed internet.</p><p>Snowball comes in either a 50TB or 80TB size. Snowball uses mutiple layers of security designed to protect your data including tamper-resistant enclosures, 256-bit encryption, and an industry-standard Trusted Platform Module (TPM) designed to ensure both security and full chain-of-custody of your data.</p><p>Once the data transfer job has been processed and verified, AWS performs a software erasure of the SnowBall appliance.</p><h2 id="SnowBall-Edge"><a href="#SnowBall-Edge" class="headerlink" title="SnowBall Edge"></a>SnowBall Edge</h2><p>AWS SnowBall Edge is a 100TB data tranfer device with on-board storage and compute capabilities. You can use SnowBall Edge to move large amounts of data into and out of AWS, as a temporary storage tier for large local datasets, or to support local workloads in remote or offline locations.</p><p>SnowBall Edge connects to your existing applicatinos and infrastructure using standard storage interfaces, streamlining the data transfer process and minimizing setup and integration.</p><p>SnowBall Edge can cluster together to form a local stroage tier and process your data on-premises, helping ensure your applications continue to run even when they are not able to access the cloud.</p><h2 id="Snowmobile"><a href="#Snowmobile" class="headerlink" title="Snowmobile"></a>Snowmobile</h2><p>AWS Snowmobile is an Exabyte-scale data transfer service used to move extremely large amounts of data to AWS. </p><p>You can transfer up to 100PB per Snowmobile, a 45-foot long ruggedized shipping container, pulled by a semi-trailer truck.</p><p>Snowmobile makes it easy to move massive volumes of data to the cloud, including video libararies, image repositories, or even a complete data center migration. Transferring data with Snowmobile is secure, fast and cot effective.</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul><li>Understand what Snowball is </li><li>Import / Export from S3 </li></ul><blockquote><p><a href="https://aws.amazon.com/tw/snowball/" target="_blank" rel="noopener">https://aws.amazon.com/tw/snowball/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-Snow-Ball&quot;&gt;&lt;a href=&quot;#What’s-Snow-Ball&quot; class=&quot;headerlink&quot; title=&quot;What’s Snow Ball?&quot;&gt;&lt;/a&gt;What’s Snow Ball?&lt;/h1&gt;&lt;h2 id=&quot;SnowBall&quot;&gt;&lt;a href=&quot;#SnowBall&quot; class=&quot;headerlink&quot; title=&quot;SnowBall&quot;&gt;&lt;/a&gt;SnowBall&lt;/h2&gt;&lt;p&gt;Snowball is a petabyte-scale data transparent solution that uses secure appliances to transfer large amount of data into and out of AWS.&lt;/p&gt;
&lt;p&gt;Using Snowball addresses common challenges with large-scale data transfers including high network costs, long transfer times, and security concerns.&lt;/p&gt;
&lt;p&gt;Transferring data with SnowBall is simple, fast, secure and can be as little as one-fifth the cost of high-speed internet.&lt;/p&gt;
&lt;p&gt;Snowball comes in either a 50TB or 80TB size. Snowball uses mutiple layers of security designed to protect your data including tamper-resistant enclosures, 256-bit encryption, and an industry-standard Trusted Platform Module (TPM) designed to ensure both security and full chain-of-custody of your data.&lt;/p&gt;
&lt;p&gt;Once the data transfer job has been processed and verified, AWS performs a software erasure of the SnowBall appliance.&lt;/p&gt;
&lt;h2 id=&quot;SnowBall-Edge&quot;&gt;&lt;a href=&quot;#SnowBall-Edge&quot; class=&quot;headerlink&quot; title=&quot;SnowBall Edge&quot;&gt;&lt;/a&gt;SnowBall Edge&lt;/h2&gt;&lt;p&gt;AWS SnowBall Edge is a 100TB data tranfer device with on-board storage and compute capabilities. You can use SnowBall Edge to move large amounts of data into and out of AWS, as a temporary storage tier for large local datasets, or to support local workloads in remote or offline locations.&lt;/p&gt;
&lt;p&gt;SnowBall Edge connects to your existing applicatinos and infrastructure using standard storage interfaces, streamlining the data transfer process and minimizing setup and integration.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="SnowBall" scheme="http://chestertang.site/tags/SnowBall/"/>
    
  </entry>
  
  <entry>
    <title>S3 CloudFront Distribution</title>
    <link href="http://chestertang.site/2020/04/05/zyx0405/"/>
    <id>http://chestertang.site/2020/04/05/zyx0405/</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2020-04-07T08:27:17.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Create-A-CloudFront-Distribution"><a href="#Create-A-CloudFront-Distribution" class="headerlink" title="Create A CloudFront Distribution"></a>Create A CloudFront Distribution</h1><h2 id="Networking-amp-Content-Delivery-CloudFront"><a href="#Networking-amp-Content-Delivery-CloudFront" class="headerlink" title="Networking &amp; Content Delivery / CloudFront"></a>Networking &amp; Content Delivery / CloudFront</h2><p>Amazon CloudFront 是快速內容交付網路 (CDN) 服務，可在支援開發人員的環境中，以低延遲和高速傳輸的方式將資料、影片、應用程式和 API 安全地交付給全球的客戶。</p><p>CloudFront 可與多種服務流暢搭配，包含使用 AWS Shield 減少 DDoS 攻擊次數、以 Amazon S3、Elastic Load Balancing 或 Amazon EC2 做為應用程式的來源，以及使用 Lambda@Edge 在更靠近客戶使用者的位置執行自訂程式碼，並自訂使用者體驗。</p><h3 id="Create-a-CloudFront-Distribution"><a href="#Create-a-CloudFront-Distribution" class="headerlink" title="Create a CloudFront Distribution"></a>Create a CloudFront Distribution</h3><p>點選 <code>Networking &amp; Content Delivery / CloudFront</code> 按鈕，可以看到 <code>CloudFront Distributions</code> 頁面，直接點選 <code>Create Distribution</code> 以建立 <code>CloudFront</code> </p><p><img src="https://i.imgur.com/hl0hNdj.png" alt="image"><br><img src="https://i.imgur.com/Dv7iVV4.png" alt="image"></p><p>總共有兩個步驟：</p><ol><li>Select delivery method</li><li>Create Distribution</li></ol><p>首先，可以選擇 <code>Web</code> 和 <code>RTMP</code> 兩種方式， <code>RTMP</code> 主要是拿來給 Media 類型來使用的 (e.g. Adobe Media)，這邊就直接以 <code>Web / Get Started</code> 來實作範例</p><p><img src="https://i.imgur.com/D8Dx1PN.png" alt="image"></p><p>還記得我們當初在 <a href="https://chestertang.site/2020/03/31/zyx0331/">S3 Cross Region Replication</a> 建立的 S3 Bucket 吧？這時候就可以選擇這個 Bucket 來測試看看</p><p>將 <code>Origin Domain Name</code> 選取要被 <code>Distribution</code> 的 Bucket，其餘選項將以預設來 <code>Create Distribution</code></p><p><img src="https://i.imgur.com/VEOJTM0.png" alt="image"></p><p>完成後大約要等待 15-30 分鐘左右，當 <code>Status</code> 變成 <code>Deployed</code> 就代表完成並且 <code>Enabled</code></p><p><img src="https://i.imgur.com/AuNEVQH.png" alt="image"></p><p>而也會取得一個 <code>Domain name</code> 即其他資訊，可以試著打開這個連結，會發現裡面的內容跟當初建立 S3 Bucket 是相同的，只是現在被 <code>Distribution</code> 到 <code>Edge Location</code> </p><blockquote><p>Domain Name：d2qxnxw978i04y.cloudfront.net</p></blockquote><p><img src="https://i.imgur.com/gyl5cD6.png" alt="image"></p><p>最後，如果在 Origin 的 Bucket 有 Upload 許多檔案的話，現在不用再輸入當初給的 S3 Bucket 連結來取得圖片，我們可以透過剛剛給的 <code>Domain Name</code> 並加上檔案名稱（如同 <a href="https://chestertang.site/2020/03/26/zyx0326/">S3 Bucket</a> ㄧ樣）就可以直接圖取到檔案啦！(e.g. <a href="http://d2qxnxw978i04y.cloudfront.net/icon.png" target="_blank" rel="noopener">http://d2qxnxw978i04y.cloudfront.net/icon.png</a>)</p><p><img src="https://i.imgur.com/IT5N0K6.png" alt="image"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Edge Location：This is the location where content will be cached. This is separate to an AWS Region/AZ.</li><li>Origin：This is the origin of  all the files that the CDN will distribute. This can be either an S3 Bucket, an EC2 Instance, an Elastic Load Balancer, or Route 53.</li><li>Distribution：This is the same given the CDN which consists of collection of Edge Locations.</li><li>Web Distribution：Typically used for Websites.</li><li>RTMP：Used for Media Streaming.</li><li>Edge locations are not just READ only - you can write to them too. (ie put an object on to them)</li><li>Objects are cached for the life of the Time To Live.</li><li>You can clear cached objects, but you will be charged.</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudFront/latest/DeveloperGuide/GettingStarted.SimpleDistribution.html" target="_blank" rel="noopener">Getting Started with a Simple CloudFront Distribution</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Create-A-CloudFront-Distribution&quot;&gt;&lt;a href=&quot;#Create-A-CloudFront-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Create A CloudFront Distribution&quot;&gt;&lt;/a&gt;Create A CloudFront Distribution&lt;/h1&gt;&lt;h2 id=&quot;Networking-amp-Content-Delivery-CloudFront&quot;&gt;&lt;a href=&quot;#Networking-amp-Content-Delivery-CloudFront&quot; class=&quot;headerlink&quot; title=&quot;Networking &amp;amp; Content Delivery / CloudFront&quot;&gt;&lt;/a&gt;Networking &amp;amp; Content Delivery / CloudFront&lt;/h2&gt;&lt;p&gt;Amazon CloudFront 是快速內容交付網路 (CDN) 服務，可在支援開發人員的環境中，以低延遲和高速傳輸的方式將資料、影片、應用程式和 API 安全地交付給全球的客戶。&lt;/p&gt;
&lt;p&gt;CloudFront 可與多種服務流暢搭配，包含使用 AWS Shield 減少 DDoS 攻擊次數、以 Amazon S3、Elastic Load Balancing 或 Amazon EC2 做為應用程式的來源，以及使用 Lambda@Edge 在更靠近客戶使用者的位置執行自訂程式碼，並自訂使用者體驗。&lt;/p&gt;
&lt;h3 id=&quot;Create-a-CloudFront-Distribution&quot;&gt;&lt;a href=&quot;#Create-a-CloudFront-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Create a CloudFront Distribution&quot;&gt;&lt;/a&gt;Create a CloudFront Distribution&lt;/h3&gt;&lt;p&gt;點選 &lt;code&gt;Networking &amp;amp; Content Delivery / CloudFront&lt;/code&gt; 按鈕，可以看到 &lt;code&gt;CloudFront Distributions&lt;/code&gt; 頁面，直接點選 &lt;code&gt;Create Distribution&lt;/code&gt; 以建立 &lt;code&gt;CloudFront&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hl0hNdj.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/Dv7iVV4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;總共有兩個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select delivery method&lt;/li&gt;
&lt;li&gt;Create Distribution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，可以選擇 &lt;code&gt;Web&lt;/code&gt; 和 &lt;code&gt;RTMP&lt;/code&gt; 兩種方式， &lt;code&gt;RTMP&lt;/code&gt; 主要是拿來給 Media 類型來使用的 (e.g. Adobe Media)，這邊就直接以 &lt;code&gt;Web / Get Started&lt;/code&gt; 來實作範例&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="CloudFront Distribution" scheme="http://chestertang.site/tags/CloudFront-Distribution/"/>
    
  </entry>
  
  <entry>
    <title>S3 Cross Region Replication</title>
    <link href="http://chestertang.site/2020/03/31/zyx0331/"/>
    <id>http://chestertang.site/2020/03/31/zyx0331/</id>
    <published>2020-03-31T07:00:00.000Z</published>
    <updated>2020-04-04T10:37:26.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="S3-Cross-Region-Replication-LAB"><a href="#S3-Cross-Region-Replication-LAB" class="headerlink" title="S3 Cross Region Replication - LAB"></a>S3 Cross Region Replication - LAB</h1><h2 id="S3-Cross-Region-Replication"><a href="#S3-Cross-Region-Replication" class="headerlink" title="S3 Cross Region Replication"></a>S3 Cross Region Replication</h2><p>這篇將介紹如果要複製一個 S3 bucket ，不只複製現在部分，而且在被複製的 bucket 上如果 <code>Upload</code> 新的檔案，複製的 bucket 也有一樣的效果該如何實作？此外還有一些預設該知道的觀念。</p><p>以下將用 <a href="https://chestertang.site/2020/03/27/zyx0327/">Versioning</a> 建立的 S3 Bucket 繼續實作這篇的，如果裡面的概念忘記或者不熟可以先回去看看</p><p>首先，先點選我們當初建立的 <code>chestertang1231-versiontest</code> 的 bucket</p><p><img src="https://i.imgur.com/dY6p2Uu.png" alt="IMAGE"></p><p>點選 <code>Management</code> 按鈕後，可以看到 <code>Replication</code> 中有 <code>Add rule</code> 建立複寫的規則，這邊還沒有建立過，所以就來直接建一個吧！</p><p><img src="https://i.imgur.com/sj5VzM8.png" alt="IMAGE"></p><p>Replication rule 的 Set source 的部分中，我們直接將整個 bucket 都選取</p><p><img src="https://i.imgur.com/KqslMWe.png" alt="IMAGE"></p><p>建立一個新的 bucket</p><p><img src="https://i.imgur.com/OLS2oDP.png" alt="IMAGE"></p><p>取一個 S3 bucket 的名字，可以有個開頭方便好知道這個是現在這個 bucket 的副本</p><p><img src="https://i.imgur.com/rnOQnR6.png" alt="IMAGE"></p><p>最後只要再給這個 <code>Rule name</code> 取一個名字，就完成啦！</p><p><img src="https://i.imgur.com/EmnyWRx.png" alt="IMAGE"></p><p>可以看到完成後，這個 <code>Bucket</code> 裡面可以知道你剛剛建立的複製的 <code>Bucket</code>，明細大致上就是跟上面再建立 <code>Replication rule</code> 的明細是相同的</p><p><img src="https://i.imgur.com/lmbRr8L.png" alt="IMAGE"></p><p>此外，在 S3 裡面也會多出一個新的 bucket 出來，不只如此，可以試試看在原本被複製的 bucket <code>chestertang1231-versiontest</code> 中 <code>Upload</code> 檔案可以看看複製出來的 <code>chesterdercrossregionreplication</code> 的 bucket 會有什麼變化？</p><p><img src="https://i.imgur.com/HNqAZQ0.png" alt="IMAGE"></p><blockquote><ol><li>新建立出來的 <code>chesterdercrossregionreplication</code> bucket 是空的，就算被複製的 bucket 有 file 也不會複寫過來 </li><li>在被複製的 bucket 中刪除 Object、Version 都不會覆寫到複製的 <code>chesterdercrossregionreplication</code> bucket</li></ol></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Versioning must be enabled on both the source and destination buckets</li><li>Files in an existing bucket are not replication automatically</li><li>All subsequent updated files will be replication automatically</li><li>Delete markers are not replicated</li><li>Deleting individual versions or delete markers will noe be replicated</li><li>Understand what Cross Region Replication is at a high level</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/zh_tw/AmazonS3/latest/user-guide/enable-replication.html" target="_blank" rel="noopener">How Do I Add a Replication Rule to an S3 Bucket?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;S3-Cross-Region-Replication-LAB&quot;&gt;&lt;a href=&quot;#S3-Cross-Region-Replication-LAB&quot; class=&quot;headerlink&quot; title=&quot;S3 Cross Region Replication - LAB&quot;&gt;&lt;/a&gt;S3 Cross Region Replication - LAB&lt;/h1&gt;&lt;h2 id=&quot;S3-Cross-Region-Replication&quot;&gt;&lt;a href=&quot;#S3-Cross-Region-Replication&quot; class=&quot;headerlink&quot; title=&quot;S3 Cross Region Replication&quot;&gt;&lt;/a&gt;S3 Cross Region Replication&lt;/h2&gt;&lt;p&gt;這篇將介紹如果要複製一個 S3 bucket ，不只複製現在部分，而且在被複製的 bucket 上如果 &lt;code&gt;Upload&lt;/code&gt; 新的檔案，複製的 bucket 也有一樣的效果該如何實作？此外還有一些預設該知道的觀念。&lt;/p&gt;
&lt;p&gt;以下將用 &lt;a href=&quot;https://chestertang.site/2020/03/27/zyx0327/&quot;&gt;Versioning&lt;/a&gt; 建立的 S3 Bucket 繼續實作這篇的，如果裡面的概念忘記或者不熟可以先回去看看&lt;/p&gt;
&lt;p&gt;首先，先點選我們當初建立的 &lt;code&gt;chestertang1231-versiontest&lt;/code&gt; 的 bucket&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dY6p2Uu.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;點選 &lt;code&gt;Management&lt;/code&gt; 按鈕後，可以看到 &lt;code&gt;Replication&lt;/code&gt; 中有 &lt;code&gt;Add rule&lt;/code&gt; 建立複寫的規則，這邊還沒有建立過，所以就來直接建一個吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sj5VzM8.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;Replication rule 的 Set source 的部分中，我們直接將整個 bucket 都選取&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KqslMWe.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Cross Region Replication" scheme="http://chestertang.site/tags/S3-Cross-Region-Replication/"/>
    
  </entry>
  
  <entry>
    <title>S3 Cross-Account Access</title>
    <link href="http://chestertang.site/2020/03/30/zyx0330/"/>
    <id>http://chestertang.site/2020/03/30/zyx0330/</id>
    <published>2020-03-30T07:00:00.000Z</published>
    <updated>2020-04-06T02:05:19.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-Organizations"><a href="#AWS-Organizations" class="headerlink" title="AWS Organizations"></a>AWS Organizations</h1><p>這篇首先前半段是跟 S3 比較沒有直接相關的部分，不過因為為了後面要分享 S3 權限給其他帳號，所以必須先設定 Organization 才有辦法完成。</p><p>另外文中的主帳號為 <code>m0761005</code>，分享的帳號為 <code>chester.tang</code> 這隻帳號（寫在前頭方便觀看這篇圖例中現在的角色關係）</p><p>首先，要分享權限給其他人，可以透過兩種方式進入到 <code>AWS Organizations</code>:</p><ol><li>點選右上方帳號 <code>My Organization</code></li><li><code>Management &amp; Governance / AWS Organizations</code></li></ol><p>進入到頁面後，點選 <code>Create organization</code> 按鈕來建立組織吧！ </p><p><img src="https://i.imgur.com/lLIbo7V.png" alt="IMAGE"></p><p>完成後可以看到，目前的使用者前面有個星號，而我們要透過點選 <code>Add account</code> 來新增使用者</p><p><img src="https://i.imgur.com/xMMNQfl.png" alt="IMAGE"></p><p>選擇要 <code>Invite account</code> 按鈕，並輸入 Email 帳戶或 <code>account ID</code> 來寄送邀請 Mail</p><p><img src="https://i.imgur.com/Nb0jBk0.png" alt="IMAGE"></p><p>收到信件後，切換帳號到剛剛寄送的 AWS 帳號，並 <code>Accept</code> 邀請後就可以加入了！</p><p><img src="https://i.imgur.com/h2PkXnr.png" alt="IMAGE"></p><p>然後裡面就會出現現在擁有的成員～</p><p><img src="https://i.imgur.com/N1PwEGx.png" alt="IMAGE"></p><hr><h1 id="Lab-Sharing-S3-Buckets-Across-Accounts"><a href="#Lab-Sharing-S3-Buckets-Across-Accounts" class="headerlink" title="Lab - Sharing S3 Buckets Across Accounts"></a>Lab - Sharing S3 Buckets Across Accounts</h1><h2 id="3-differents-ways-to-share-S3-buckets-across-accounts"><a href="#3-differents-ways-to-share-S3-buckets-across-accounts" class="headerlink" title="3 differents ways to share S3 buckets across accounts"></a>3 differents ways to share S3 buckets across accounts</h2><ul><li>Using Bucket Policies &amp; IAM (applies across the entire bucket). Programmatic Access Only.</li><li>Using Bucket ACLs &amp; IAM (individual objects). Programmatic Access Only.</li><li>Cross-Account IAM Roles. Programmatic AND Console access.</li></ul><h3 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h3><p>完成上述的 AWS Organizations 之後，可以看到目前組織的畫面，接下來我們來 <code>Cross-Account Access</code> 給其他帳戶</p><p><img src="https://i.imgur.com/N1PwEGx.png" alt="IMAGE"></p><p>在 <code>Sharing S3 Buckets Across Accounts</code> 給其他帳號之前，我們先來了解一下整個的流程，如果底下內容有點忘記是什麼了可以參考之前的這篇文章 <a href="https://chestertang.site/2020/03/24/zyx0324/">IAM</a>，流程大致如下： </p><ul><li><code>m0761005</code> 帳號需要建立一個 <code>Roles</code> (輸入要給權限的 AWS Account ID)，並且選取擁有的 <code>Policy</code> (e.g. AmazonS3FullAccess)，完成後會有個專屬連結來給分享的帳號做登入</li><li><code>chester.tang</code> 帳號需要建立一個 <code>Users</code> 來切換身份來知道我現在登入的是 <code>m0761005</code> 開出來的登入權限，因此選取擁有的 <code>Policy</code> (e.g. AdminstrationAccess)，使得帳號可以 <code>Switch Role</code></li></ul><p>首先，在 <code>m0761005</code> 帳戶的 <code>IAM</code> 中先建立 <code>Roles</code></p><p><img src="https://i.imgur.com/sqpHNfr.png" alt="IMAGE"></p><p>因為是要分享給另一個帳號，所以選取 <code>Another AWS account</code> 來 <code>Create role</code>，不過首先要知道另一個帳號的 Account ID 才有辦法進行</p><p><img src="https://i.imgur.com/WMS4V7j.png" alt="IMAGE"></p><p>這個部分應該就滿好懂的，我給這個帳戶要開啟什麼權限，能做什麼操作，都可以透過 <code>policy</code> 來達成，這邊就直接以 S3 ( <code>AmazonS3FullAccess</code> ) 來做範例</p><p><img src="https://i.imgur.com/eGzX6TY.png" alt="IMAGE"></p><p>今天我們分享這個權限給其他人不會每次都需要上面的步驟，我們可以設定一個 <code>Role name</code> 專門在分享某一個權限給特定的人，這樣就不用一直選取要給的權限。</p><p>好比我現在想分享 S3 的權限給我的同事們，我就直接把這個 <code>Role name</code> 叫做 <code>S3_Cross_Account_Access</code> 直接清楚明瞭，也方便之後知道這個 <code>Role</code> 裡面擁有的 <code>Policy</code> 是什麼…</p><p><img src="https://i.imgur.com/waiqGGj.png" alt="IMAGE"></p><p>到這個步驟就完成了上述流程的一半步驟，我們 <code>m0761005</code> 帳戶就有可以給其他帳戶 <code>S3</code> 權限的 <code>Role</code></p><p><img src="https://i.imgur.com/MAOQeDK.png" alt="IMAGE"></p><blockquote><p>圖中的 <code>Give this link to users who can switch roles in the console</code> 此段後的連結可以先存起來，此段為其他帳號要 <code>Switch Roles</code> 的連結</p></blockquote><p>接下來，我們來切換帳戶到 <code>Chester.tang</code>。如果上段的 <code>AWS Organizations</code> 有完成的話，會看到目前帳號的是在哪個 <code>Organizations</code> 下，並且會有個 ID</p><p><img src="https://i.imgur.com/eAfqYF4.png" alt="IMAGE"></p><p><code>Chester.tang</code> 的帳戶中，如上述的流程，我們先要來建立一個 <code>Users</code> 來跟 <code>m0761005</code> 連結，並且方便我們切換角色</p><p><img src="https://i.imgur.com/cDdQB7Z.png" alt="IMAGE"></p><p>點選 <code>Add user</code> 後，首先先取一個 <code>User name</code> 的名字（記住這個名字將會是日後登入 AWS 的帳戶名稱），並且自己設定密碼</p><p><img src="https://i.imgur.com/dx3tuG5.png" alt="IMAGE"></p><p>當然地，這邊擁有的 <code>Policy</code> 就是登入了～跟之前 <code>m0761005</code> 在建立 <code>Roles</code> 是相同的</p><p><img src="https://i.imgur.com/IgALPgm.png" alt="IMAGE"></p><p>完成後可以再次確認一下前面所選取的項目</p><p><img src="https://i.imgur.com/d5TAtBm.png" alt="IMAGE"></p><p>到這邊完成後，我們就登出並再登入剛剛建立的帳戶名稱，這時候就會看到有 <code>Switch Roles</code> 的按鈕可以選取，然後來設定 <code>Role</code></p><p><img src="https://i.imgur.com/0LwDZSC.png" alt="IMAGE"></p><blockquote><p>還記得在 <code>m0761005</code> 在建立 <code>Roles</code> 的時候有的 <code>Give this link to users who can switch roles in the console</code> 後存起來的連結嗎？這邊也可以直接貼那段連結就會挑轉到這個頁面了</p></blockquote><p><img src="https://i.imgur.com/8mULcNq.png" alt="IMAGE"></p><p>完成後，就可以看到目前的 <code>Role</code> 並且還有其他資訊</p><p><img src="https://i.imgur.com/KR9Px3x.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Always enable multi-factor authentication on root account </li><li>Always using a strong and complex password on root account</li><li>Paying account should be used for billing purposes only. Do not deploy resources into the paying payment.</li><li>Enable/Disable AWS services using Service Control Policies(SCP) either on OU or on individual accounts.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AWS-Organizations&quot;&gt;&lt;a href=&quot;#AWS-Organizations&quot; class=&quot;headerlink&quot; title=&quot;AWS Organizations&quot;&gt;&lt;/a&gt;AWS Organizations&lt;/h1&gt;&lt;p&gt;這篇首先前半段是跟 S3 比較沒有直接相關的部分，不過因為為了後面要分享 S3 權限給其他帳號，所以必須先設定 Organization 才有辦法完成。&lt;/p&gt;
&lt;p&gt;另外文中的主帳號為 &lt;code&gt;m0761005&lt;/code&gt;，分享的帳號為 &lt;code&gt;chester.tang&lt;/code&gt; 這隻帳號（寫在前頭方便觀看這篇圖例中現在的角色關係）&lt;/p&gt;
&lt;p&gt;首先，要分享權限給其他人，可以透過兩種方式進入到 &lt;code&gt;AWS Organizations&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;點選右上方帳號 &lt;code&gt;My Organization&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Management &amp;amp; Governance / AWS Organizations&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;進入到頁面後，點選 &lt;code&gt;Create organization&lt;/code&gt; 按鈕來建立組織吧！ &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lLIbo7V.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成後可以看到，目前的使用者前面有個星號，而我們要透過點選 &lt;code&gt;Add account&lt;/code&gt; 來新增使用者&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xMMNQfl.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;選擇要 &lt;code&gt;Invite account&lt;/code&gt; 按鈕，並輸入 Email 帳戶或 &lt;code&gt;account ID&lt;/code&gt; 來寄送邀請 Mail&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Cross-Account Access" scheme="http://chestertang.site/tags/S3-Cross-Account-Access/"/>
    
  </entry>
  
  <entry>
    <title>S3 Lifecycle Management</title>
    <link href="http://chestertang.site/2020/03/28/zyx0328/"/>
    <id>http://chestertang.site/2020/03/28/zyx0328/</id>
    <published>2020-03-28T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:12.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lifecycle-Management"><a href="#Lifecycle-Management" class="headerlink" title="Lifecycle Management"></a>Lifecycle Management</h1><p>Lifecycle Management 定義物件存留期間，S3 所要採取的動作 ( e.g. 將物件轉換成另一個 Stroage Classes、archive Object，或在指定期限後刪除)。</p><p>啟用了 Versioning 的 S3 Bucket 中，同一個物件可有多個 Version，包括 Current version、Previous version，而 Lifecycle Management 就是在定義 Current version、Previous version 的動作。</p><h2 id="建立-Lifecycle-Management"><a href="#建立-Lifecycle-Management" class="headerlink" title="建立 Lifecycle Management"></a>建立 Lifecycle Management</h2><ol><li>選擇你現在要設定 Lifecycle Management 的 S3 Bucket（ <a href="https://console.aws.amazon.com/s3" target="_blank" rel="noopener">https://console.aws.amazon.com/s3</a> ）</li><li>點選 <code>Management</code> 按鈕後，來新增 <code>Add lifecycle rule</code> 訂定一個規則</li></ol><p><img src="https://i.imgur.com/Grj9B9v.png" alt="IMAGE"></p><ol start="3"><li>輸入 rule name 以及看是否要有個 Prefix（前綴）、Tag（標籤）來幫助分類，如果不需要的話，直接選取 <code>Apply to all objects in the bucket</code> 即可</li></ol><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys</a></p></blockquote><p><img src="https://i.imgur.com/Grj9B9v.png" alt="IMAGE"></p><ol start="4"><li>可以同時為 Current version、Previous version 定義 transition（以兩者都定義為範例）</li></ol><ul><li>選擇在 <code>30</code> 天後，將 Upload 的 Object 轉為 <code>Standard-IA</code></li><li>選擇在 <code>60</code> 天後，將 Upload 的 Object 轉為 <code>Glacier</code></li></ul><blockquote><p>Glacier: <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html</a></p></blockquote><p><img src="https://i.imgur.com/rbAIld4.png" alt="IMAGE"></p><ol start="5"><li>接下來設定一些 <code>Expiration</code> 的問題</li></ol><ul><li>選取 <code>Expire current version of object</code>，然後輸入在自 Object Uploaad 的 <code>425</code> 天後，刪除該 Object。如果有選擇此選項，則無法選擇下方的 <code>Clean up expired object delete marker</code> 的選項。</li><li>選取 <code>Permanently delete previous versions</code>，然後輸入自 Object 成為舊版 version 的 <code>425</code> 天後要永久刪除該 Object。</li><li>Clean up incomplete multipart uploads (清除未完成的分段上傳) 在一般來說都建議選取。例如，可以設定要在啟動分段上傳的 <code>7</code> 天後，結束並清除所有未完成的上傳。</li></ul><p><img src="https://i.imgur.com/ftgqnrl.png" alt="IMAGE"></p><ol start="6"><li>最後，稍微看一下自己的設定，就完成 <code>Lifecycle Management</code> 了～</li></ol><p><img src="https://i.imgur.com/G8cOfLZ.png" alt="IMAGE"></p><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-lifecycle.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-lifecycle.html</a></p></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Automates moving your objects between the different storage tiers.</li><li>Can be used in conjunction with versioning.</li><li>Can be applied to current versions and previous versions.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lifecycle-Management&quot;&gt;&lt;a href=&quot;#Lifecycle-Management&quot; class=&quot;headerlink&quot; title=&quot;Lifecycle Management&quot;&gt;&lt;/a&gt;Lifecycle Management&lt;/h1&gt;&lt;p&gt;Lifecycle Management 定義物件存留期間，S3 所要採取的動作 ( e.g. 將物件轉換成另一個 Stroage Classes、archive Object，或在指定期限後刪除)。&lt;/p&gt;
&lt;p&gt;啟用了 Versioning 的 S3 Bucket 中，同一個物件可有多個 Version，包括 Current version、Previous version，而 Lifecycle Management 就是在定義 Current version、Previous version 的動作。&lt;/p&gt;
&lt;h2 id=&quot;建立-Lifecycle-Management&quot;&gt;&lt;a href=&quot;#建立-Lifecycle-Management&quot; class=&quot;headerlink&quot; title=&quot;建立 Lifecycle Management&quot;&gt;&lt;/a&gt;建立 Lifecycle Management&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;選擇你現在要設定 Lifecycle Management 的 S3 Bucket（ &lt;a href=&quot;https://console.aws.amazon.com/s3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://console.aws.amazon.com/s3&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;點選 &lt;code&gt;Management&lt;/code&gt; 按鈕後，來新增 &lt;code&gt;Add lifecycle rule&lt;/code&gt; 訂定一個規則&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Grj9B9v.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;輸入 rule name 以及看是否要有個 Prefix（前綴）、Tag（標籤）來幫助分類，如果不需要的話，直接選取 &lt;code&gt;Apply to all objects in the bucket&lt;/code&gt; 即可&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Grj9B9v.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;可以同時為 Current version、Previous version 定義 transition（以兩者都定義為範例）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Lifecycle Management" scheme="http://chestertang.site/tags/S3-Lifecycle-Management/"/>
    
  </entry>
  
  <entry>
    <title>S3 Versioning</title>
    <link href="http://chestertang.site/2020/03/27/zyx0327/"/>
    <id>http://chestertang.site/2020/03/27/zyx0327/</id>
    <published>2020-03-27T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:07.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="S3-Versioning"><a href="#S3-Versioning" class="headerlink" title="S3 Versioning"></a>S3 Versioning</h1><h2 id="Using-Versioning-with-S3"><a href="#Using-Versioning-with-S3" class="headerlink" title="Using Versioning with S3"></a>Using Versioning with S3</h2><ul><li>Stores all versions of an object. (including all writes and even if you delete an object)</li><li>Great backup tool.</li><li>Once enabled, Versioning cannot be disabled, only suspended.</li><li>Intergrate with Lifecycle rules.</li><li>Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.</li></ul><h2 id="建立-S3-Bucket-Versioning"><a href="#建立-S3-Bucket-Versioning" class="headerlink" title="建立 S3 Bucket Versioning"></a>建立 S3 Bucket Versioning</h2><p>先建立一個新的 S3 Bucket，如果有遺忘的部分可以參考上篇 <a href="https://chestertang.site/2020/03/26/zyx0326/">AWS - S3 Bucket + Encryption</a> 的部分，可先設成 <code>Public</code>！</p><p><img src="https://i.imgur.com/hjqqtQx.png" alt="IMAGE"></p><p>再來上傳第一版本的檔案吧！（這邊以 txt 檔來做範例，記得也設定成 Public 才可以看到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi, chesterTang!</span><br><span class="line"></span><br><span class="line">This is version 1</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IT1sJ83.png" alt="IMAGE"></p><p>完成基本的上傳與設定後，我們要來開啟 <code>Versioning</code> 的功能，點選 <code>Properties</code> 可以看到 <code>Versioning</code> 的框框，這時只要選取到 <code>Enable versioning</code> 並且 <code>Save</code> 就可以開啟。</p><p><img src="https://i.imgur.com/vJMujX2.png" alt="IMAGE"></p><p>將原本上傳的檔案把內容稍微更動一下並且再次上傳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hi, chesterTang!</span><br><span class="line"></span><br><span class="line">!!! Oh !!! This is version 2 !!! Oh !!!</span><br></pre></td></tr></table></figure><p>或許剛剛上傳錯檔案想要刪除，結果就發現 Bucket 裡面的 files 都不見了？明明還有上個版本、上上個版本呀？</p><p><img src="https://i.imgur.com/9bxvWJz.png" alt="IMAGE"><br><img src="https://i.imgur.com/8ZsoWFZ.png" alt="IMAGE"></p><p>眼尖的你應該其實就已經發現兩個問題：</p><ol><li>在上述開啟 <code>Versioning</code> 的時候，S3 Bucket 裡面就有多出 <code>Versions Hide/Show</code> 的按鈕</li><li>更改內容再次上傳檔案後或者刪除，txt 檔案真的文字更動了，但是上個版本、上上個版本跑去哪裡了呢？</li></ol><blockquote><p>把 Versions Show 打開，就能看見到底做了什麼！</p></blockquote><p><img src="https://i.imgur.com/uEjjg9I.png" alt="IMAGE"></p><p>可以發現剛剛的刪除，其實不是真正的刪除，居然有一個版本是在做刪除這件事情把它蓋過去。</p><blockquote><p>所以這邊又衍生出了一個新議題，如果我真的想退回上個版本該怎麼做才能達成？</p></blockquote><p>必須在 <code>Versions Show</code> 的狀況下，做 <code>Actions</code> 才能達成退版本的效果，不然只是又新增另一個版本上去而已！</p><p><img src="https://i.imgur.com/6sXMAWz.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Stores all versions of an object. (including all writes and even if you delete an object)</li><li>Once enabled, Versioning cannot be disabled, only suspended.</li><li>Intergrate with Lifecycle rules.</li><li>Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;S3-Versioning&quot;&gt;&lt;a href=&quot;#S3-Versioning&quot; class=&quot;headerlink&quot; title=&quot;S3 Versioning&quot;&gt;&lt;/a&gt;S3 Versioning&lt;/h1&gt;&lt;h2 id=&quot;Using-Versioning-with-S3&quot;&gt;&lt;a href=&quot;#Using-Versioning-with-S3&quot; class=&quot;headerlink&quot; title=&quot;Using Versioning with S3&quot;&gt;&lt;/a&gt;Using Versioning with S3&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stores all versions of an object. (including all writes and even if you delete an object)&lt;/li&gt;
&lt;li&gt;Great backup tool.&lt;/li&gt;
&lt;li&gt;Once enabled, Versioning cannot be disabled, only suspended.&lt;/li&gt;
&lt;li&gt;Intergrate with Lifecycle rules.&lt;/li&gt;
&lt;li&gt;Versioning’s MFA DELETE capability, which uses multi-factor authentication, can be used to provide an additional layer of security.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;建立-S3-Bucket-Versioning&quot;&gt;&lt;a href=&quot;#建立-S3-Bucket-Versioning&quot; class=&quot;headerlink&quot; title=&quot;建立 S3 Bucket Versioning&quot;&gt;&lt;/a&gt;建立 S3 Bucket Versioning&lt;/h2&gt;&lt;p&gt;先建立一個新的 S3 Bucket，如果有遺忘的部分可以參考上篇 &lt;a href=&quot;https://chestertang.site/2020/03/26/zyx0326/&quot;&gt;AWS - S3 Bucket + Encryption&lt;/a&gt; 的部分，可先設成 &lt;code&gt;Public&lt;/code&gt;！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hjqqtQx.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;再來上傳第一版本的檔案吧！（這邊以 txt 檔來做範例，記得也設定成 Public 才可以看到）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hi, chesterTang!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is version 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IT1sJ83.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成基本的上傳與設定後，我們要來開啟 &lt;code&gt;Versioning&lt;/code&gt; 的功能，點選 &lt;code&gt;Properties&lt;/code&gt; 可以看到 &lt;code&gt;Versioning&lt;/code&gt; 的框框，這時只要選取到 &lt;code&gt;Enable versioning&lt;/code&gt; 並且 &lt;code&gt;Save&lt;/code&gt; 就可以開啟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Versioning" scheme="http://chestertang.site/tags/S3-Versioning/"/>
    
  </entry>
  
  <entry>
    <title>S3 Bucket + Encryption</title>
    <link href="http://chestertang.site/2020/03/26/zyx0326/"/>
    <id>http://chestertang.site/2020/03/26/zyx0326/</id>
    <published>2020-03-26T01:00:00.000Z</published>
    <updated>2020-04-06T02:05:03.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storage-S3"><a href="#Storage-S3" class="headerlink" title="Storage / S3"></a>Storage / S3</h1><h2 id="S3-Objects-stroage-是什麼？"><a href="#S3-Objects-stroage-是什麼？" class="headerlink" title="S3 (Objects stroage) 是什麼？"></a>S3 (Objects stroage) 是什麼？</h2><ul><li>S3 is a safe place to store your files by objects.</li><li>It is Object-based stroage.</li><li>The data is spread across mutiple devices and mutiple facilities.</li></ul><h2 id="The-Basics-基礎"><a href="#The-Basics-基礎" class="headerlink" title="The Basics 基礎"></a>The Basics 基礎</h2><ul><li>S3 is Object-based - i.e. allows you to upload files.</li><li>Files can be from 0 byte to 5TB.</li><li>There is un unlimited stroage.</li><li>Files are stored in Buckets (folder).</li><li>S3 is a univeral namespace. That is, names must be unique globally.</li><li>Upload file to S3, if success will receive HTTP 200 code.</li></ul><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>S3 is Object based. Think of Objects just as files.</p><ul><li>Key (This is simply the name of object)</li><li>Value (This is simply the data and is made up of a sequence of bytes).</li><li>Varsion ID (Important for versioning)</li><li>Metadata (Data about data you are storing)</li><li>Subresources<ul><li>Access Control Lists(ACL)</li><li>Torrent</li></ul></li></ul><blockquote><p>(<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html</a>)</p></blockquote><h2 id="S3-如何儲存資料"><a href="#S3-如何儲存資料" class="headerlink" title="S3 如何儲存資料?"></a>S3 如何儲存資料?</h2><ul><li>Read after Write consistency for PUTS of new objects</li><li>Eventual Consistency for overwrite PUTS and DELETES (will take some time to propagate)</li></ul><blockquote><p><a href="https://docs.aws.amazon.com/redshift/latest/dg/managing-data-consistency.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/redshift/latest/dg/managing-data-consistency.html</a></p></blockquote><h2 id="S3-Guarantees"><a href="#S3-Guarantees" class="headerlink" title="S3 Guarantees"></a>S3 Guarantees</h2><ul><li>Built for 99.99% availability for the S3 platform.</li><li>Amazon guarantee 99.99% availability.</li><li>Amazon guarantee 99.999999999% durability for S3 information (11 * 9’s).</li></ul><blockquote><p><a href="https://aws.amazon.com/tw/s3/faqs/" target="_blank" rel="noopener">https://aws.amazon.com/tw/s3/faqs/</a></p></blockquote><h2 id="S3-Feature"><a href="#S3-Feature" class="headerlink" title="S3 Feature"></a>S3 Feature</h2><ul><li>Tiered Stroage Available</li><li>Lifecycle Management</li><li>Versioning</li><li>Encryption</li><li>MFA delete</li><li>Secure your data using Access Control Lists and Buckets Policies</li></ul><blockquote><p><a href="https://www.amazonaws.cn/en/s3/features/" target="_blank" rel="noopener">https://www.amazonaws.cn/en/s3/features/</a></p></blockquote><hr><h1 id="建立-S3-Bucket"><a href="#建立-S3-Bucket" class="headerlink" title="建立 S3 Bucket"></a>建立 S3 Bucket</h1><ol><li>點選 <code>Stroage / S3</code> 後，可以看到 <code>Amazon S3</code> 的頁面，如果是還沒有建立過 <code>buckets</code> 的帳戶，會顯示 <code>No buckets, You don’t have any buckets</code>。</li></ol><p><img src="https://i.imgur.com/Y0Laeug.png" alt="IMAGE"></p><ol start="2"><li>再來點選 <code>Create Bucket</code> 來建立，記得前面 Basics 所提的 <code>S3 is a univeral namespace. That is, names must be unique globally.</code>：Buckets 的名字不能與任何一個 Buckets 有重複的名稱，如果這邊也人先取過了，那必須要換一個名稱才行，之後就可以建立完成 S3 Bucket。</li></ol><p><img src="https://i.imgur.com/LS838w6.png" alt="IMAGE"></p><ol start="3"><li>建立完成後，可以看到我們現在的 Bucket 還是空的，所以來 Upload 一些檔案上去吧！</li></ol><p><img src="https://i.imgur.com/G162wFZ.png" alt="IMAGE"></p><p>當完成上傳後，伺服器會回傳 200 給使用者 (Basic)，這時就可以選取想看的檔案名稱，來看檔案內容。其中值得注意的有以下兩點：</p><ul><li>可以看到 <code>Key</code> 的名字與檔案的名稱是相同的。</li><li>從 <code>Object URL    https://chestertang1231.s3.amazonaws.com/Chester.jpg</code> 這段可以看出這張照片現在的 <code>domain name</code>，這也是為什麼上述 <code>Bucket name</code> 不能相同的原因</li></ul><p><img src="https://i.imgur.com/EjrjTBL.png" alt="IMAGE"></p><blockquote><p>有沒有點進去連結想看照片，結果什麼都沒有呢？（沒錯，因為少了點設定…</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This XML file does not appear to have any style information associated with it. The document tree is shown below.</span><br><span class="line"><span class="tag">&lt;<span class="name">Error</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Code</span>&gt;</span>AccessDenied<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Message</span>&gt;</span>Access Denied<span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RequestId</span>&gt;</span>3436A43898A832D2<span class="tag">&lt;/<span class="name">RequestId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HostId</span>&gt;</span></span><br><span class="line">    ajZsWrnWWZJVaby4VOG0/Sgv2+bsOOq9Z9y+iNKscFNvMYI8RIklkCVh4U0le4KN1sDR9b7D/9I=</span><br><span class="line">    <span class="tag">&lt;/<span class="name">HostId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Error</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>點選 <code>Actions</code> 按鈕來對這張被選取的照片進行其他動作，但是會發現 <code>Make Public</code> 顯示灰色不給你點選，原因是你現在的 <code>S3</code> 在一開始是設定為不公開的（上述 Create Bucket 步驟中的 <code>Block all public setting</code>），因此這張照片也無法被公開！</li></ol><p><img src="https://i.imgur.com/DffECB6.png" alt="IMAGE"></p><ol start="5"><li>點選 <code>Permissions</code> 按鈕可以看到 <code>Block public access</code> 的一些設定內容，這跟當初在 <code>Create Bucket</code> 時是相同的，因此只要選取右方的 <code>Edit</code> 按鈕並把 <code>Block all public access</code> 反勾選在 <code>Save</code> 起來就可以！（會要你確定嗎？confirm，只需打上 comfirm 即可）</li></ol><p><img src="https://i.imgur.com/cYMsbPt.png" alt="IMAGE"></p><ol start="6"><li>完成後再點選 <code>Actions</code> 按鈕，把它設定為 <code>Make Public</code> 就可以進去剛剛的連結啦！</li></ol><blockquote><p>補充 &gt; 可以選擇檔案放在哪種 Storage Classes 的儲存空間：<a href="https://docs.aws.amazon.com/zh_tw/AmazonS3/latest/dev/storage-class-intro.html" target="_blank" rel="noopener">S3 Stroage Classes</a></p></blockquote><hr><h1 id="Security-And-Encryption"><a href="#Security-And-Encryption" class="headerlink" title="Security And Encryption"></a>Security And Encryption</h1><h2 id="The-Basics-基礎-1"><a href="#The-Basics-基礎-1" class="headerlink" title="The Basics 基礎"></a>The Basics 基礎</h2><p>Amazon S3 預設加密提供一種為 Amazon S3 儲存貯體設定預設加密行為的方式。可以在儲存貯體上設定預設加密，讓所有物件在存放於儲存貯體中時維持加密狀態。這些物件的加密，是使用伺服器端加密搭配 Amazon S3 受管金鑰 (SSE-S3) 或 AWS Key Management Service (AWS KMS) 客戶主金鑰 (CMK)。</p><p>所有新建立的 buckets 都是 PRIVATE 的，可以透過以下兩種方式來控制權限：</p><ul><li>Bucket Policies</li><li>Access Control Lists</li></ul><p>Encryptions In Transit is achieved by </p><ul><li>SSL / TLS</li></ul><h3 id="Encryptions-At-Rest-Server-side-is-achieved-by"><a href="#Encryptions-At-Rest-Server-side-is-achieved-by" class="headerlink" title="Encryptions At Rest (Server side) is achieved by"></a>Encryptions At Rest (Server side) is achieved by</h3><ul><li>S3 Managed Keys - SSE-S3</li><li>AWS Key Management Service, Managed Keys - SSE-KMS</li><li>Server Side Encryption with Customer Provided Keys - SSE-C</li></ul><h3 id="Client-Side-Encryption"><a href="#Client-Side-Encryption" class="headerlink" title="Client Side Encryption"></a>Client Side Encryption</h3><h1 id="Encryption-加密"><a href="#Encryption-加密" class="headerlink" title="Encryption 加密"></a>Encryption 加密</h1><ol><li>ㄧ樣來對我們剛剛 Upload 的圖片來做加密的動作，從 <code>Properties</code> 可以看到目前的 <code>Encryption</code> 是沒有加密過的，只要點選 <code>Encryption</code> 就能更改目前的狀態。</li></ol><p><img src="https://i.imgur.com/fAe8RhL.png" alt="IMAGE"></p><ol start="2"><li>這邊可以選擇：(1)AES-256、(2)AWS-KMS 兩種方式（以下就直接以(1)的方式來加密）</li></ol><p><img src="https://i.imgur.com/ILSOWaP.png" alt="IMAGE"></p><ol start="3"><li>點選 <code>Save</code> 按鈕後，就完成了加密啦！</li></ol><p><img src="https://i.imgur.com/bUsi3eS.png" alt="IMAGE"></p><blockquote><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonS3/latest/user-guide/default-bucket-encryption.html</a></p></blockquote><h2 id="Default-Encryption-加密"><a href="#Default-Encryption-加密" class="headerlink" title="Default Encryption 加密"></a>Default Encryption 加密</h2><p>除了單張照片加密之外，也可以預設加密的方法，其實與上述都大同小異，可以點選 <code>Properties</code> 的 <code>Default Encryption</code> 然後選取 <code>AES-256</code> 也就完成。</p><p><img src="https://i.imgur.com/zuRt4H6.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Simple creating of S3 Bucket and Permissions of the Block public access</li><li>Buckets are a universal name space</li><li>Upload an object to S3 receive a HTTP 200 Code</li><li>S3, S3-IA, S3-IA (One Zone), Glacier</li><li>Control access to buckets using either a bucket ACL or using Bucket Polices</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Storage-S3&quot;&gt;&lt;a href=&quot;#Storage-S3&quot; class=&quot;headerlink&quot; title=&quot;Storage / S3&quot;&gt;&lt;/a&gt;Storage / S3&lt;/h1&gt;&lt;h2 id=&quot;S3-Objects-stroage-是什麼？&quot;&gt;&lt;a href=&quot;#S3-Objects-stroage-是什麼？&quot; class=&quot;headerlink&quot; title=&quot;S3 (Objects stroage) 是什麼？&quot;&gt;&lt;/a&gt;S3 (Objects stroage) 是什麼？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;S3 is a safe place to store your files by objects.&lt;/li&gt;
&lt;li&gt;It is Object-based stroage.&lt;/li&gt;
&lt;li&gt;The data is spread across mutiple devices and mutiple facilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The-Basics-基礎&quot;&gt;&lt;a href=&quot;#The-Basics-基礎&quot; class=&quot;headerlink&quot; title=&quot;The Basics 基礎&quot;&gt;&lt;/a&gt;The Basics 基礎&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;S3 is Object-based - i.e. allows you to upload files.&lt;/li&gt;
&lt;li&gt;Files can be from 0 byte to 5TB.&lt;/li&gt;
&lt;li&gt;There is un unlimited stroage.&lt;/li&gt;
&lt;li&gt;Files are stored in Buckets (folder).&lt;/li&gt;
&lt;li&gt;S3 is a univeral namespace. That is, names must be unique globally.&lt;/li&gt;
&lt;li&gt;Upload file to S3, if success will receive HTTP 200 code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Objects&quot;&gt;&lt;a href=&quot;#Objects&quot; class=&quot;headerlink&quot; title=&quot;Objects&quot;&gt;&lt;/a&gt;Objects&lt;/h2&gt;&lt;p&gt;S3 is Object based. Think of Objects just as files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key (This is simply the name of object)&lt;/li&gt;
&lt;li&gt;Value (This is simply the data and is made up of a sequence of bytes).&lt;/li&gt;
&lt;li&gt;Varsion ID (Important for versioning)&lt;/li&gt;
&lt;li&gt;Metadata (Data about data you are storing)&lt;/li&gt;
&lt;li&gt;Subresources&lt;ul&gt;
&lt;li&gt;Access Control Lists(ACL)&lt;/li&gt;
&lt;li&gt;Torrent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;(&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;S3-如何儲存資料&quot;&gt;&lt;a href=&quot;#S3-如何儲存資料&quot; class=&quot;headerlink&quot; title=&quot;S3 如何儲存資料?&quot;&gt;&lt;/a&gt;S3 如何儲存資料?&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="S3 Bucket" scheme="http://chestertang.site/tags/S3-Bucket/"/>
    
  </entry>
  
  <entry>
    <title>AWS - CloudWatch - Billing</title>
    <link href="http://chestertang.site/2020/03/25/zyx0325/"/>
    <id>http://chestertang.site/2020/03/25/zyx0325/</id>
    <published>2020-03-25T01:00:00.000Z</published>
    <updated>2020-03-26T06:26:38.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Management-amp-Governance-CloudWatch"><a href="#Management-amp-Governance-CloudWatch" class="headerlink" title="Management &amp; Governance / CloudWatch"></a>Management &amp; Governance / CloudWatch</h1><h2 id="Billing-帳單"><a href="#Billing-帳單" class="headerlink" title="Billing 帳單"></a>Billing 帳單</h2><h3 id="CloudWatch"><a href="#CloudWatch" class="headerlink" title="CloudWatch"></a>CloudWatch</h3><ul><li>點選 <code>Management &amp; Governance / CloudWatch</code> 後，可以看到 <code>CloudWatch</code> 的頁面。<code>CloudWatch</code> 是一種監控和管理服務，可以為 AWS、混合和現場部署應用程式和基礎設施資源提供資料和可行的洞查。</li></ul><p><img src="https://i.imgur.com/MNBZnJb.png" alt="IMAGE"></p><p>使用 CloudWatch 可以監控整個堆疊 (應用程式、基礎設施和服務)，並利用警示、日誌和事件資料來執行自動操作，並縮短平均解決時間。</p><blockquote><p><a href="https://aws.amazon.com/tw/cloudwatch/features/" target="_blank" rel="noopener">https://aws.amazon.com/tw/cloudwatch/features/</a></p></blockquote><p>在之後的文章中會再細部介紹，這篇文章將設定 <code>Billing</code> 帳單的部分。</p><p><img src="https://i.imgur.com/nZMzWKK.png" alt="IMAGE"></p><p><img src="https://i.imgur.com/TUuPnup.png" alt="IMAGE"></p><ul><li>點選 <code>Billing</code> 按鈕後，再點選 “下方” 的 <code>Create alarm</code> 按鈕，這時就可以看到設定 <code>Billing</code> 的四個步驟：</li></ul><ol><li>Specify metric and conditions</li></ol><p>針對 Conditions 的不同，使用者這邊可以設定當額度超過多少美金，就寄送帳單通知信；當然地，反之也可以設定小於多少美金寄送帳單通知信。</p><p><img src="https://i.imgur.com/4eBW3U6.png" alt="IMAGE"></p><p><img src="https://i.imgur.com/YmvLFQn.png" alt="IMAGE"></p><ol start="2"><li>Configure actions</li></ol><p>而寄送通知信給誰？還有標題是什麼就要從這個地方設定啦！如果是還未建立過 <code>topic</code> 的話就無法選擇 <code>Select an existing SNS topic</code>，如圖所示，這邊新建一個新的 <code>topic</code> 並填寫要傳送通知信給哪個信箱。</p><p><img src="https://i.imgur.com/jxgMFbx.png" alt="IMAGE"></p><p>然後就可以收到信件啦！（amazon 的 Subscription confirmed! 信件這邊就不附上惹…懶</p><p><img src="https://i.imgur.com/x46MAri.png" alt="IMAGE"></p><ol start="3"><li>Add name and description</li></ol><p>接下來也設定這個 <code>Alarm</code> 名稱及敘述…</p><p><img src="https://i.imgur.com/j5yOcI7.png" alt="IMAGE"></p><ol start="4"><li>Preview and create</li></ol><p>設定完成後就可以在 <code>CloudWatch &gt; Alarms</code> 中看到設置的 <code>Alarms</code></p><p><img src="https://i.imgur.com/h3OkiX3.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p><a href="https://aws.amazon.com/tw/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc" target="_blank" rel="noopener">CloudWatch Free Tier Includes</a>：</p><ul><li>Simple settings of Billing Alarm</li><li>10 Custom Metrics and 10 Alarms</li><li>1,000,000 API Requests </li><li>5GB of Log Data Ingestion and 5GB of Log Data Archive</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Management-amp-Governance-CloudWatch&quot;&gt;&lt;a href=&quot;#Management-amp-Governance-CloudWatch&quot; class=&quot;headerlink&quot; title=&quot;Management &amp;amp; Governance / CloudWatch&quot;&gt;&lt;/a&gt;Management &amp;amp; Governance / CloudWatch&lt;/h1&gt;&lt;h2 id=&quot;Billing-帳單&quot;&gt;&lt;a href=&quot;#Billing-帳單&quot; class=&quot;headerlink&quot; title=&quot;Billing 帳單&quot;&gt;&lt;/a&gt;Billing 帳單&lt;/h2&gt;&lt;h3 id=&quot;CloudWatch&quot;&gt;&lt;a href=&quot;#CloudWatch&quot; class=&quot;headerlink&quot; title=&quot;CloudWatch&quot;&gt;&lt;/a&gt;CloudWatch&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;點選 &lt;code&gt;Management &amp;amp; Governance / CloudWatch&lt;/code&gt; 後，可以看到 &lt;code&gt;CloudWatch&lt;/code&gt; 的頁面。&lt;code&gt;CloudWatch&lt;/code&gt; 是一種監控和管理服務，可以為 AWS、混合和現場部署應用程式和基礎設施資源提供資料和可行的洞查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MNBZnJb.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 CloudWatch 可以監控整個堆疊 (應用程式、基礎設施和服務)，並利用警示、日誌和事件資料來執行自動操作，並縮短平均解決時間。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/tw/cloudwatch/features/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aws.amazon.com/tw/cloudwatch/features/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在之後的文章中會再細部介紹，這篇文章將設定 &lt;code&gt;Billing&lt;/code&gt; 帳單的部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nZMzWKK.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TUuPnup.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="Billing" scheme="http://chestertang.site/tags/Billing/"/>
    
  </entry>
  
  <entry>
    <title>AWS - IAM</title>
    <link href="http://chestertang.site/2020/03/24/zyx0324/"/>
    <id>http://chestertang.site/2020/03/24/zyx0324/</id>
    <published>2020-03-24T10:47:40.000Z</published>
    <updated>2020-03-25T04:42:25.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Security-Identity-amp-Compliance-IAM"><a href="#Security-Identity-amp-Compliance-IAM" class="headerlink" title="Security, Identity, &amp; Compliance / IAM"></a>Security, Identity, &amp; Compliance / IAM</h1><h2 id="AWS-IAM-是什麼？"><a href="#AWS-IAM-是什麼？" class="headerlink" title="AWS IAM 是什麼？"></a><a href="https://docs.aws.amazon.com/zh_tw/IAM/latest/UserGuide/introduction.html" target="_blank" rel="noopener">AWS IAM</a> 是什麼？</h2><blockquote><p>Identity Access Management allows you to manage users and thier level of access to the AWS Console.</p></blockquote><ul><li>centralised（集中）control of your AWS account</li><li>Shared access to your AWS account</li><li>Granular（粒）Permissions（權限）</li><li>Identity（身份）Federation（including Active Directory, Facebook, Linkin, etc..）</li><li>Multifactor Authentication</li><li>Provide temporary access for users/devices and services where necessary</li><li>integrates（整合）with many deifferent aws services</li><li>Supports PCI DSS（Payment Card Industry Data Security Standard 支付卡行業數據安全標準）Compliance</li></ul><blockquote><p>Key Terminology For IAM</p></blockquote><ul><li>Users：End Users such as people, employees of an organization etc.</li><li>Groups：A collection of users. Each user in the group will inherit the permission of the group.</li><li>Policies：Policies are made up of documents, called Policy documents. These doccuments are in a format called JSON and they give permissions as to what a User/Groups/Role is able to do.</li><li>Roles：you create Roles and then assign them to AWS Resources.</li></ul><hr><h1 id="從-AWS-AIM-設定了解觀念"><a href="#從-AWS-AIM-設定了解觀念" class="headerlink" title="從 AWS AIM 設定了解觀念"></a>從 AWS AIM 設定了解觀念</h1><p><img src="https://i.imgur.com/ixiMVAd.png" alt="IMAGE"></p><p>點選 <code>Security, Identity, &amp; Compliance / IAM</code> 後，可以登入 <code>Welcome to Identity and Access Management</code> 的頁面。</p><h2 id="Customize-IAM-users-sign-in-link"><a href="#Customize-IAM-users-sign-in-link" class="headerlink" title="Customize IAM users sign-in link"></a>Customize IAM users sign-in link</h2><p>其中可以點選 <code>Customize</code> 按鈕修改 <code>IAM users sign-in link</code> 的連結（無法與其他人重複）</p><p><img src="https://i.imgur.com/Y29z4y5.png" alt="IMAGE"></p><p>成功編輯後 <code>IAM users sign-in link</code> 就會被替換（ e.g. <a href="https://chestertang1231.signin.aws.amazon.com/console" target="_blank" rel="noopener">https://chestertang1231.signin.aws.amazon.com/console</a> ）</p><h2 id="Security-Status"><a href="#Security-Status" class="headerlink" title="Security Status"></a>Security Status</h2><h3 id="Activate-MFA-on-your-root-account"><a href="#Activate-MFA-on-your-root-account" class="headerlink" title="Activate MFA on your root account"></a>Activate MFA on your root account</h3><ol><li>Multi-factor authentication（多重要素驗證）</li></ol><p>又譯多因子認證、多因素驗證、多因素認證，是一種電腦存取控制的方法，用戶要通過兩種以上的認證機制之後，才能得到授權，使用電腦資源。例如，使用者要輸入 PIN 碼，插入銀行卡，最後再經指紋比對，通過這三種認證方式，才能獲得授權。這種認證方式可以提高安全性。</p><p>更生活化的例子就像是，現在的預約買口罩需要讀卡機來讀健保卡，又或者是以前玩電玩除了要先登入帳號之外，還要有 beanfun 的讀卡機來讀卡，也就是雙重認證的概念。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Multi-factor_authentication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Multi-factor_authentication</a></p></blockquote><p>點選 <code>Manage MFA</code> 來設定雙重認證，其中又分為以下三種：</p><ul><li><code>Virtual MFA device</code>（uthenticator app installed on your mobile device or computer）</li><li><code>U2F security key</code>（YubiKey or any other compliant U2F device）</li><li><code>Other hardware MFA device</code>（Gemalto token）</li></ul><p><img src="https://i.imgur.com/MsQwVXu.png" alt="IMAGE"></p><p>可以透過手機下載 <code>Google authenticator</code> APP 來進行 <code>Virtual MFA device</code> 驗證，當然也可依照個人喜好選擇其他雙重認證方式。</p><p>流程只需要掃描 QRcode 並輸入兩次手機 App 的 <code>MFA-code</code> 就可以完成。</p><p><img src="https://i.imgur.com/pE4KUht.png" alt="IMAGE"></p><ol start="2"><li>Create individual IAM users</li></ol><p><img src="https://i.imgur.com/e3J1umx.png" alt="IMAGE"></p><p>設定完成 <code>Multi-factor authentication</code> 之後並點選 <code>Manage Users</code> 來 <code>Add Users</code>！</p><p><img src="https://i.imgur.com/X5ekfc2.png" alt="IMAGE"></p><ol start="3"><li>Use groups to assign permissions</li></ol><p>並且設定 <code>Group name</code> 及選擇 <code>Policy name</code></p><p><img src="https://i.imgur.com/jVwtAM0.png" alt="IMAGE"></p><p>之後都選擇下一步即可建立好 User &amp; Group，完成後就會顯示 <code>Success</code> 的畫面：</p><ul><li>注意 <code>Secret access key</code> 的 <code>show</code> 只能點擊一次，之後就無法看到</li><li>建議直接下載 <code>.csv</code> 檔案來查看 <code>Password</code>、<code>Access key ID</code>、<code>Secret access key</code> 等訊息</li><li>後方的 <code>Send Email</code> 也可以直接寄信的使用者</li></ul><p><img src="https://i.imgur.com/PH8UkEI.png" alt="IMAGE"></p><blockquote><p>還記得剛剛設定的 policie name 中的 <code>AdministratorAccess</code> 嗎？</p></blockquote><p>從這個 Police <code>AdministratorAccess</code> 中可以看出，它事實上是一個 JSON 格式，但這又代表著什麼意思呢？可以看到巢狀裡面的 <code>&quot;Effect&quot;: &quot;Allow&quot;</code> 代表著這個人是被允許進入的，且底下的 <code>Action</code>, <code>Resource</code> 的權限是 <code>*</code> 號，也就是代表著最大權限，如同 admin 的概念一樣。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lidvDbc.png" alt="IMAGE"></p><ol start="4"><li>Apply an IAM password policy</li></ol><p><img src="https://i.imgur.com/bGlsefe.png" alt="IMAGE"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>完成這些初步的設定可以大致了解到 AWS IAM 的用途，稍微做一下這篇的總結，並歸納一下這篇學到的觀念：</p><ul><li>IAM is universal（通用）. It does not apply to regions at this time.</li><li>The <code>root account</code> is simply the account created when first setup your AWS account. It has complete Admin access.</li><li>New Users have NO Permissions when first created.（ e.g. <code>2. Create individual IAM users</code>）</li><li>New Users are assigned Access Key ID &amp; Secret Access Key when first created.</li><li>Access Key ID &amp; Secret Access Key are not the same as a password. You can use this to access AWS via the API and Command Line</li><li>You only get to view Access Key ID &amp; Secret Access Key once. If you lost, you have to generate them.</li><li>Always setup Multifactor Authentication on your root account.</li><li>You can create and customize your own password rotation policies.（ e.g. <code>4. Apply an IAM password policy</code>）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Security-Identity-amp-Compliance-IAM&quot;&gt;&lt;a href=&quot;#Security-Identity-amp-Compliance-IAM&quot; class=&quot;headerlink&quot; title=&quot;Security, Identity, &amp;amp; Compliance / IAM&quot;&gt;&lt;/a&gt;Security, Identity, &amp;amp; Compliance / IAM&lt;/h1&gt;&lt;h2 id=&quot;AWS-IAM-是什麼？&quot;&gt;&lt;a href=&quot;#AWS-IAM-是什麼？&quot; class=&quot;headerlink&quot; title=&quot;AWS IAM 是什麼？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_tw/IAM/latest/UserGuide/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AWS IAM&lt;/a&gt; 是什麼？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Identity Access Management allows you to manage users and thier level of access to the AWS Console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;centralised（集中）control of your AWS account&lt;/li&gt;
&lt;li&gt;Shared access to your AWS account&lt;/li&gt;
&lt;li&gt;Granular（粒）Permissions（權限）&lt;/li&gt;
&lt;li&gt;Identity（身份）Federation（including Active Directory, Facebook, Linkin, etc..）&lt;/li&gt;
&lt;li&gt;Multifactor Authentication&lt;/li&gt;
&lt;li&gt;Provide temporary access for users/devices and services where necessary&lt;/li&gt;
&lt;li&gt;integrates（整合）with many deifferent aws services&lt;/li&gt;
&lt;li&gt;Supports PCI DSS（Payment Card Industry Data Security Standard 支付卡行業數據安全標準）Compliance&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Key Terminology For IAM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Users：End Users such as people, employees of an organization etc.&lt;/li&gt;
&lt;li&gt;Groups：A collection of users. Each user in the group will inherit the permission of the group.&lt;/li&gt;
&lt;li&gt;Policies：Policies are made up of documents, called Policy documents. These doccuments are in a format called JSON and they give permissions as to what a User/Groups/Role is able to do.&lt;/li&gt;
&lt;li&gt;Roles：you create Roles and then assign them to AWS Resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;從-AWS-AIM-設定了解觀念&quot;&gt;&lt;a href=&quot;#從-AWS-AIM-設定了解觀念&quot; class=&quot;headerlink&quot; title=&quot;從 AWS AIM 設定了解觀念&quot;&gt;&lt;/a&gt;從 AWS AIM 設定了解觀念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ixiMVAd.png&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;p&gt;點選 &lt;code&gt;Security, Identity, &amp;amp; Compliance / IAM&lt;/code&gt; 後，可以登入 &lt;code&gt;Welcome to Identity and Access Management&lt;/code&gt; 的頁面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Amazon Web Services" scheme="http://chestertang.site/categories/Amazon-Web-Services/"/>
    
    
      <category term="AWS" scheme="http://chestertang.site/tags/AWS/"/>
    
      <category term="IAM" scheme="http://chestertang.site/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - respond_to? / send</title>
    <link href="http://chestertang.site/2020/03/10/zyx0310/"/>
    <id>http://chestertang.site/2020/03/10/zyx0310/</id>
    <published>2020-03-10T02:20:40.000Z</published>
    <updated>2020-03-12T09:48:53.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R筆記-respond-to-send"><a href="#R筆記-respond-to-send" class="headerlink" title="R筆記 - respond_to? / send"></a>R筆記 - respond_to? / send</h1><p>往常的禮拜一是公司部版的日子，而有時 cucumber 沒過或 sync 多了一些空白是家常便飯，不外乎重新再給他跑一次看看（local 沒問題，retry），或者是哪邊稍微修改等等…，結果這次卻到了快下班前才大致上到一個段落，原因想當然就是跟為標題有關，於是又有了這篇文章的誕生…</p><h2 id="respond-to"><a href="#respond-to" class="headerlink" title="respond_to?"></a>respond_to?</h2><p>先來 Ruby doc 的定義</p><blockquote><p>respond_to?(symbol, include_all=false) → true or falseclick to toggle source<br>respond_to?(string, include_all=false) → true or false<br>Returns true if obj responds to the given method. Private and protected methods are included in the search only if the optional second parameter evaluates to true.</p></blockquote><p>我想有看過龍哥的 railsbook 中應該會有看過這段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.all</span><br><span class="line">  respond_to <span class="keyword">do</span> <span class="params">|format|</span></span><br><span class="line">    format.json &#123; render <span class="symbol">json:</span> @users &#125;</span><br><span class="line">    format.html &#123; render <span class="symbol">:index</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用 respond_to 可以針對不同的格式（html 或 json）輸出不同的結果。除了用 respond_to 之外，讓我們接著看看另一種做法。</p><p>因此大致上了解了他的用法，不過跟定義有什麼關聯呢？讓我們看下去!</p><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><p>ㄧ樣也是先來看 Ruby doc 定義</p><blockquote><p>send(symbol [, args…]) → objclick to toggle source<br><strong>send</strong>(symbol [, args…]) → obj<br>send(string [, args…]) → obj<br><strong>send</strong>(string [, args…]) → obj<br>Invokes the method identified by symbol, passing it any arguments specified. You can use <strong>send</strong> if the name send clashes with an existing method in obj. When the method is identified by a string, the string is converted to a symbol.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(*args)</span></span></span><br><span class="line">    <span class="string">"Hello "</span> + args.join(<span class="string">' '</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">k = Klass.new</span><br><span class="line">k.send <span class="symbol">:hello</span>, <span class="string">"gentle"</span>, <span class="string">"readers"</span>   <span class="comment">#=&gt; "Hello gentle readers"</span></span><br></pre></td></tr></table></figure><p>再次的我想有看過龍哥的 railsbook 中應該有看過 <code>private 方法</code> 這段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kitty = Cat.new</span><br><span class="line">kitty.gossip          <span class="comment"># =&gt; NoMethodError</span></span><br><span class="line">kitty.send(<span class="symbol">:gossip</span>)   <span class="comment"># =&gt; 我跟你說，你不要跟別人說喔!</span></span><br></pre></td></tr></table></figure><p>不是說呼叫 private 方法的時候不能有明確的接收者嗎？執行 send 方法把 gossip 當做參數傳給它而已，並沒有明確的 receiver！</p><h2 id="來個實例結合兩者吧！"><a href="#來個實例結合兩者吧！" class="headerlink" title="來個實例結合兩者吧！"></a>來個實例結合兩者吧！</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = Object.new</span><br><span class="line">obj.talk</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; undefined method 'talk' for #&lt;Object:0x12345678&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure><p>沒有 <code>talk</code> 這個 method，所以我們可以透過 <code>respond_to?</code> 做檢查，就可以確認是否有這個 method 可以用，避免產生error…</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = Object.new</span><br><span class="line"><span class="keyword">if</span> obj.respond_to?(<span class="string">"talk"</span>)</span><br><span class="line">   obj.talk</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   puts <span class="string">"Sorry, object can't talk!"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>再來換換 <code>send</code> 的方式（前提是要先知道有這個方法）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.talk</span><br><span class="line">obj.send(<span class="string">"talk"</span>)</span><br></pre></td></tr></table></figure><p>但優點在 process 執行時可以動態的呼叫不同 method，什麼意思？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Search for: "</span></span><br><span class="line">request = gets.chomp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> request == <span class="string">"writer"</span></span><br><span class="line">  puts book.writer</span><br><span class="line"><span class="keyword">elsif</span> request == <span class="string">"price"</span></span><br><span class="line">  puts book.price</span><br><span class="line"><span class="keyword">elsif</span> request == <span class="string">"date"</span></span><br><span class="line">  puts book.date</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候就可以改成：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Search for:"</span></span><br><span class="line">request = gets.chomp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> book.respond_to?(request)</span><br><span class="line">  puts book.send(request)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">"Input error"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>所以我說再回到今天的問題…</p></blockquote><p>原本寫 code 的人的邏輯想透過 <code>respond_to?</code> 來給值，途中會去讀另一個檔案的預設值 <code>[]</code>，但卻犯了一個天大的錯誤大家也都沒有發現…</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=&gt; xxx.rb</span></span><br><span class="line">setting.value = respond_to?(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>.to_sym)</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; zzz.rb</span></span><br><span class="line">...</span><br><span class="line">protected</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_device_license_transfer_black_list</span></span></span><br><span class="line">  []</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>而攝影大哥為了處理點新東西，在程式碼中多了三元運算子的判斷</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setting.value = respond_to?(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>.to_sym) ? send(<span class="string">"default_<span class="subst">#&#123;key&#125;</span>"</span>) : <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>於是就… 還記得前面的定義中埋點梗嘛？</p><blockquote><p><code>Private and protected methods are included in the search only if the optional second parameter evaluates to true.</code></p></blockquote><p>到底為什麼要把這種一點不 <code>protected</code> 的預設值設成 <code>protected</code> 呢？我想這又是另一個故事惹XD</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://ruby-doc.org/core-2.7.0/Object.html#method-i-send" target="_blank" rel="noopener">ruby doc #send</a></li><li><a href="https://ruby-doc.org/core-2.7.0/Object.html#method-i-respond_to-3F" target="_blank" rel="noopener">ruby doc #respond_to?</a></li><li><a href="https://railsbook.tw/chapters/08-ruby-basic-4.html" target="_blank" rel="noopener">類別（Class）與模組（Module）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R筆記-respond-to-send&quot;&gt;&lt;a href=&quot;#R筆記-respond-to-send&quot; class=&quot;headerlink&quot; title=&quot;R筆記 - respond_to? / send&quot;&gt;&lt;/a&gt;R筆記 - respond_to? / send&lt;/h1&gt;&lt;p&gt;往常的禮拜一是公司部版的日子，而有時 cucumber 沒過或 sync 多了一些空白是家常便飯，不外乎重新再給他跑一次看看（local 沒問題，retry），或者是哪邊稍微修改等等…，結果這次卻到了快下班前才大致上到一個段落，原因想當然就是跟為標題有關，於是又有了這篇文章的誕生…&lt;/p&gt;
&lt;h2 id=&quot;respond-to&quot;&gt;&lt;a href=&quot;#respond-to&quot; class=&quot;headerlink&quot; title=&quot;respond_to?&quot;&gt;&lt;/a&gt;respond_to?&lt;/h2&gt;&lt;p&gt;先來 Ruby doc 的定義&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;respond_to?(symbol, include_all=false) → true or falseclick to toggle source&lt;br&gt;respond_to?(string, include_all=false) → true or false&lt;br&gt;Returns true if obj responds to the given method. Private and protected methods are included in the search only if the optional second parameter evaluates to true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想有看過龍哥的 railsbook 中應該會有看過這段&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @users = User.all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  respond_to &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|format|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.json &amp;#123; render &lt;span class=&quot;symbol&quot;&gt;json:&lt;/span&gt; @users &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.html &amp;#123; render &lt;span class=&quot;symbol&quot;&gt;:index&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用 respond_to 可以針對不同的格式（html 或 json）輸出不同的結果。除了用 respond_to 之外，讓我們接著看看另一種做法。&lt;/p&gt;
&lt;p&gt;因此大致上了解了他的用法，不過跟定義有什麼關聯呢？讓我們看下去!&lt;/p&gt;
&lt;h2 id=&quot;send&quot;&gt;&lt;a href=&quot;#send&quot; class=&quot;headerlink&quot; title=&quot;send&quot;&gt;&lt;/a&gt;send&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Ruby" scheme="http://chestertang.site/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 筆記 - 打字 + 閃爍游標</title>
    <link href="http://chestertang.site/2020/03/09/zyx0309/"/>
    <id>http://chestertang.site/2020/03/09/zyx0309/</id>
    <published>2020-03-09T03:00:40.000Z</published>
    <updated>2020-03-10T07:46:48.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打字-閃爍游標"><a href="#打字-閃爍游標" class="headerlink" title="打字 + 閃爍游標"></a>打字 + 閃爍游標</h1><p>首先，要實現這個方法需要透過 animation 來呈現，而動畫的部分也滿容易就能達成。直接以童年的回憶標題來呈現給大家看（腦中的音樂…</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"typing"</span>&gt;</span>我在冒險的起點等你！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打字動畫的原理其實是透過將整個 <code>.typing</code> 的寬度依照 <code>字體</code> 的寬度來變動，所以原本的字體假設是 <code>10em</code>，那 animation 中的 <code>steps(10)</code> 這邊也就需要是相同的寬度，此時在透過 <code>overflow: hidden</code> 屬性將多餘的字體隱藏起來就可以呈現類似打字的動畫感覺。</p><p>閃爍游標的呈現方式，其實是透過 <code>border-right</code> / <code>box-shadow</code> 來達成，<code>animation</code> 中開始、結束都是透明 <code>transparent</code> 的，但在中間 <code>50%</code> 給他有 <code>x軸</code> 陰影，就能達成類似閃爍游標的效果。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.typing</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">  <span class="attribute">animation</span>: typing <span class="number">3.5s</span> <span class="built_in">steps</span>(10, end), blinkCursor <span class="number">0.75s</span> step-end infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打字動畫 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> typing &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 閃爍游標 */</span></span><br><span class="line">@<span class="keyword">keyframes</span> blinkCursor &#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可以來我的 codepen 直接看範例：<a href="https://codepen.io/BeastRush/pen/VwLroyG" target="_blank" rel="noopener">https://codepen.io/BeastRush/pen/VwLroyG</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打字-閃爍游標&quot;&gt;&lt;a href=&quot;#打字-閃爍游標&quot; class=&quot;headerlink&quot; title=&quot;打字 + 閃爍游標&quot;&gt;&lt;/a&gt;打字 + 閃爍游標&lt;/h1&gt;&lt;p&gt;首先，要實現這個方法需要透過 animation 來呈現，而動畫的部分也滿容易就能達成。直接以童年的回憶標題來呈現給大家看（腦中的音樂…&lt;/p&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;typing&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我在冒險的起點等你！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;打字動畫的原理其實是透過將整個 &lt;code&gt;.typing&lt;/code&gt; 的寬度依照 &lt;code&gt;字體&lt;/code&gt; 的寬度來變動，所以原本的字體假設是 &lt;code&gt;10em&lt;/code&gt;，那 animation 中的 &lt;code&gt;steps(10)&lt;/code&gt; 這邊也就需要是相同的寬度，此時在透過 &lt;code&gt;overflow: hidden&lt;/code&gt; 屬性將多餘的字體隱藏起來就可以呈現類似打字的動畫感覺。&lt;/p&gt;
&lt;p&gt;閃爍游標的呈現方式，其實是透過 &lt;code&gt;border-right&lt;/code&gt; / &lt;code&gt;box-shadow&lt;/code&gt; 來達成，&lt;code&gt;animation&lt;/code&gt; 中開始、結束都是透明 &lt;code&gt;transparent&lt;/code&gt; 的，但在中間 &lt;code&gt;50%&lt;/code&gt; 給他有 &lt;code&gt;x軸&lt;/code&gt; 陰影，就能達成類似閃爍游標的效果。&lt;/p&gt;
&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.typing&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: typing &lt;span class=&quot;number&quot;&gt;3.5s&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;steps&lt;/span&gt;(10, end), blinkCursor &lt;span class=&quot;number&quot;&gt;0.75s&lt;/span&gt; step-end infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 打字動畫 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; typing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 閃爍游標 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; blinkCursor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  50% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;也可以來我的 codepen 直接看範例：&lt;a href=&quot;https://codepen.io/BeastRush/pen/VwLroyG&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/BeastRush/pen/VwLroyG&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="HTML5" scheme="http://chestertang.site/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://chestertang.site/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Date 時間的運算</title>
    <link href="http://chestertang.site/2020/03/03/zyx0303/"/>
    <id>http://chestertang.site/2020/03/03/zyx0303/</id>
    <published>2020-03-03T04:00:40.000Z</published>
    <updated>2020-03-08T14:47:48.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Date-時間的運算"><a href="#J-筆記-Date-時間的運算" class="headerlink" title="J 筆記 - Date 時間的運算"></a>J 筆記 - Date 時間的運算</h1><p>早上一進公司除了看到要來面試的下一屆學弟，還有機器服務又壞掉之外，被強大的好朋友問了一個考驗我的問題～剛好要用到 JS 計算時間，所以有了這篇的誕生…</p><h2 id="先來看一下-MDN-的解釋"><a href="#先來看一下-MDN-的解釋" class="headerlink" title="先來看一下 MDN 的解釋"></a>先來看一下 MDN 的解釋</h2><blockquote><p>JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC.</p></blockquote><p>語法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure><p>好了，我想你大概懂的（誤</p><h3 id="Date-物件-多個參數指定年、月、日、時、分、秒、毫秒"><a href="#Date-物件-多個參數指定年、月、日、時、分、秒、毫秒" class="headerlink" title="Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒"></a>Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒</h3><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1996</span>, <span class="number">01</span>, <span class="number">15</span>);</span><br><span class="line"><span class="comment">// 1996-02-14T16:00:00.000Z</span></span><br></pre></td></tr></table></figure><p>有沒有發現一件事情，明明指定的時間是 (1996, 01, 15) 但是最後印出來的時間卻跑出了我的生日（欸？</p><p>其實 JS 不管怎麼輸入，都會是這樣子的（大誤）</p><blockquote><p>JavaScript 表達月份 (month) 是從 0 到 11，0 是一月；11 是十二月。且Date 物件參數的日期，預設的時區 (time zone) 是本地時區 (local time)，也就是你瀏覽器作業系統設定的時區。</p></blockquote><h3 id="日期時間比較-Compare-Dates"><a href="#日期時間比較-Compare-Dates" class="headerlink" title="日期時間比較 (Compare Dates)"></a>日期時間比較 (Compare Dates)</h3><p>可以用 <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;==</code> 或 <code>&gt;==</code> 運算子來比較兩個 Date 物件的時間前後關係：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> someday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someday &gt; today) &#123;</span><br><span class="line">  alert(<span class="string">'Today is before 2022/3/3.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'Today is after 2022/3/3.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果你要比較兩個日期是否相等 - 運算子 <code>==</code>, <code>!=</code>, <code>===</code> 或 <code>!==</code>，你沒辦法直接比較，而是要先將 Date 物件用 <code>date.getTime()</code> 轉換為數值型態才能比較：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> same = d1.getTime() === d2.getTime();    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> notSame = d1.getTime() !== d2.getTime(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>大概簡述是這樣子，如果真正要用到什麼其他的方法，說實在的還是去查文件是比較快的選擇，所以我的同學到底問了我什麼呢？</p><h3 id="JavaScript：將指定日期加上-X-天"><a href="#JavaScript：將指定日期加上-X-天" class="headerlink" title="JavaScript：將指定日期加上 X 天"></a>JavaScript：將指定日期加上 X 天</h3><p>首先，需要先新增一個時間並指定變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>加天數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dateTime = dateTime.setDate(dateTime.getDate()+<span class="number">1</span>);</span><br><span class="line">dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br></pre></td></tr></table></figure><p>有人可能會想到用 <code>getDate()</code> 這樣子抓天數後 或許會超過 31 或者是 小於等於 0，不過因為前面有 <code>setDate()</code> 所以會幫你轉換：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; dateTime = dateTime.setDate(dateTime.getDate()+<span class="number">1</span>);</span><br><span class="line"><span class="number">1583292207881</span></span><br><span class="line">&gt; dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-04</span>T03:<span class="number">23</span>:<span class="number">27.881</span>Z</span><br><span class="line"></span><br><span class="line">&gt; dateTime = dateTime.setDate(dateTime.getDate()<span class="number">-4</span>);</span><br><span class="line"><span class="number">1582946607881</span></span><br><span class="line">&gt; dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(dateTime);</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-29</span>T03:<span class="number">23</span>:<span class="number">27.881</span>Z</span><br></pre></td></tr></table></figure><p>後來看到桑莫大神寫的</p><p>由於「this」即是指定的時間物件，因此就使用 this 取得「日」再加 -3 天，最後將這個更新後的日期設定給這個時間物件即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.addDays = <span class="function"><span class="keyword">function</span>(<span class="params">days</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setDate(<span class="keyword">this</span>.getDate() + days);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加減天數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">today <span class="comment">// 2020-03-03T03:38:34.674Z</span></span><br><span class="line">today.addDays(<span class="number">-3</span>) <span class="comment">// 2020-02-29T03:38:34.674Z</span></span><br></pre></td></tr></table></figure><h3 id="日期的轉換"><a href="#日期的轉換" class="headerlink" title="日期的轉換"></a>日期的轉換</h3><ul><li><p>Date.prototype.toLocaleString() - 日期與時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleString()</span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br></pre></td></tr></table></figure></li><li><p>Date.prototype.toLocaleDateString() - 日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleDateString()  </span><br><span class="line"><span class="string">'2020-3-3'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Date.prototype.toLocaleTimeString() - 時間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleTimeString()</span><br><span class="line"><span class="string">'11:38:34'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="取得其他國家的日期-amp-時間"><a href="#取得其他國家的日期-amp-時間" class="headerlink" title="取得其他國家的日期 &amp; 時間"></a>取得其他國家的日期 &amp; 時間</h3><blockquote><p>dateObj.toLocaleString([locales[, options]])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; today.toLocaleString(<span class="string">'zh-TW'</span>); <span class="comment">//台灣</span></span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'en-GB'</span>); <span class="comment">//英國</span></span><br><span class="line"><span class="string">'3/3/2020, 11:38:34 AM'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'ko-KR'</span>); <span class="comment">//韓國</span></span><br><span class="line"><span class="string">'2020-3-3 11:38:34'</span></span><br><span class="line">&gt; today.toLocaleString(<span class="string">'en-AU'</span>); <span class="comment">//澳洲</span></span><br><span class="line"><span class="string">'3/3/2020, 11:38:34 AM'</span></span><br></pre></td></tr></table></figure><p>options 就查一查惹ouo</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">[MDN] Date</a></li><li><a href="https://www.fooish.com/javascript/date/parse.html" target="_blank" rel="noopener">JavaScript Date parse()</a></li><li><a href="https://cythilya.github.io/2017/05/17/javascript-date-add-days/" target="_blank" rel="noopener">Summer。桑莫。夏天</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Date-時間的運算&quot;&gt;&lt;a href=&quot;#J-筆記-Date-時間的運算&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Date 時間的運算&quot;&gt;&lt;/a&gt;J 筆記 - Date 時間的運算&lt;/h1&gt;&lt;p&gt;早上一進公司除了看到要來面試的下一屆學弟，還有機器服務又壞掉之外，被強大的好朋友問了一個考驗我的問題～剛好要用到 JS 計算時間，所以有了這篇的誕生…&lt;/p&gt;
&lt;h2 id=&quot;先來看一下-MDN-的解釋&quot;&gt;&lt;a href=&quot;#先來看一下-MDN-的解釋&quot; class=&quot;headerlink&quot; title=&quot;先來看一下 MDN 的解釋&quot;&gt;&lt;/a&gt;先來看一下 MDN 的解釋&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;語法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(dateString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;好了，我想你大概懂的（誤&lt;/p&gt;
&lt;h3 id=&quot;Date-物件-多個參數指定年、月、日、時、分、秒、毫秒&quot;&gt;&lt;a href=&quot;#Date-物件-多個參數指定年、月、日、時、分、秒、毫秒&quot; class=&quot;headerlink&quot; title=&quot;Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒&quot;&gt;&lt;/a&gt;Date 物件 - 多個參數指定年、月、日、時、分、秒、毫秒&lt;/h3&gt;&lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; birthday = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1996&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1996-02-14T16:00:00.000Z&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0224~0301</title>
    <link href="http://chestertang.site/2020/02/26/zyx0226/"/>
    <id>http://chestertang.site/2020/02/26/zyx0226/</id>
    <published>2020-02-26T02:20:40.000Z</published>
    <updated>2020-03-02T08:53:44.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0224-0301"><a href="#CodeWar-Weekly-0224-0301" class="headerlink" title="CodeWar Weekly[0224-0301]"></a>CodeWar Weekly[0224-0301]</h1><h2 id="6kyu-Bit-Counting"><a href="#6kyu-Bit-Counting" class="headerlink" title="6kyu Bit Counting"></a>6kyu Bit Counting</h2><p>Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.</p><p>Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case</p><blockquote><p>解題思考：先需要思考如何轉 2 進位，會用到 <code>to_s(2)</code>，再來就有幾種方式跟其方法了<br>ex: count、chars、map、reduce、inject …</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>難得基本上都沒有查的一次～<br>不過後來才想到才有 <code>count</code>，所以還是記錄一下好惹…（雖然沒什麼好紀錄的</p><blockquote><p>Returns the number of elements. If an argument is given, counts the number of elements which equals to obj. If a block is given, counts the number of elements yielding a true value.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">ary.count                    <span class="comment">#=&gt; 4</span></span><br><span class="line">ary.count(<span class="number">2</span>)                 <span class="comment">#=&gt; 2</span></span><br><span class="line">ary.count&#123; <span class="params">|x|</span> x % <span class="number">2</span> == <span class="number">0</span> &#125;  <span class="comment">#=&gt; 3</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><blockquote><p>The toString() method returns a string representing the object.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> Dog(<span class="string">'Gabby'</span>);</span><br><span class="line"></span><br><span class="line">Dog.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">dogToString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span> + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog1.toString());</span><br><span class="line"><span class="comment">// expected output: "Gabby"</span></span><br></pre></td></tr></table></figure><blockquote><p>(下方是雷～～～！！！)</p></blockquote><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map&#123; <span class="params">|x|</span> x.to_i &#125;.reduce&#123; <span class="params">|sum, x|</span> x += sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map(&amp;<span class="symbol">:to_i</span>).inject(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(3):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).count(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> n.toString(<span class="number">2</span>).split(<span class="string">'0'</span>).join(<span class="string">''</span>).length;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> n.toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>,<span class="string">''</span>).length;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>查惹一下正規表示法qq</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0224-0301&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0224-0301&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly[0224-0301]&quot;&gt;&lt;/a&gt;CodeWar Weekly[0224-0301]&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Bit-Counting&quot;&gt;&lt;a href=&quot;#6kyu-Bit-Counting&quot; class=&quot;headerlink&quot; title=&quot;6kyu Bit Counting&quot;&gt;&lt;/a&gt;6kyu Bit Counting&lt;/h2&gt;&lt;p&gt;Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.&lt;/p&gt;
&lt;p&gt;Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解題思考：先需要思考如何轉 2 進位，會用到 &lt;code&gt;to_s(2)&lt;/code&gt;，再來就有幾種方式跟其方法了&lt;br&gt;ex: count、chars、map、reduce、inject …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;&lt;h2 id=&quot;count&quot;&gt;&lt;a href=&quot;#count&quot; class=&quot;headerlink&quot; title=&quot;count&quot;&gt;&lt;/a&gt;count&lt;/h2&gt;&lt;p&gt;難得基本上都沒有查的一次～&lt;br&gt;不過後來才想到才有 &lt;code&gt;count&lt;/code&gt;，所以還是記錄一下好惹…（雖然沒什麼好紀錄的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns the number of elements. If an argument is given, counts the number of elements which equals to obj. If a block is given, counts the number of elements yielding a true value.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0217~0223</title>
    <link href="http://chestertang.site/2020/02/21/zyx0221/"/>
    <id>http://chestertang.site/2020/02/21/zyx0221/</id>
    <published>2020-02-21T05:33:40.000Z</published>
    <updated>2020-02-27T02:42:49.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0217-0223"><a href="#CodeWar-Weekly-0217-0223" class="headerlink" title="CodeWar Weekly[0217-0223]"></a>CodeWar Weekly[0217-0223]</h1><h2 id="6kyu-Highest-Scoring-Word"><a href="#6kyu-Highest-Scoring-Word" class="headerlink" title="6kyu Highest Scoring Word"></a>6kyu Highest Scoring Word</h2><p>Given a string of words, you need to find the highest scoring word.</p><p>Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.</p><p>You need to return the highest scoring word as a string.</p><p>If two words score the same, return the word that appears earliest in the original string.</p><p>All letters will be lowercase and all inputs will be valid.</p><blockquote><p>解題思考：取字母轉成數字會是最大值的詞，取 = <code>max_by</code>，後面的條件就要依照先轉數字 <code>ord</code>，然後在計算… ex: <code>sum</code>, <code>reduce</code>, <code>inject</code> …</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="max-by"><a href="#max-by" class="headerlink" title="max_by"></a>max_by</h2><blockquote><p>max_by {|obj| block } → obj || max_by → an_enumerator<br>Returns the object in enum that gives the maximum value from the given block.<br>If no block is given, an enumerator is returned instead.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">%w(albatross dog horse)</span></span><br><span class="line">a.max_by &#123;<span class="params">|x|</span> x.length &#125;   <span class="comment">#=&gt; "albatross"</span></span><br></pre></td></tr></table></figure><p>跟 <code>max</code> 的不同在，能不能在設定條件而已，原本的 <code>max</code> 只會取開頭字母最大的 <code>ord</code></p><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h2><blockquote><p>The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sentence = <span class="string">'The quick brown fox jumps over the lazy dog.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The character code '</span> + sentence.charCodeAt(index) + <span class="string">' is equal to '</span> + sentence.charAt(index));</span><br><span class="line"><span class="comment">// expected output: "The character code 113 is equal to q"</span></span><br></pre></td></tr></table></figure><h2 id="ord"><a href="#ord" class="headerlink" title="ord"></a>ord</h2><blockquote><p>ord → self<br>Returns the int itself.</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?a</span>.ord    <span class="comment">#=&gt; 97</span></span><br></pre></td></tr></table></figure><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  x.split.max_by&#123; <span class="params">|i|</span> i.chars.map&#123; <span class="params">| j |</span> j.ord - <span class="number">96</span> &#125;.sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  x.split.max_by &#123; <span class="params">|w|</span> score_word(w) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score_word</span><span class="params">(word)</span></span></span><br><span class="line">  word.chars.inject(<span class="number">0</span>) &#123; <span class="params">|sum, ch|</span> sum + (ch.ord - <span class="number">96</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.split(<span class="string">' '</span>).reduce(<span class="function">(<span class="params">accum, current</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> score(current) &gt; score(accum) ? current:accum;  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">accum,current</span>) =&gt;</span> &#123; <span class="keyword">return</span> accum+(current.charCodeAt()<span class="number">-96</span>) &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">as</span> = s.split(<span class="string">' '</span>).map(<span class="function"><span class="params">s</span>=&gt;</span>[...s].reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b.charCodeAt(<span class="number">0</span>)<span class="number">-96</span>,<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">' '</span>)[<span class="keyword">as</span>.indexOf(<span class="built_in">Math</span>.max(...as))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="http://ruby-doc.org/core-1.9.3/Integer.html#method-i-ord" target="_blank" rel="noopener">ord</a></li><li><a href="http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-max_by" target="_blank" rel="noopener">max_by</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0217-0223&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0217-0223&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly[0217-0223]&quot;&gt;&lt;/a&gt;CodeWar Weekly[0217-0223]&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Highest-Scoring-Word&quot;&gt;&lt;a href=&quot;#6kyu-Highest-Scoring-Word&quot; class=&quot;headerlink&quot; title=&quot;6kyu Highest Scoring Word&quot;&gt;&lt;/a&gt;6kyu Highest Scoring Word&lt;/h2&gt;&lt;p&gt;Given a string of words, you need to find the highest scoring word.&lt;/p&gt;
&lt;p&gt;Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.&lt;/p&gt;
&lt;p&gt;You need to return the highest scoring word as a string.&lt;/p&gt;
&lt;p&gt;If two words score the same, return the word that appears earliest in the original string.&lt;/p&gt;
&lt;p&gt;All letters will be lowercase and all inputs will be valid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解題思考：取字母轉成數字會是最大值的詞，取 = &lt;code&gt;max_by&lt;/code&gt;，後面的條件就要依照先轉數字 &lt;code&gt;ord&lt;/code&gt;，然後在計算… ex: &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt; …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - empty? blank? present?</title>
    <link href="http://chestertang.site/2020/02/20/zyx0220/"/>
    <id>http://chestertang.site/2020/02/20/zyx0220/</id>
    <published>2020-02-20T08:19:40.000Z</published>
    <updated>2020-02-21T01:51:19.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-筆記-nil-empty-blank-present"><a href="#R-筆記-nil-empty-blank-present" class="headerlink" title="R 筆記 - nil? empty? blank? present?"></a>R 筆記 - nil? empty? blank? present?</h1><p>今天原本在 render 一個 dialog 的邏輯判斷想到用 nil 或者是 [] 來判斷，但寫到一半攝影大哥就寫完了，結果 review 的時候看到寫 <code>present?</code> 方法，所以又有這篇的由來…（其實就是一堆很像的方法，寫完讓自己記住而已qq</p><blockquote><p>然後又默默地在辦公室聽到攝影大哥跟組員說：你為什麼這邊不寫 <code>try</code> ?? 就讓我又想到上一篇（好加在我是這樣寫…</p></blockquote><h2 id="nil"><a href="#nil" class="headerlink" title="nil?"></a>nil?</h2><p>判斷：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[].<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line">&#123;&#125;.<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">""</span>.<span class="literal">nil</span>?        <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">" "</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="string">"abc"</span>.<span class="literal">nil</span>?     <span class="comment">#=&gt; #false</span></span><br><span class="line"><span class="number">123</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; #false</span></span><br></pre></td></tr></table></figure><p>轉換：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.<span class="literal">nil</span>?       <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="literal">nil</span>.to_a?      <span class="comment">#=&gt; []</span></span><br><span class="line"><span class="literal">nil</span>.to_c?      <span class="comment">#=&gt; (0+0i)</span></span><br><span class="line"><span class="literal">nil</span>.to_f?      <span class="comment">#=&gt; 0.0</span></span><br><span class="line"><span class="literal">nil</span>.to_i       <span class="comment">#=&gt; 0</span></span><br><span class="line"><span class="literal">nil</span>.to_s       <span class="comment">#=&gt; ""</span></span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty?"></a>empty?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.empty?     <span class="comment">#=&gt; NoMethodError: undefined method `empty?' for nil:NilClass</span></span><br><span class="line">[].empty?      <span class="comment">#=&gt; true</span></span><br><span class="line">&#123;&#125;.empty?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">""</span>.empty?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">" "</span>.empty?     <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">"abc"</span>.empty?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="number">123</span>.empty?     <span class="comment">#=&gt; NoMethodError: undefined method `empty?' for 123:Fixnum</span></span><br></pre></td></tr></table></figure><p>以下方法只有 Rails 有！！！</p><h2 id="blank"><a href="#blank" class="headerlink" title="blank?"></a>blank?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.blank?     <span class="comment">#=&gt; true</span></span><br><span class="line">[].blank?      <span class="comment">#=&gt; true</span></span><br><span class="line">&#123;&#125;.blank?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">""</span>.blank?      <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">" "</span>.blank?     <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">"abc"</span>.blank?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="number">123</span>.blank?     <span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="present"><a href="#present" class="headerlink" title="present?"></a>present?</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.present?   <span class="comment">#=&gt; false</span></span><br><span class="line">[].present?    <span class="comment">#=&gt; false</span></span><br><span class="line">&#123;&#125;.present?    <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">""</span>.present?    <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">" "</span>.present?   <span class="comment">#=&gt; false</span></span><br><span class="line"><span class="string">"abc"</span>.present? <span class="comment">#=&gt; true</span></span><br><span class="line"><span class="number">123</span>.present?   <span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><blockquote><p>可以注意到都有些些微差距～又可以發現只有 <code>blank?</code> / <code>present?</code> 不會噴錯（難怪常用XDD</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R-筆記-nil-empty-blank-present&quot;&gt;&lt;a href=&quot;#R-筆記-nil-empty-blank-present&quot; class=&quot;headerlink&quot; title=&quot;R 筆記 - nil? empty? blank? present?&quot;&gt;&lt;/a&gt;R 筆記 - nil? empty? blank? present?&lt;/h1&gt;&lt;p&gt;今天原本在 render 一個 dialog 的邏輯判斷想到用 nil 或者是 [] 來判斷，但寫到一半攝影大哥就寫完了，結果 review 的時候看到寫 &lt;code&gt;present?&lt;/code&gt; 方法，所以又有這篇的由來…（其實就是一堆很像的方法，寫完讓自己記住而已qq&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然後又默默地在辦公室聽到攝影大哥跟組員說：你為什麼這邊不寫 &lt;code&gt;try&lt;/code&gt; ?? 就讓我又想到上一篇（好加在我是這樣寫…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;nil&quot;&gt;&lt;a href=&quot;#nil&quot; class=&quot;headerlink&quot; title=&quot;nil?&quot;&gt;&lt;/a&gt;nil?&lt;/h2&gt;&lt;p&gt;判斷：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[].&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?        &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; #false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;轉換：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;?       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_a?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_c?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; (0+0i)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_f?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; 0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_i       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.to_s       &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; &quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;empty&quot;&gt;&lt;a href=&quot;#empty&quot; class=&quot;headerlink&quot; title=&quot;empty?&quot;&gt;&lt;/a&gt;empty?&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; NoMethodError: undefined method `empty?&#39; for nil:NilClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[].empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125;.empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.empty?      &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;.empty?   &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;.empty?     &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; NoMethodError: undefined method `empty?&#39; for 123:Fixnum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://chestertang.site/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://chestertang.site/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>CodeWar Weekly - 0210~0216</title>
    <link href="http://chestertang.site/2020/02/13/zyx0213/"/>
    <id>http://chestertang.site/2020/02/13/zyx0213/</id>
    <published>2020-02-13T09:18:40.000Z</published>
    <updated>2020-02-19T15:05:05.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeWar-Weekly-0210-0216"><a href="#CodeWar-Weekly-0210-0216" class="headerlink" title="CodeWar Weekly - 0210~0216"></a>CodeWar Weekly - 0210~0216</h1><h2 id="6kyu-Unique-In-Order"><a href="#6kyu-Unique-In-Order" class="headerlink" title="6kyu Unique In Order"></a>6kyu Unique In Order</h2><p>Implement the function <code>unique_in_order</code> which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.</p><p>For example:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unique_in_order(<span class="string">'AAAABBBCCDAABBB'</span>) == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line">unique_in_order(<span class="string">'ABBCcAD'</span>)         == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'c'</span>, <span class="string">'A'</span>, <span class="string">'D'</span>]</span><br><span class="line">unique_in_order([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])       == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>解題思考：輸入值 <code>iterable</code> 可能是「字串」或「陣列」，三元運算式，輸出結果可知不能用 <code>uniq</code> 來解</p></blockquote><h3 id="參考方法-amp-學習筆記"><a href="#參考方法-amp-學習筆記" class="headerlink" title="參考方法 &amp; 學習筆記"></a>參考方法 &amp; 學習筆記</h3><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><blockquote><p>enum.chunk {|elt| key }.each {|key, ary| … }<br>enum.chunk(initial_state) {|elt, state| key }.each {|key, ary| … }</p></blockquote><p>For example, consecutive even numbers and odd numbers can be splitted as follows.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>].chunk &#123;<span class="params">|n|</span></span><br><span class="line">  n.even?</span><br><span class="line">&#125;.each &#123;<span class="params">|even, ary|</span></span><br><span class="line">  p [even, ary]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#=&gt; [false, [3, 1]]</span></span><br><span class="line"><span class="comment">#   [true, [4]]</span></span><br><span class="line"><span class="comment">#   [false, [1, 5, 9]]</span></span><br><span class="line"><span class="comment">#   [true, [2, 6]]</span></span><br><span class="line"><span class="comment">#   [false, [5, 3, 5]]</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><blockquote><p>The push() method adds one or more elements to the end of an array and returns the new length of the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">'pigs'</span>, <span class="string">'goats'</span>, <span class="string">'sheep'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = animals.push(<span class="string">'cows'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// expected output: Array ["pigs", "goats", "sheep", "cows"]</span></span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">'chickens'</span>, <span class="string">'cats'</span>, <span class="string">'dogs'</span>);</span><br></pre></td></tr></table></figure><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><blockquote><p>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">'spray'</span>, <span class="string">'limit'</span>, <span class="string">'elite'</span>, <span class="string">'exuberant'</span>, <span class="string">'destruction'</span>, <span class="string">'present'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = words.filter(<span class="function"><span class="params">word</span> =&gt;</span> word.length &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// expected output: Array ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure><h2 id="Spread-syntax-…x-ES6"><a href="#Spread-syntax-…x-ES6" class="headerlink" title="Spread syntax […x] ES6"></a>Spread syntax […x] ES6</h2><blockquote><p>Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum.apply(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure><blockquote><p>(下方是我寫的一些解題方法，有雷請小心服用ｏｕｏ～～)</p></blockquote><hr><h2 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h2><p>Solution(1):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  iterable.is_a?(String) ? iterable.split(<span class="string">''</span>).chunk&#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x, ary|</span> x &#125;</span><br><span class="line">                         : iterable.chunk&#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x, ary|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  (iterable.is_a?(String) ? iterable.chars </span><br><span class="line">                          : iterable )</span><br><span class="line">                          .chunk &#123; <span class="params">|x|</span> x &#125;.map&#123; <span class="params">|x|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>Solution(1):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">var</span> last = <span class="string">''</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iterable.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(iterable[i] !== last)&#123;</span><br><span class="line">      last = iterable[i]</span><br><span class="line">      result.push(last);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(2):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder=<span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> iterable.split(<span class="string">''</span>).filter(<span class="function">(<span class="params">a, i</span>) =&gt;</span> a !== iterable[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Solution(3):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder=<span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...iterable].filter(<span class="function">(<span class="params">a, i</span>) =&gt;</span> a !== iterable[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://apidock.com/ruby/Enumerable/chunk" target="_blank" rel="noopener">chunk</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array.prototype.push()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.filter()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread syntax</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CodeWar-Weekly-0210-0216&quot;&gt;&lt;a href=&quot;#CodeWar-Weekly-0210-0216&quot; class=&quot;headerlink&quot; title=&quot;CodeWar Weekly - 0210~0216&quot;&gt;&lt;/a&gt;CodeWar Weekly - 0210~0216&lt;/h1&gt;&lt;h2 id=&quot;6kyu-Unique-In-Order&quot;&gt;&lt;a href=&quot;#6kyu-Unique-In-Order&quot; class=&quot;headerlink&quot; title=&quot;6kyu Unique In Order&quot;&gt;&lt;/a&gt;6kyu Unique In Order&lt;/h2&gt;&lt;p&gt;Implement the function &lt;code&gt;unique_in_order&lt;/code&gt; which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order(&lt;span class=&quot;string&quot;&gt;&#39;AAAABBBCCDAABBB&#39;&lt;/span&gt;) == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order(&lt;span class=&quot;string&quot;&gt;&#39;ABBCcAD&#39;&lt;/span&gt;)         == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unique_in_order([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])       == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;解題思考：輸入值 &lt;code&gt;iterable&lt;/code&gt; 可能是「字串」或「陣列」，三元運算式，輸出結果可知不能用 &lt;code&gt;uniq&lt;/code&gt; 來解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;參考方法-amp-學習筆記&quot;&gt;&lt;a href=&quot;#參考方法-amp-學習筆記&quot; class=&quot;headerlink&quot; title=&quot;參考方法 &amp;amp; 學習筆記&quot;&gt;&lt;/a&gt;參考方法 &amp;amp; 學習筆記&lt;/h3&gt;&lt;h4 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h4&gt;&lt;h2 id=&quot;chunk&quot;&gt;&lt;a href=&quot;#chunk&quot; class=&quot;headerlink&quot; title=&quot;chunk&quot;&gt;&lt;/a&gt;chunk&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;enum.chunk {|elt| key }.each {|key, ary| … }&lt;br&gt;enum.chunk(initial_state) {|elt, state| key }.each {|key, ary| … }&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CodeWar" scheme="http://chestertang.site/categories/CodeWar/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
      <category term="CodeWar" scheme="http://chestertang.site/tags/CodeWar/"/>
    
      <category term="6kyu" scheme="http://chestertang.site/tags/6kyu/"/>
    
  </entry>
  
  <entry>
    <title>R 筆記 - try、try! 和 &amp;.</title>
    <link href="http://chestertang.site/2020/02/05/zyx0205/"/>
    <id>http://chestertang.site/2020/02/05/zyx0205/</id>
    <published>2020-02-05T06:20:40.000Z</published>
    <updated>2020-02-10T09:50:03.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="try、try-和-amp-（safe-navigation-operator）"><a href="#try、try-和-amp-（safe-navigation-operator）" class="headerlink" title="try、try! 和 &amp;.（safe navigation operator）"></a>try、try! 和 &amp;.（safe navigation operator）</h1><p>之前在做 Project 中因為沒有資料導致沒有該物件方法就噴錯，之後知道了 <code>&amp;.</code> 的用法，但也沒有特別理解（反正就只知道如果沒有這個方法會忽略不執行），但最近上班後又遇到一樣的問題，攝影大哥前輩秀了 <code>try</code> 方法，導致我很好奇所以特別查了一下它的用途，也就促使這篇文章的誕生。</p><blockquote><p>來點例子，讓大家能更了解這些方法的使用，希望之後在判斷 nil 值時，能有所幫助～</p></blockquote><p>在解釋之前，我們先從 Ruby 的 tap method 開始說起吧…</p><h2 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h2><p>其實在寫這篇之前，我也完全不知道這個方法，所以查了文件，來看看 Ruby API 文件的說明：</p><blockquote><p>Yields x to the block, and then returns x.</p></blockquote><p><code>tap</code> 是透過 yield 某個 <code>object物件</code> 進入 block，再傳回此 object。就如同以下（原始碼）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># activesupport/lib/active_support/core_ext/object/misc.rb</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tap</span></span></span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">self</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代表著可以用於檢查 method chain，更便於 <code>除錯</code> 以及 <code>簡化程式碼</code>！（什麼意思呢？）</p><h3 id="用途一：除錯"><a href="#用途一：除錯" class="headerlink" title="用途一：除錯"></a>用途一：除錯</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">5</span>).tap &#123; <span class="params">|x|</span> puts <span class="string">"original: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#1..5</span></span><br><span class="line">.to_a.tap&#123; <span class="params">|x|</span> puts <span class="string">"array: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#  [0] 1,</span></span><br><span class="line">  <span class="comment">#  [1] 2,</span></span><br><span class="line">  <span class="comment">#  [2] 3,</span></span><br><span class="line">  <span class="comment">#  [3] 4,</span></span><br><span class="line">  <span class="comment">#  [4] 5</span></span><br><span class="line">  <span class="comment">#]</span></span><br><span class="line">.select&#123; <span class="params">|x|</span> x%<span class="number">2</span> == <span class="number">0</span> &#125;.tap&#123; <span class="params">|x|</span> puts <span class="string">"evens: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#evens: [2, 4]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#   [0] 2,</span></span><br><span class="line">  <span class="comment">#   [1] 4</span></span><br><span class="line">  <span class="comment">#]</span></span><br><span class="line">.map&#123; <span class="params">|x|</span> x*x &#125;.tap&#123; <span class="params">|x|</span> puts <span class="string">"squares: <span class="subst">#&#123;x.inspect&#125;</span>"</span> &#125;</span><br><span class="line">  <span class="comment">#original: 1..5</span></span><br><span class="line">  <span class="comment">#array: [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">#evens: [2, 4]</span></span><br><span class="line">  <span class="comment">#squares: [4, 16]</span></span><br><span class="line">  <span class="comment">#[</span></span><br><span class="line">  <span class="comment">#   [0] 4,</span></span><br><span class="line">  <span class="comment">#   [1] 16</span></span><br><span class="line">  <span class="comment">#]</span></span><br></pre></td></tr></table></figure><h3 id="用途二：簡化程式碼"><a href="#用途二：簡化程式碼" class="headerlink" title="用途二：簡化程式碼"></a>用途二：簡化程式碼</h3><p>不用先宣告變數～直接塞進去ouo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].tap&#123; <span class="params">|i|</span> i &lt;&lt; <span class="string">"abc"</span> &#125;</span><br><span class="line"><span class="string">''</span>.tap&#123; <span class="params">|i|</span> i &lt;&lt; <span class="string">"do_some_thing"</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>tap enables you to “tap into” a method chain and perform some tangential function.</p></blockquote><h2 id="amp-（safe-navigation-operator）"><a href="#amp-（safe-navigation-operator）" class="headerlink" title="&amp;.（safe navigation operator）"></a>&amp;.（safe navigation operator）</h2><p>safe navigation operator 使用起來跟等等底下要說的 <code>try!</code> 相似，唯一不同的點就是寫法簡潔更多。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REGEX = <span class="regexp">/(ruby) is (\w+)/i</span></span><br><span class="line"><span class="string">"Ruby is awesome!"</span>.match(REGEX).values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># =&gt; ["Ruby", "awesome"]</span></span><br><span class="line"><span class="string">"Python is fascinating!"</span>.match(REGEX).values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># NoMethodError: undefined method `values_at' for nil:NilClass</span></span><br><span class="line"><span class="string">"Python is fascinating!"</span>.match(REGEX)&amp;.values_at(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>上述的方法是在 Ruby 內建的 method，而下方的 try 和 try! 是在 Rails 才有的 method！</p></blockquote><hr><h2 id="try-a-amp-b"><a href="#try-a-amp-b" class="headerlink" title="try(*a, &amp;b)"></a>try(*a, &amp;b)</h2><p>在使用方法 <code>try</code> 時，不用擔心前面的對象沒有後面這個方法導致噴錯（Nilclass）。就如同以下（原始碼）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try</span><span class="params">(*a, &amp;b)</span></span></span><br><span class="line">  <span class="keyword">if</span> a.empty? &amp;&amp; block_given?</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    public_send(*a, &amp;b) <span class="keyword">if</span> respond_to?(a.first)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try</span><span class="params">(*args)</span></span></span><br><span class="line">  <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代表著如果只接受 block 則 yield slef 給 block，否則就執行 <code>public_send</code> ，而 <code>public_send</code> 只會 <code>call public_method</code>（什麼意思呢？）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.try(<span class="symbol">:spouse</span>).try(<span class="symbol">:name</span>)</span><br></pre></td></tr></table></figure><p>轉換後的意思其實是</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.spouse.name <span class="keyword">if</span> @person &amp;&amp; @person.spouse</span><br></pre></td></tr></table></figure><p>這也如同開頭所說，不用擔心前面的對象沒有後面這個方法導致噴錯，因為它已經是個判斷了！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.try(<span class="symbol">:non_existing_method</span>) <span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><p>轉換後的意思其實是</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@person.non_existing_method <span class="keyword">if</span> @person.respond_to?(<span class="symbol">:non_existing_method</span>) <span class="comment"># =&gt; nil</span></span><br></pre></td></tr></table></figure><p>由此可知到，try 的用法就像是 Ruby 中的 <code>Object#send</code> 一樣，可以讓你把 method 當作 argument 傳入object。</p><p>但是跟 send 不同的是，當 receiving object（receiver）的該 method 不存在時，不會觸發 <code>NoMethodError</code>，而是回傳 nil 值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user.try(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br><span class="line">user.send(<span class="symbol">:should_be_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `should_be_error' for #&lt;User:0x007fca78bf5848&gt;</span></span><br></pre></td></tr></table></figure><h2 id="try-a-amp-b-1"><a href="#try-a-amp-b-1" class="headerlink" title="try!(*a, &amp;b)"></a>try!(*a, &amp;b)</h2><p>用法跟 try 相同，唯一的區別是，當傳入的 argument（method）不存在時和 receiving object 不是 nil 時，會觸發 NoMethodError exception，而不是 nil；而當 receiving object 是 nil 值時，則會回傳 nil。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user = User.new</span><br><span class="line">user.try(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br><span class="line">user.try!(<span class="symbol">:should_be_error</span>).try(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `account' for #&lt;User:0x007fca7cf91340&gt;</span></span><br><span class="line">user.try!(<span class="symbol">:should_be_error</span>).try!(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; NoMethodError: undefined method `account' for #&lt;User:0x007fca7cf91340&gt;</span></span><br><span class="line">user.try(<span class="symbol">:should_be_error</span>).try!(<span class="symbol">:another_error</span>)</span><br><span class="line"><span class="comment">#=&gt; nil</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://apidock.com/ruby/Object/tap" target="_blank" rel="noopener">API dock tap</a></li><li><a href="https://ruby-china.org/topics/5348" target="_blank" rel="noopener">分享 Rails 技巧之 tap &amp; try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try" target="_blank" rel="noopener">devdocs object#try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try" target="_blank" rel="noopener">Object#try</a></li><li><a href="https://devdocs.io/rails~5.1/object#method-i-try-21" target="_blank" rel="noopener">Object#try!</a></li><li><a href="https://medium.com/@pk60905/rails-try-try-%E5%92%8C-safe-navigation-operator-8503ad9b958a" target="_blank" rel="noopener">try、try! 和 &amp;.</a></li><li><a href="https://ruby-doc.org/core-2.6/doc/syntax/calling_methods_rdoc.html#label-Safe+navigation+operator" target="_blank" rel="noopener">ruby-doc.org Safe navigation operator</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;try、try-和-amp-（safe-navigation-operator）&quot;&gt;&lt;a href=&quot;#try、try-和-amp-（safe-navigation-operator）&quot; class=&quot;headerlink&quot; title=&quot;try、try! 和 &amp;amp;.（safe navigation operator）&quot;&gt;&lt;/a&gt;try、try! 和 &amp;amp;.（safe navigation operator）&lt;/h1&gt;&lt;p&gt;之前在做 Project 中因為沒有資料導致沒有該物件方法就噴錯，之後知道了 &lt;code&gt;&amp;amp;.&lt;/code&gt; 的用法，但也沒有特別理解（反正就只知道如果沒有這個方法會忽略不執行），但最近上班後又遇到一樣的問題，攝影大哥前輩秀了 &lt;code&gt;try&lt;/code&gt; 方法，導致我很好奇所以特別查了一下它的用途，也就促使這篇文章的誕生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;來點例子，讓大家能更了解這些方法的使用，希望之後在判斷 nil 值時，能有所幫助～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在解釋之前，我們先從 Ruby 的 tap method 開始說起吧…&lt;/p&gt;
&lt;h2 id=&quot;tap&quot;&gt;&lt;a href=&quot;#tap&quot; class=&quot;headerlink&quot; title=&quot;tap&quot;&gt;&lt;/a&gt;tap&lt;/h2&gt;&lt;p&gt;其實在寫這篇之前，我也完全不知道這個方法，所以查了文件，來看看 Ruby API 文件的說明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yields x to the block, and then returns x.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;tap&lt;/code&gt; 是透過 yield 某個 &lt;code&gt;object物件&lt;/code&gt; 進入 block，再傳回此 object。就如同以下（原始碼）：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# activesupport/lib/active_support/core_ext/object/misc.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tap&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代表著可以用於檢查 method chain，更便於 &lt;code&gt;除錯&lt;/code&gt; 以及 &lt;code&gt;簡化程式碼&lt;/code&gt;！（什麼意思呢？）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rails" scheme="http://chestertang.site/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://chestertang.site/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://chestertang.site/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Repository</title>
    <link href="http://chestertang.site/2020/02/01/zyx0201/"/>
    <id>http://chestertang.site/2020/02/01/zyx0201/</id>
    <published>2020-02-01T02:30:40.000Z</published>
    <updated>2020-02-04T06:08:54.067Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇的 <a href="https://chestertang.site/2020/01/31/zyx0131/">再談 Docker Container</a> 的介紹中對於 Docker Container 有了更深入的了解，接下來換來更深入瞭解 Docker Repository 吧！下篇就是 Deploy ～快到惹www</p><h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><blockquote><p>Repository(倉庫)、Registry(伺服器)，傻傻分不清楚？</p></blockquote><p>每個 Registry 上可以有多個 Repository，而每個 Repository 下面有多個 Image。簡單來說，Repository 可以被認為是一個具體的專案或目錄，例如對於 Repository 位址 dl.dockerpool.com/ubuntu 來說，dl.dockerpool.com 是註冊 Registry 位址，ubuntu 是 Repository 名稱。</p><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方維護了一個 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中包括了超過 15,000 的 Image。大部分需求，都可以透過 Docker Hub 直接下載 Image 來實作。</p><h3 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h3><p>可以透過執行 docker login 指令來輸入使用者名稱、密碼和電子信箱來完成註冊和登錄。 註冊成功後，本地使用者目錄的 <code>.dockercfg</code> 中將保存使用者的認證資訊。</p><p>或者可以直接到官方註冊帳號密碼：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>使用者無需登錄即可透過 <code>docker search</code> 指令來查詢 Docker Hub 中的 Image，並利用 <code>docker pull</code> 將它下載到 local 端。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker search ruby</span><br><span class="line"></span><br><span class="line">NAME                         DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ruby                         Ruby is a dynamic, reflective, object-orient…   1823                [OK]</span><br><span class="line">circleci/ruby                Ruby is a dynamic, reflective, object-orient…   67</span><br><span class="line">starefossen/ruby-node        Docker Image with Ruby and Node.js installed    34                                      [OK]</span><br><span class="line">heroku/ruby                  Docker Image <span class="keyword">for</span> Heroku Ruby                    22                                      [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下載官方 ruby Image 到 local 端</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker pull ruby</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ruby</span><br><span class="line">8f0fdd3eaac0: Pull complete</span><br><span class="line">d918eaefd9de: Pull complete</span><br><span class="line">43bf3e3107f5: Pull complete</span><br><span class="line">27622921edb2: Pull complete</span><br><span class="line">dcfa0aa1ae2c: Pull complete</span><br><span class="line">0e1f1dc37f65: Pull complete</span><br><span class="line">ebd3e50ed509: Pull complete</span><br><span class="line">660f560ba0a3: Pull complete</span><br><span class="line">Digest: sha256:...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ruby:latest</span><br><span class="line">docker.io/library/ruby:latest</span><br></pre></td></tr></table></figure><p>看看剛剛下載的 ruby Image 吧！</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2                  3bae0e76683f        8 days ago          447MB</span><br><span class="line">ruby                  latest              fb53c5f433da        3 weeks ago         842MB</span><br></pre></td></tr></table></figure><p>反之當然，也可以在登錄後透過 docker push 將 Image 推送到 Docker Hub</p><h3 id="自動建立"><a href="#自動建立" class="headerlink" title="自動建立"></a>自動建立</h3><p>自動建立（Automated Builds）功能對於需要經常升級 Image 的人來說很方便。有時候，使用者建立了 Image，安裝了某個軟體，如果軟體發布新版本則需要手動更新 Image。</p><p>此外，也允許使用者透過 Docker Hub 指定跟蹤一個目標網站（目前支援 GitHub 或 BitBucket）上的專案，一旦專案發生新的 push，則自動執行建立。</p><p>設定自動建立，包括以下的步驟：</p><ul><li>建立並登入 Docker Hub，以及目標網站</li><li>在目標網站中連接帳戶到 Docker Hub</li><li>在 Docker Hub 中設定自動建立</li><li>選取一個目標網站中的專案（需要含 Dockerfile）和分支</li><li>指定 Dockerfile 的位置，並提交建立</li></ul><p>之後，可以在 Docker Hub 的自動建立頁面 中跟蹤每次建立的狀態</p><h2 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h2><p>有時候使用 Docker Hub 這樣的公共 Repository 可能不方便，使用者可以建立一個本地 Repository 供私人使用。</p><h2 id="安裝執行-docker-registry"><a href="#安裝執行-docker-registry" class="headerlink" title="安裝執行 docker-registry"></a>安裝執行 docker-registry</h2><h3 id="容器執行"><a href="#容器執行" class="headerlink" title="容器執行"></a>容器執行</h3><p>在安裝了 Docker 後，可以透過取得官方 registry Image 來執行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>這將使用官方的 registry Image 來啟動本地的私有 Repository。 使用者可以透過指定參數來設定私有 Repository 位置，例如設定 Iamge 儲存到 Amazon S3 服務。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">       -e SETTINGS_FLAVOR=s3 \</span><br><span class="line">       -e AWS_BUCKET=acme-docker \</span><br><span class="line">       -e STORAGE_PATH=/registry \</span><br><span class="line">       -e AWS_KEY=AKIAHSHB43HS3J92MXZ \</span><br><span class="line">       -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \</span><br><span class="line">       -e SEARCH_BACKEND=sqlalchemy \</span><br><span class="line">       -p 5000:5000 \</span><br><span class="line">       registry</span><br></pre></td></tr></table></figure><h3 id="在私有-Repository-上傳、下載、搜索-Image"><a href="#在私有-Repository-上傳、下載、搜索-Image" class="headerlink" title="在私有 Repository 上傳、下載、搜索 Image"></a>在私有 Repository 上傳、下載、搜索 Image</h3><p>建立好私有 Repository 之後，就可以使用 docker tag 來標記一個 Image，然後推送它到 Repository，別的機器上就可以下載下了。例如私有 Repository 位址為 192.168.7.26:5000。</p><p>先來複製一個 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry              latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">chestertang/sinatra   v2                  3bae0e76683f        8 days ago          447MB</span><br><span class="line"></span><br><span class="line">docker tag 708bc6af7e5e 192.168.7.26:5000/<span class="built_in">test</span></span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry                 latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">192.168.7.26:5000/<span class="built_in">test</span>   latest              708bc6af7e5e        7 days ago          25.8MB</span><br><span class="line">chestertang/sinatra      v2                  3bae0e76683f        8 days ago          447MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker push</code> 上傳 <code>192.168.7.26:5000/test</code> Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.7.26:5000/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">The push refers to a repository [192.168.7.26:5000/<span class="built_in">test</span>] (len: 1)</span><br><span class="line">Sending image list</span><br><span class="line">Pushing repository 192.168.7.26:5000/<span class="built_in">test</span> (1 tags)</span><br><span class="line">Image 511136ea3c5a already pushed, skipping</span><br><span class="line">Image 9bad880da3d2 already pushed, skipping</span><br><span class="line">Image 25f11f5fb0cb already pushed, skipping</span><br><span class="line">Image ebc34468f71d already pushed, skipping</span><br><span class="line">Image 2318d26665ef already pushed, skipping</span><br><span class="line">Image ba5877dc9bec already pushed, skipping</span><br><span class="line">Pushing tag <span class="keyword">for</span> rev [ba5877dc9bec] on &#123;http://192.168.7.26:5000/v1/repositories/<span class="built_in">test</span>/tags/latest&#125;</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 查看倉庫中的映像檔</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.7.26:5000/v1/search</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"num_results"</span>: 7, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/miaxis_j2ee"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/tomcat"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/ubuntu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/ubuntu_office"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/desktop_ubu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"dockerfile/ubuntu"</span>&#125;, &#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/test"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>這樣就代表完成啦！</p><h2 id="設定檔案"><a href="#設定檔案" class="headerlink" title="設定檔案"></a>設定檔案</h2><p>Docker 的 Registry 利用設定檔案提供了一些 REPOSITORY 的模組（flavor），使用者可以來進行開發或部署。</p><h3 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h3><p>在 <code>config_sample.yml</code> 檔案中，可以如下：</p><ul><li><code>common</code>：基礎設定</li><li><code>local</code>：儲存資料到本地檔案系統</li><li><code>s3</code>：儲存資料到 AWS S3 中</li><li><code>dev</code>：使用 local 模組的基本設定</li><li><code>test</code>：單元測試使用</li><li><code>prod</code>：生產環境設定（基本上跟s3設定類似）</li><li><code>gcs</code>：儲存資料到 Google 的雲端</li><li><code>swift</code>：儲存資料到 OpenStack Swift 服務</li><li><code>glance</code>：儲存資料到 OpenStack Glance 服務，本地檔案系統為後備</li><li><code>glance-swift</code>：儲存資料到 OpenStack Glance 服務，Swift 為後備</li><li><code>elliptics</code>：儲存資料到 Elliptics key/value 儲存</li></ul><h3 id="範例設定"><a href="#範例設定" class="headerlink" title="範例設定"></a>範例設定</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">common:</span><br><span class="line">  loglevel: info</span><br><span class="line">  search_backend: <span class="string">"_env:SEARCH_BACKEND:"</span></span><br><span class="line">  sqlalchemy_index_database: <span class="string">"_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db"</span></span><br><span class="line"></span><br><span class="line">prod:</span><br><span class="line">  loglevel: warn</span><br><span class="line">  storage: s3</span><br><span class="line">  s3_access_key: _env:AWS_S3_ACCESS_KEY</span><br><span class="line">  s3_secret_key: _env:AWS_S3_SECRET_KEY</span><br><span class="line">  s3_bucket: _env:AWS_S3_BUCKET</span><br><span class="line">  boto_bucket: _env:AWS_S3_BUCKET</span><br><span class="line">  storage_path: /srv/docker</span><br><span class="line">  smtp_host: localhost</span><br><span class="line">  from_addr: docker@myself.com</span><br><span class="line">  to_addr: my@myself.com</span><br><span class="line"></span><br><span class="line">dev:</span><br><span class="line">  loglevel: debug</span><br><span class="line">  storage: <span class="built_in">local</span></span><br><span class="line">  storage_path: /home/myself/docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">  storage: <span class="built_in">local</span></span><br><span class="line">  storage_path: /tmp/tmpdockertmp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇的 &lt;a href=&quot;https://chestertang.site/2020/01/31/zyx0131/&quot;&gt;再談 Docker Container&lt;/a&gt; 的介紹中對於 Docker Container 有了更深入的了解，接下來換來更深入瞭解 Docker Repository 吧！下篇就是 Deploy ～快到惹www&lt;/p&gt;
&lt;h1 id=&quot;Repository&quot;&gt;&lt;a href=&quot;#Repository&quot; class=&quot;headerlink&quot; title=&quot;Repository&quot;&gt;&lt;/a&gt;Repository&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Repository(倉庫)、Registry(伺服器)，傻傻分不清楚？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每個 Registry 上可以有多個 Repository，而每個 Repository 下面有多個 Image。簡單來說，Repository 可以被認為是一個具體的專案或目錄，例如對於 Repository 位址 dl.dockerpool.com/ubuntu 來說，dl.dockerpool.com 是註冊 Registry 位址，ubuntu 是 Repository 名稱。&lt;/p&gt;
&lt;h2 id=&quot;Docker-Hub&quot;&gt;&lt;a href=&quot;#Docker-Hub&quot; class=&quot;headerlink&quot; title=&quot;Docker Hub&quot;&gt;&lt;/a&gt;Docker Hub&lt;/h2&gt;&lt;p&gt;目前 Docker 官方維護了一個 &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Hub&lt;/a&gt;，其中包括了超過 15,000 的 Image。大部分需求，都可以透過 Docker Hub 直接下載 Image 來實作。&lt;/p&gt;
&lt;h3 id=&quot;登入&quot;&gt;&lt;a href=&quot;#登入&quot; class=&quot;headerlink&quot; title=&quot;登入&quot;&gt;&lt;/a&gt;登入&lt;/h3&gt;&lt;p&gt;可以透過執行 docker login 指令來輸入使用者名稱、密碼和電子信箱來完成註冊和登錄。 註冊成功後，本地使用者目錄的 &lt;code&gt;.dockercfg&lt;/code&gt; 中將保存使用者的認證資訊。&lt;/p&gt;
&lt;p&gt;或者可以直接到官方註冊帳號密碼：&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Container</title>
    <link href="http://chestertang.site/2020/01/31/zyx0131/"/>
    <id>http://chestertang.site/2020/01/31/zyx0131/</id>
    <published>2020-01-31T04:04:40.000Z</published>
    <updated>2020-01-30T07:42:02.474Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇 <a href="https://chestertang.site/2020/01/30/zyx0130/">再談 Docker Image</a> 的介紹中對於 Docker Image 有了更深入的了解，接下來換 Docker Container 吧！下篇還有 Docker Repository，再來就是實際 Deploy 惹～再等等啊w</p><h1 id="再談-Docker-Container"><a href="#再談-Docker-Container" class="headerlink" title="再談 Docker Container"></a>再談 Docker Container</h1><h2 id="啟動-Container"><a href="#啟動-Container" class="headerlink" title="啟動 Container"></a>啟動 Container</h2><p>啟動容器有兩種方式，一種是將 Docker Image 新建一個 Container 並啟動，另外一個是將終止狀態（stopped）的 Container 重新啟動。</p><h3 id="新建並啟動"><a href="#新建並啟動" class="headerlink" title="新建並啟動"></a>新建並啟動</h3><p>透過 <code>docker run</code> 給他新建啟動起來～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure><p>其中，<code>-t</code> 指令讓 Docker 分配一個虛擬終端（pseudo-tty）並綁定到 Container 的 stdin 上，<code>-i</code> 則讓 Container 的 stdin 保持打開。意思是，使用者可以透過所建立的終端來輸入指令，例如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@af8bae53bdd3:/<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">root@af8bae53bdd3:/<span class="comment"># ls</span></span><br><span class="line">bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>當利用 <code>docker run</code> 來建立 Container 時，Docker 在後臺執行的標準操作包括：</p><ul><li>檢查本地是否存在指定的 Image，不存在就從 Repository Hub 下載</li><li>利用 Image 建立並啟動一個 Container</li><li>分配一個檔案系統，並在 Read-only 的 Image 層外面掛載一層可讀寫層</li><li>從宿主主機設定的網路橋界面中橋接一個虛擬埠到容器中去</li><li>從位址池中設定一個 IP 位址給 Container </li><li>執行使用者指定的應用程式</li><li>執行完畢後 Container 被終止</li></ul><h3 id="啟動已終止-Container"><a href="#啟動已終止-Container" class="headerlink" title="啟動已終止 Container"></a>啟動已終止 Container</h3><p>首先，先來看看目前的 Container 狀態</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Exited (0) 3 seconds ago        agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><p>從狀態（STATUS）中可以知道目前有啟動的 Container，現在透過 <code>docker start</code>，直接將已經終止的 Container（dd1c54fef918）啟動起來w</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker start dd1c54fef918</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Up 3 seconds                    agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><h2 id="停止-Container"><a href="#停止-Container" class="headerlink" title="停止 Container"></a>停止 Container</h2><p>跟上面就很類似了，相對的有 <code>start</code> 就會有 <code>stop</code></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Up 3 seconds                    agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br><span class="line"></span><br><span class="line">docker stop dd1c54fef918</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                          NAMES</span><br><span class="line">dd1c54fef918        ubuntu:14.04             <span class="string">"/bin/bash"</span>         10 minutes ago      Exited (0) 2 seconds ago        agitated_boyd</span><br><span class="line">2f902d9238f5        chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>         5 days ago          Exited (0) About a minute ago   confident_ritchie</span><br><span class="line">d7b639b8385a        ubuntu:12.04             <span class="string">"/bin/bash"</span>         7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br></pre></td></tr></table></figure><p>此外，當 Docker Container 中指定的應用停止時，Container 也自動停止。例如退出啟動的一個終端機 Container，使用者透過 exit 命令或 Ctrl+d 來退出終端機時，所建立的 Container 也隨之結束。</p><blockquote><p><code>docker restart</code> 命令會將一個執行中的 Container 終止，然後再重新啟動。</p></blockquote><h2 id="Daemonized-執行"><a href="#Daemonized-執行" class="headerlink" title="Daemonized 執行"></a>Daemonized 執行</h2><p>更多的時候，需要讓 Docker Container 在後臺以 Daemonized 形式執行。此時，可以透過新增 -d 參數來實作</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu:14.04 /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">31cec6c9afae51cd0adad62ac18b837e4d5caa80c141d7a8b0f7688670cb6e37</span><br></pre></td></tr></table></figure><p>Container 啟動後會返回一個唯一的 id，也可以透過 <code>docker ps</code> 指令來查看 Container 訊息</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   11 seconds ago      Up 10 seconds       confident_mirzakhani</span><br></pre></td></tr></table></figure><p>要取得 Container 的輸出訊息，可以透過 docker logs 指令來查看～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs 31cec6c9afae</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://linux.vbird.org/linux_basic/0560daemons.php" target="_blank" rel="noopener">何謂 Daemonized ?</a></p></blockquote><h2 id="進入-Container"><a href="#進入-Container" class="headerlink" title="進入 Container"></a>進入 Container</h2><p>有些時候不能只是在背景執行而已，需要透過進入 Container 來進行操作，其中有以下幾種方法</p><h3 id="exec-指令"><a href="#exec-指令" class="headerlink" title="exec 指令"></a>exec 指令</h3><p>首先先列出想要進入的 Container（相信已經很熟悉像是：列出 Container、Image 這類型的操作，更或者是連新增刪除都很熟悉惹w）</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -ti pensive_agnesi bash</span><br><span class="line">root@f4bf4c32b4c9:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="attach-指令"><a href="#attach-指令" class="headerlink" title="attach 指令"></a>attach 指令</h3><p>與 <code>exec</code> 要輸入的指令是完完全全相同的，只差在 <code>exec</code>、<code>attach</code> 這兩個字</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker attach -ti pensive_agnesi bash</span><br><span class="line">root@f4bf4c32b4c9:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec/43864530" target="_blank" rel="noopener">所以 attach / exec 到底哪裡不同呢？</a></p></blockquote><h2 id="Import-and-Export-Container"><a href="#Import-and-Export-Container" class="headerlink" title="Import and Export Container"></a>Import and Export Container</h2><h3 id="Import-Container"><a href="#Import-Container" class="headerlink" title="Import Container"></a>Import Container</h3><p>如果要匯入別人的 Container 的話，可以透過 <code>docker import</code> 從 Container 檔案中再匯入為 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu.tar | sudo docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure><h3 id="Export-Container"><a href="#Export-Container" class="headerlink" title="Export Container"></a>Export Container</h3><p>反之，如果要匯出 local 端的某一個 Container，可以使用 docker export 指令來進行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              NAMES</span><br><span class="line">31cec6c9afae        ubuntu:14.04        <span class="string">"/bin/sh -c 'while t…"</span>   18 minutes ago      Up 18 minutes       confident_mirzakhani</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> 31cec6c9afae &gt; ubuntu1404.tar</span><br></pre></td></tr></table></figure><p>就會匯出檔案囉～～</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ubuntu1404.tar</span><br></pre></td></tr></table></figure><h2 id="刪除-Container"><a href="#刪除-Container" class="headerlink" title="刪除 Container"></a>刪除 Container</h2><p>在上一篇當中，就有提到過如果要刪除 Image 時，如果還有 Container 還在使用這個 Image 會導致無法刪除的問題，這時候就可以用 <code>docker rm</code> 指令來刪除</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm confident_mirzakhani</span><br><span class="line">confident_mirzakhani</span><br></pre></td></tr></table></figure><blockquote><p>單純上方的指令只能刪除一個處於<code>終止狀態</code>的 Container，如果想要刪除正在執行中的 Container，可以新增 -f 參數指令，已完成需求。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇 &lt;a href=&quot;https://chestertang.site/2020/01/30/zyx0130/&quot;&gt;再談 Docker Image&lt;/a&gt; 的介紹中對於 Docker Image 有了更深入的了解，接下來換 Docker Container 吧！下篇還有 Docker Repository，再來就是實際 Deploy 惹～再等等啊w&lt;/p&gt;
&lt;h1 id=&quot;再談-Docker-Container&quot;&gt;&lt;a href=&quot;#再談-Docker-Container&quot; class=&quot;headerlink&quot; title=&quot;再談 Docker Container&quot;&gt;&lt;/a&gt;再談 Docker Container&lt;/h1&gt;&lt;h2 id=&quot;啟動-Container&quot;&gt;&lt;a href=&quot;#啟動-Container&quot; class=&quot;headerlink&quot; title=&quot;啟動 Container&quot;&gt;&lt;/a&gt;啟動 Container&lt;/h2&gt;&lt;p&gt;啟動容器有兩種方式，一種是將 Docker Image 新建一個 Container 並啟動，另外一個是將終止狀態（stopped）的 Container 重新啟動。&lt;/p&gt;
&lt;h3 id=&quot;新建並啟動&quot;&gt;&lt;a href=&quot;#新建並啟動&quot; class=&quot;headerlink&quot; title=&quot;新建並啟動&quot;&gt;&lt;/a&gt;新建並啟動&lt;/h3&gt;&lt;p&gt;透過 &lt;code&gt;docker run&lt;/code&gt; 給他新建啟動起來～&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -t -i ubuntu:14.04 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，&lt;code&gt;-t&lt;/code&gt; 指令讓 Docker 分配一個虛擬終端（pseudo-tty）並綁定到 Container 的 stdin 上，&lt;code&gt;-i&lt;/code&gt; 則讓 Container 的 stdin 保持打開。意思是，使用者可以透過所建立的終端來輸入指令，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@af8bae53bdd3:/&lt;span class=&quot;comment&quot;&gt;# pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@af8bae53bdd3:/&lt;span class=&quot;comment&quot;&gt;# ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;當利用 &lt;code&gt;docker run&lt;/code&gt; 來建立 Container 時，Docker 在後臺執行的標準操作包括：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>再談 Docker Image</title>
    <link href="http://chestertang.site/2020/01/30/zyx0130/"/>
    <id>http://chestertang.site/2020/01/30/zyx0130/</id>
    <published>2020-01-30T04:04:40.000Z</published>
    <updated>2020-01-30T05:57:46.743Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇的 <a href="https://chestertang.site/2020/01/21/zyx0121/">Docker 是什麼？</a> 的介紹中我們知道了 Docker 三大元素，這篇就來講一下如何安裝及再談 Docker Image 吧 owo</p><h1 id="如何安裝-Docker？"><a href="#如何安裝-Docker？" class="headerlink" title="如何安裝 Docker？"></a>如何安裝 Docker？</h1><h2 id="Mac-安裝-Docker"><a href="#Mac-安裝-Docker" class="headerlink" title="Mac 安裝 Docker"></a>Mac 安裝 Docker</h2><h3 id="下載官方-Docker-dmg-安裝"><a href="#下載官方-Docker-dmg-安裝" class="headerlink" title="下載官方 Docker.dmg 安裝"></a>下載官方 <code>Docker.dmg</code> 安裝</h3><blockquote><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">Docker Desktop for Mac</a></p></blockquote><h3 id="透過-Homebrew-安裝"><a href="#透過-Homebrew-安裝" class="headerlink" title="透過 Homebrew 安裝"></a>透過 Homebrew 安裝</h3><p>使用 brew 指令安裝</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><p>啟動 docker for mac</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Docker.app</span><br></pre></td></tr></table></figure><hr><h1 id="再談-Docker-Image"><a href="#再談-Docker-Image" class="headerlink" title="再談 Docker Image"></a>再談 Docker Image</h1><p>上篇對於 Docker 三大元素的基本介紹有了一定的了解，接下來再來學習如何操作吧！</p><h2 id="取得-Docker-Image"><a href="#取得-Docker-Image" class="headerlink" title="取得 Docker Image"></a>取得 Docker Image</h2><p>可以使用 <code>docker pull</code> 指令從 Docker Hub 取得所需要的 Image。舉例下載一個 Ubuntu 12.04 作業系統的 Image。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull ubuntu:12.04</span><br><span class="line">Password: //輸入密碼</span><br><span class="line"></span><br><span class="line">12.04: Pulling from library/ubuntu</span><br><span class="line">d8868e50ac4c: Pull complete</span><br><span class="line">83251ac64627: Pull complete</span><br><span class="line">589bba2f1b36: Pull complete</span><br><span class="line">d62ecaceda39: Pull complete</span><br><span class="line">6d93b41cfc6b: Pull complete</span><br><span class="line">Digest: sha256:...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:12.04</span><br><span class="line">docker.io/library/ubuntu:12.04</span><br></pre></td></tr></table></figure><p>完成後，即可隨時使用我們下載的這個 Image 了（讓這個 Image 執行 bash）</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:12.04 /bin/bash</span><br><span class="line"></span><br><span class="line">root@d7b639b8385a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>之後會再介紹這段指令的意思～</p></blockquote><h2 id="列出-Docker-Image"><a href="#列出-Docker-Image" class="headerlink" title="列出 Docker Image"></a>列出 Docker Image</h2><p>使用 docker images 顯示本機已有的 Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY    TAG      IMAGE ID        CREATED             SIZE</span><br><span class="line">hello-world   latest   fce289e99eb9    12 months ago       1.84kB</span><br><span class="line">ubuntu        12.04    5b117edd0b76    2 years ago         104MB</span><br></pre></td></tr></table></figure><p>在終端機列出訊息中，可以看到幾段文字訊息</p><ul><li>REPOSITORY：來自哪個 Registry</li><li>TAG：版本</li><li>IMAGE ID：Image 的 ID（唯一）</li><li>CREATED：建立時間</li><li>VIRTUAL SIZE：Image 檔案大小</li></ul><blockquote><p>題外話：可以看到 hello-world 的 TAG 是 <code>latest</code>，這代表著這個 Image 沒有設定 TAG，恩…</p></blockquote><h2 id="建立-Docker-Image"><a href="#建立-Docker-Image" class="headerlink" title="建立 Docker Image"></a>建立 Docker Image</h2><h3 id="修改別人的-Image-已建立新的-Image"><a href="#修改別人的-Image-已建立新的-Image" class="headerlink" title="修改別人的 Image 已建立新的 Image"></a>修改別人的 Image 已建立新的 Image</h3><p>首先，先把別人的 Image pull 下來並啟動 Container</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i training/sinatra /bin/bash</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'training/sinatra:latest'</span> locally</span><br><span class="line">latest: Pulling from training/sinatra</span><br><span class="line">Image docker.io/training/sinatra:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image <span class="keyword">for</span> better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">6e71c809542e: Pull complete</span><br><span class="line">d196a7609355: Pull complete</span><br><span class="line">08f6dff5acea: Pull complete</span><br><span class="line">ce65532003d0: Pull complete</span><br><span class="line">54bcaa4d1a10: Pull complete</span><br><span class="line">8572ad96f6e1: Pull complete</span><br><span class="line">Digest: ...</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> training/sinatra:latest</span><br></pre></td></tr></table></figure><p>稍微對這個別人的 Image 對點手腳，加個 <code>gem install json</code> 為例來試試</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@360d0440d1d4:/<span class="comment"># gem install json</span></span><br><span class="line"></span><br><span class="line">Fetching: json-2.3.0.gem (100%)</span><br><span class="line">Building native extensions.  This could take a <span class="keyword">while</span>...</span><br><span class="line">Successfully installed json-2.3.0</span><br><span class="line">1 gem installed</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> json-2.3.0...</span><br><span class="line">Installing RDoc documentation <span class="keyword">for</span> json-2.3.0...</span><br></pre></td></tr></table></figure><p>安裝完成 <code>gem install json</code> 後，代表我們這個 Container 已經被改變了！按下 control+D 或 exit 跳出這個 Container！再透過 <code>docker commit</code> 指令來新增這個 commit</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Chester"</span> 7c61f457e695 chestertang/sinatra:v2</span><br></pre></td></tr></table></figure><blockquote><p>如果 docker ps 中沒有 container，那執行上方指令將會 Error response from daemon: No such container: 49d952a36c58，因此，可以試試看下以下指令來看擁有的 Container ID</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>在這段指令中，指令分別代表的意思如下</p><ul><li><code>-m &quot;Added json gem&quot;</code>：與 github commit 訊息一樣，後方的為這次 commit 的註解</li><li><code>-a &quot;Chester&quot;</code>：代表著是作者資訊</li><li><code>7c61f457e695</code>：Container ID，透過 docker ps / docker ps -a 取得</li><li><code>chestertang/sinatra:v2</code>：v2 冒號前半段是 Repository 名稱（不能大寫），後半段是 TAG</li></ul><p>再來看看 docker images 吧！</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG         IMAGE ID          CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2          3bae0e76683f      11 seconds ago      447MB</span><br><span class="line">ubuntu                12.04       5b117edd0b76      2 years ago         104MB</span><br><span class="line">training/sinatra      latest      49d952a36c58      5 years ago         447MB</span><br></pre></td></tr></table></figure><p>並且用剛剛新的 Images 來啟動 Container</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i chestertang/sinatra:v2 /bin/bash</span><br><span class="line"></span><br><span class="line">root@2f902d9238f5:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="利用-Dockerfile-建立-Image"><a href="#利用-Dockerfile-建立-Image" class="headerlink" title="利用 Dockerfile 建立 Image"></a>利用 Dockerfile 建立 Image</h3><p>我們可以使用 docker build 來建立一個新的 Image。首先，需要建立一個 Dockerfile，裡面包含一些用來建立 Image 的指令。</p><p>新建一個資料夾和一個 Dockerfile</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir sinatra</span><br><span class="line"><span class="built_in">cd</span> sinatra</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>開啟建立的 Dockerfile 並來透過 ubuntu 與安裝 Ruby 來安裝 sinatra</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a comment</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Docker Chester &lt;chestertang.zyxel@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qq update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qqy install ruby ruby-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> gem install sinatra</span></span><br></pre></td></tr></table></figure><p>Dockerfile 的基本語法的思如下：</p><ul><li><code>#</code> 來表示註解</li><li><code>FROM</code> 指令告訴 Docker 使用哪個 Image 作為基底</li><li><code>MAINTAINER</code> 表示誰是這個 file 的維護者</li><li><code>RUN</code> 開頭的指令會在建立中執行，比如在這裏使用 <code>apt-get</code> 來安裝 <code>ruby</code>、<code>sinatra</code> 套件</li></ul><p>建立完成 Dockerfile 後可以使用 <code>docker build</code> 建立 Docker Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"chestertang/sinatra:v2"</span> .</span><br><span class="line"></span><br><span class="line">Uploading context  2.56 kB</span><br><span class="line">Uploading context</span><br><span class="line">Step 0 : FROM ubuntu:14.04</span><br><span class="line">  ---&gt; 99ec81b80c55</span><br><span class="line">Step 1 : MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> 7c5664a8a0c1</span><br><span class="line">  ---&gt; 2fa8ca4e2a13</span><br><span class="line">Removing intermediate container 7c5664a8a0c1</span><br><span class="line">Step 2 : RUN apt-get -qq update</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> b07cc3fb4256</span><br><span class="line">  ---&gt; 50d21070ec0c</span><br><span class="line">Removing intermediate container b07cc3fb4256</span><br><span class="line">Step 3 : RUN apt-get -qqy install ruby ruby-dev</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> a5b038dd127e</span><br><span class="line">Selecting previously unselected package libasan0:amd64.</span><br><span class="line">(Reading database ... 11518 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libasan0_4.8.2-19ubuntu1_amd64.deb ...</span><br><span class="line">Setting up ruby (1:1.9.3.4) ...</span><br><span class="line">Setting up ruby1.9.1 (1.9.3.484-2ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.19-0ubuntu6) ...</span><br><span class="line">  ---&gt; 2acb20f17878</span><br><span class="line">Removing intermediate container a5b038dd127e</span><br><span class="line">Step 4 : RUN gem install sinatra</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> 5e9d0065c1f7</span><br><span class="line">. . .</span><br><span class="line">Successfully installed rack-protection-1.5.3</span><br><span class="line">Successfully installed sinatra-1.4.5</span><br><span class="line">4 gems installed</span><br><span class="line">  ---&gt; 324104cde6ad</span><br><span class="line">Removing intermediate container 5e9d0065c1f7</span><br><span class="line">Successfully built 324104cde6ad</span><br></pre></td></tr></table></figure><blockquote><p>其中 -t 標記添加 TAG，指定新的 Image 的使用者資訊。 “.” 是 Dockerfile 所在的路徑，也可以換成具體的 Dockerfile 的路徑。</p></blockquote><p>Dockerfile 是設定專案必定使用的方式，這個將在之後的有更深入的一篇例子來實作</p><h3 id="從本機匯入"><a href="#從本機匯入" class="headerlink" title="從本機匯入"></a>從本機匯入</h3><p>要從本機匯入 Image，可以使用 <code>OpenVZ</code> 來建立(<a href="https://wiki.openvz.org/Download/template/precreated" target="_blank" rel="noopener">https://wiki.openvz.org/Download/template/precreated</a>)</p><p>比如，先下載一個 ubuntu-14.04 的映像檔，之後使用以下命令匯入：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure><p>然後查看新匯入的 Docker Image</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY    TAG       IMAGE ID         CREATED           VIRTUAL SIZE</span><br><span class="line">ubuntu        14.04     05ac7c0b9383     17 seconds ago    215.5 MB</span><br></pre></td></tr></table></figure><h3 id="上傳-Docker-Images"><a href="#上傳-Docker-Images" class="headerlink" title="上傳 Docker Images"></a>上傳 Docker Images</h3><p>可以透過 <code>docker push</code> 指令，把自己建立的 Docker Image 分享上傳到 <code>Repository</code> 。例如，使用者在 Docker Hub 上完成註冊後，可以推送自己的 Docker Image 到 Repository 中。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker push chestertang/sinatra</span><br><span class="line"></span><br><span class="line">sudo docker push chestertang/sinatra</span><br><span class="line"></span><br><span class="line">The push refers to a repository [chestertang/sinatra]</span><br><span class="line">Sending image list</span><br><span class="line">Pushing repository chestertang/sinatra</span><br></pre></td></tr></table></figure><h2 id="儲存和載入-Image"><a href="#儲存和載入-Image" class="headerlink" title="儲存和載入 Image"></a>儲存和載入 Image</h2><h3 id="儲存-Image"><a href="#儲存-Image" class="headerlink" title="儲存 Image"></a>儲存 Image</h3><p>如果要建立 Docker Image 到 local 檔案，可以使用 docker save 指令來儲存</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY      TAG         IMAGE ID          CREATED           VIRTUAL SIZE</span><br><span class="line">ubuntu          14.04       c4ff7513909d      5 weeks ago       225.4 MB</span><br><span class="line"></span><br><span class="line">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id="載入映像檔"><a href="#載入映像檔" class="headerlink" title="載入映像檔"></a>載入映像檔</h3><p>可以使用 <code>docker load</code> 從建立的 local 檔案再匯入到 local Image，例如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input ubuntu_14.04.tar || docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure><h2 id="移除-local-端-Docker-Image"><a href="#移除-local-端-Docker-Image" class="headerlink" title="移除 local 端 Docker Image"></a>移除 local 端 Docker Image</h2><p>  如果要移除 local 端的 Docker Image，可以使用 docker rmi 命令。（注意：如果有 Container 是透過現在這個 Image 在執行的話，必須先將 Container 刪除完畢後才能刪除 Image）</p><p>  先來列出有的 Container 與 Image</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID    IMAGE                    COMMAND          CREATED             STATUS                          NAMES</span><br><span class="line">83be203c6040    chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>      48 minutes ago      Exited (0) 18 minutes ago       elastic_hertz</span><br><span class="line">2f902d9238f5    chestertang/sinatra:v2   <span class="string">"/bin/bash"</span>      4 days ago          Exited (130) 4 days ago         confident_ritchie</span><br><span class="line">d7b639b8385a    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (127) 7 days ago         dreamy_hypatia</span><br><span class="line">1d8d58333b3d    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (130) 7 days ago         wizardly_morse</span><br><span class="line">c9a19d3553c9    ubuntu:12.04             <span class="string">"/bin/bash"</span>      7 days ago          Exited (0) 7 days ago           interesting_dubinsky</span><br><span class="line">bcf468d00ca2    hello-world              <span class="string">"/hello"</span>         9 days ago          Exited (0) 9 days ago           inspiring_newton</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                IMAGE ID         CREATED             SIZE</span><br><span class="line">chestertang/sinatra   v2                 3bae0e76683f     7 days ago          447MB</span><br><span class="line">ubuntu                14.04              6e4f1fe62ff1     5 weeks ago         197MB</span><br><span class="line">hello-world           latest             fce289e99eb9     13 months ago       1.84kB</span><br><span class="line">ubuntu                12.04              5b117edd0b76     2 years ago         104MB</span><br><span class="line">joshhu/webdemo        latest             c58bf6158823     4 years ago         243MB</span><br><span class="line">training/sinatra      latest             49d952a36c58     5 years ago         447MB</span><br></pre></td></tr></table></figure><p>  來刪除 training/sinatra 這個 image</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi training/sinatra</span><br><span class="line"></span><br><span class="line">Untagged: training/sinatra:latest</span><br><span class="line">Untagged: training/sinatra@sha256:...</span><br></pre></td></tr></table></figure><p>  如果如上所述，在被刪除的這個 Image 底下還有 Container 未被刪除就會出現以下訊息：</p>  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi fce289e99eb9</span><br><span class="line"></span><br><span class="line">Error response from daemon: conflict: unable to delete fce289e99eb9 (must be forced) - image is being used by stopped container bcf468d00ca2</span><br></pre></td></tr></table></figure><blockquote><p>這時候就需要透過 <code>docker rm</code> 先去把底下的 Container 都刪除完畢完後，才能移除 Image！</p></blockquote><hr><h1 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h1><ul><li><a href="https://dotblogs.com.tw/aken1215/2016/09/18/132729" target="_blank" rel="noopener">朕在coding</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker — 从入门到实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇的 &lt;a href=&quot;https://chestertang.site/2020/01/21/zyx0121/&quot;&gt;Docker 是什麼？&lt;/a&gt; 的介紹中我們知道了 Docker 三大元素，這篇就來講一下如何安裝及再談 Docker Image 吧 owo&lt;/p&gt;
&lt;h1 id=&quot;如何安裝-Docker？&quot;&gt;&lt;a href=&quot;#如何安裝-Docker？&quot; class=&quot;headerlink&quot; title=&quot;如何安裝 Docker？&quot;&gt;&lt;/a&gt;如何安裝 Docker？&lt;/h1&gt;&lt;h2 id=&quot;Mac-安裝-Docker&quot;&gt;&lt;a href=&quot;#Mac-安裝-Docker&quot; class=&quot;headerlink&quot; title=&quot;Mac 安裝 Docker&quot;&gt;&lt;/a&gt;Mac 安裝 Docker&lt;/h2&gt;&lt;h3 id=&quot;下載官方-Docker-dmg-安裝&quot;&gt;&lt;a href=&quot;#下載官方-Docker-dmg-安裝&quot; class=&quot;headerlink&quot; title=&quot;下載官方 Docker.dmg 安裝&quot;&gt;&lt;/a&gt;下載官方 &lt;code&gt;Docker.dmg&lt;/code&gt; 安裝&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Desktop for Mac&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;透過-Homebrew-安裝&quot;&gt;&lt;a href=&quot;#透過-Homebrew-安裝&quot; class=&quot;headerlink&quot; title=&quot;透過 Homebrew 安裝&quot;&gt;&lt;/a&gt;透過 Homebrew 安裝&lt;/h3&gt;&lt;p&gt;使用 brew 指令安裝&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew cask install docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;啟動 docker for mac&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open /Applications/Docker.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://chestertang.site/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://chestertang.site/tags/Docker/"/>
    
      <category term="note" scheme="http://chestertang.site/tags/note/"/>
    
  </entry>
  
</feed>
