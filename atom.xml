<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>查斯特部落格 | The Blog Of Chester Tang</title>
  
  <subtitle>查斯特 Chester Tang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chestertang.site/"/>
  <updated>2020-09-28T01:15:07.865Z</updated>
  <id>http://chestertang.site/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13 - int32 to IPv4</title>
    <link href="http://chestertang.site/2020/09/28/codewars13/"/>
    <id>http://chestertang.site/2020/09/28/codewars13/</id>
    <published>2020-09-28T01:00:00.000Z</published>
    <updated>2020-09-28T01:15:07.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-int32-to-IPv4"><a href="#13-int32-to-IPv4" class="headerlink" title="13 - int32 to IPv4"></a>13 - int32 to IPv4</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Take the following IPv4 address: <code>128.32.10.1</code></p><p>This address has 4 octets where each octet is a single byte (or 8 bits).</p><ul><li>1st octet 128 has the binary representation: <code>10000000</code></li><li>2nd octet 32 has the binary representation: <code>00100000</code></li><li>3rd octet 10 has the binary representation: <code>00001010</code></li><li>4th octet 1 has the binary representation: <code>00000001</code></li></ul><p>So <code>128.32.10.1</code> == <code>10000000.00100000.00001010.00000001</code></p><p>Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: <code>2149583361</code></p><p>Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.</p><p>Examples</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2149583361</span> ==&gt; <span class="string">"128.32.10.1"</span></span><br><span class="line"><span class="number">32</span>         ==&gt; <span class="string">"0.0.0.32"</span></span><br><span class="line"><span class="number">0</span>          ==&gt; <span class="string">"0.0.0.0"</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  <span class="comment"># your solution</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(int32_to_ip(<span class="number">2154959208</span>), <span class="string">"128.114.17.104"</span>) </span><br><span class="line">Test.assert_equals(int32_to_ip(<span class="number">0</span>), <span class="string">"0.0.0.0"</span>)</span><br><span class="line">Test.assert_equals(int32_to_ip(<span class="number">2149583361</span>), <span class="string">"128.32.10.1"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int32ToIp</span>(<span class="params">int32</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals( int32ToIp(<span class="number">2154959208</span>), <span class="string">"128.114.17.104"</span>, <span class="string">"wrong ip for interger: 2154959208"</span>) </span><br><span class="line">Test.assertEquals( int32ToIp(<span class="number">0</span>), <span class="string">"0.0.0.0"</span>, <span class="string">"wrong ip for integer: 0"</span>)</span><br><span class="line">Test.assertEquals( int32ToIp(<span class="number">2149583361</span>), <span class="string">"128.32.10.1"</span>, <span class="string">"wrong ip for integer: 2149583361"</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 先需要去了解 <a href="https://zh.wikipedia.org/wiki/IPv4" target="_blank" rel="noopener">IPv4</a> 是什麼<br>想法(2): 轉為 <code>binary</code> 後還要 <code>8</code> 個為一群，並且補 <code>0</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200928/20120826hZNjejxq8g.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200928/20120826hZNjejxq8g.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/RYyr-k3Ysqg" target="_blank" rel="noopener">Unsplash Damian Zaleski</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/rjust" target="_blank" rel="noopener">Ruby - apidock Rjust</a></li><li><a href="https://apidock.com/ruby/String/scan" target="_blank" rel="noopener">Ruby - apidock Scan</a></li><li><a href="https://apidock.com/ruby/Socket" target="_blank" rel="noopener">Ruby - apidock Socket</a></li><li><a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/ipaddr/rdoc/IPAddr.html" target="_blank" rel="noopener">Ruby - rubydocs IPAddr</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">JS - MDN String.prototype.padStart()</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">JS - MDN String.prototype.match()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  int32.to_s(<span class="number">2</span>)</span><br><span class="line">       .rjust(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">       .scan(<span class="regexp">/.&#123;8&#125;/</span>)</span><br><span class="line">       .map&#123; <span class="params">|s|</span> s.to_i(<span class="number">2</span>) &#125;</span><br><span class="line">       .join(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ipaddr'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int32_to_ip</span><span class="params">(int32)</span></span></span><br><span class="line">  IPAddr.new(int32, Socket::AF_INET).to_s</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">int32ToIp</span>(<span class="params">int32</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> int32.toString(<span class="number">2</span>)</span><br><span class="line">              .padStart(<span class="number">32</span>, <span class="string">'0'</span>)</span><br><span class="line">              .match(<span class="regexp">/([01]&#123;8&#125;)/g</span>)</span><br><span class="line">              .map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">parseInt</span>(x, <span class="number">2</span>))</span><br><span class="line">              .join(<span class="string">'.'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;13-int32-to-IPv4&quot;&gt;&lt;a href=&quot;#13-int32-to-IPv4&quot; class=&quot;headerlink&quot; title=&quot;13 - int32 to IPv4&quot;&gt;&lt;/a&gt;13 - int32 to IPv4&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Take the following IPv4 address: &lt;code&gt;128.32.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This address has 4 octets where each octet is a single byte (or 8 bits).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st octet 128 has the binary representation: &lt;code&gt;10000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2nd octet 32 has the binary representation: &lt;code&gt;00100000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3rd octet 10 has the binary representation: &lt;code&gt;00001010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4th octet 1 has the binary representation: &lt;code&gt;00000001&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So &lt;code&gt;128.32.10.1&lt;/code&gt; == &lt;code&gt;10000000.00100000.00001010.00000001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: &lt;code&gt;2149583361&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>12 - Greed is Dice</title>
    <link href="http://chestertang.site/2020/09/27/codewars12/"/>
    <id>http://chestertang.site/2020/09/27/codewars12/</id>
    <published>2020-09-27T01:00:00.000Z</published>
    <updated>2020-09-28T01:15:28.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Greed-is-Dice"><a href="#12-Greed-is-Dice" class="headerlink" title="12 - Greed is Dice"></a>12 - Greed is Dice</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Greed is a dice game played with five six-sided dice. Your mission, should you choose to accept it, is to score a throw according to these rules. You will always be given an array with five six-sided dice values.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Three <span class="number">1</span><span class="string">'s =&gt; 1000 points</span></span><br><span class="line"><span class="string">Three 6'</span>s =&gt;  <span class="number">600</span> points</span><br><span class="line">Three <span class="number">5</span><span class="string">'s =&gt;  500 points</span></span><br><span class="line"><span class="string">Three 4'</span>s =&gt;  <span class="number">400</span> points</span><br><span class="line">Three <span class="number">3</span><span class="string">'s =&gt;  300 points</span></span><br><span class="line"><span class="string">Three 2'</span>s =&gt;  <span class="number">200</span> points</span><br><span class="line">One   <span class="number">1</span>   =&gt;  <span class="number">100</span> points</span><br><span class="line">One   <span class="number">5</span>   =&gt;   <span class="number">50</span> point</span><br></pre></td></tr></table></figure><p>A single die can only be counted once in each roll. For example, a given “5” can only count as part of a triplet (contributing to the 500 points) or as a single 50 points, but not both in the same roll.</p><p>Example scoring</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Throw       Score</span><br><span class="line">---------   ------------------</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span>   <span class="number">250</span>:  <span class="number">50</span> (<span class="keyword">for</span> the <span class="number">5</span>) + <span class="number">2</span> * <span class="number">100</span> (<span class="keyword">for</span> the <span class="number">1</span>s)</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span>   <span class="number">1100</span>: <span class="number">1000</span> (<span class="keyword">for</span> three <span class="number">1</span>s) + <span class="number">100</span> (<span class="keyword">for</span> the other <span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span>   <span class="number">450</span>:  <span class="number">400</span> (<span class="keyword">for</span> three <span class="number">4</span>s) + <span class="number">50</span> (<span class="keyword">for</span> the <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>In some languages, it is possible to mutate the input to the function. This is something that you should never do. If you mutate the input, you will not be able to pass all the tests.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">( dice )</span></span></span><br><span class="line">  <span class="comment"># Fill me in!</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"Scorer Function"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"should value this as worthless"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>] ) == <span class="number">0</span>,   <span class="string">"Should be 0 :-("</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  it <span class="string">"should value this triplet correctly"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>] ) == <span class="number">200</span>, <span class="string">"Should be 200"</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  it <span class="string">"should value this mixed set correctly"</span> <span class="keyword">do</span></span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>] ) == <span class="number">450</span>, <span class="string">"Should be 450"</span> );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params"> dice </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Fill me in!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe( <span class="string">"Scorer Function"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it( <span class="string">"should value this as worthless"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>] ) == <span class="number">0</span>,   <span class="string">"Should be 0 :-("</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it( <span class="string">"should value this triplet correctly"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>] ) == <span class="number">400</span>, <span class="string">"Should be 400"</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  it( <span class="string">"should value this mixed set correctly"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Test.expect( score( [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>] ) == <span class="number">450</span>, <span class="string">"Should be 450"</span> );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1):<br>想法(2):</p><p>圖片—<br>圖片來源：<a href="https://unsplash.com/photos/SYTO3xs06fU" target="_blank" rel="noopener">Unsplash Marvin Meyer</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/start_with%3F" target="_blank" rel="noopener">Ruby - apidock Start_with?</a></li><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock Gsub</a></li><li><a href="https://docs.ruby-lang.org/en/2.1.0/URI.html" target="_blank" rel="noopener">Ruby - rubydocs URI</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">JS - MDN String.prototype.replace()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(dice)</span></span></span><br><span class="line">  [</span><br><span class="line">    dice.count(<span class="number">1</span>) / <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">    dice.count(<span class="number">6</span>) / <span class="number">3</span> * <span class="number">600</span>,</span><br><span class="line">    dice.count(<span class="number">5</span>) / <span class="number">3</span> * <span class="number">500</span>,</span><br><span class="line">    dice.count(<span class="number">4</span>) / <span class="number">3</span> * <span class="number">400</span>,</span><br><span class="line">    dice.count(<span class="number">3</span>) / <span class="number">3</span> * <span class="number">300</span>,</span><br><span class="line">    dice.count(<span class="number">2</span>) / <span class="number">3</span> * <span class="number">200</span>,</span><br><span class="line">    dice.count(<span class="number">1</span>) % <span class="number">1</span> * <span class="number">100</span>,</span><br><span class="line">    dice.count(<span class="number">5</span>) % <span class="number">5</span> * <span class="number">50</span>,</span><br><span class="line">  ].reduce(<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span> <span class="params">(dice)</span></span></span><br><span class="line">  sum = <span class="number">0</span></span><br><span class="line">  (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    count = dice.select &#123; <span class="params">|d|</span> d == i &#125;.size</span><br><span class="line"></span><br><span class="line">    sum += (i==<span class="number">1</span> ? <span class="number">1000</span> : i*<span class="number">100</span>) <span class="keyword">if</span> count &gt;= <span class="number">3</span></span><br><span class="line">    sum += (count % <span class="number">3</span>)  * <span class="number">100</span>    <span class="keyword">if</span> i == <span class="number">1</span></span><br><span class="line">    sum += (count % <span class="number">3</span>)  *  <span class="number">50</span>    <span class="keyword">if</span> i == <span class="number">5</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params">dice</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> count = dice.filter( <span class="function"><span class="params">d</span> =&gt;</span> d == i).length</span><br><span class="line">    <span class="keyword">if</span>(count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">      sum += (i==<span class="number">1</span> ? <span class="number">1000</span> : i*<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">      sum += (count % <span class="number">3</span>) * <span class="number">100</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">      sum += (count % <span class="number">3</span>) * <span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;12-Greed-is-Dice&quot;&gt;&lt;a href=&quot;#12-Greed-is-Dice&quot; class=&quot;headerlink&quot; title=&quot;12 - Greed is Dice&quot;&gt;&lt;/a&gt;12 - Greed is Dice&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Greed is a dice game played with five six-sided dice. Your mission, should you choose to accept it, is to score a throw according to these rules. You will always be given an array with five six-sided dice values.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt; 1000 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 6&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt;  500 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 4&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Three &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;s =&amp;gt;  300 points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Three 2&#39;&lt;/span&gt;s =&amp;gt;  &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   =&amp;gt;  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; points&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One   &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;   =&amp;gt;   &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; point&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A single die can only be counted once in each roll. For example, a given “5” can only count as part of a triplet (contributing to the 500 points) or as a single 50 points, but not both in the same roll.&lt;/p&gt;
&lt;p&gt;Example scoring&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Throw       Score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------   ------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;1100&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; three &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;s) + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the other &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;450&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; three &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;s) + &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In some languages, it is possible to mutate the input to the function. This is something that you should never do. If you mutate the input, you will not be able to pass all the tests.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>11 - Extract the domain name from a URL</title>
    <link href="http://chestertang.site/2020/09/26/codewars11/"/>
    <id>http://chestertang.site/2020/09/26/codewars11/</id>
    <published>2020-09-26T01:00:00.000Z</published>
    <updated>2020-09-26T03:49:26.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Extract-the-domain-name-from-a-URL"><a href="#11-Extract-the-domain-name-from-a-URL" class="headerlink" title="11 - Extract the domain name from a URL"></a>11 - Extract the domain name from a URL</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">domain_name(<span class="string">"http://github.com/carbonfive/raygun"</span>) == <span class="string">"github"</span> </span><br><span class="line">domain_name(<span class="string">"http://www.zombie-bites.com"</span>) == <span class="string">"zombie-bites"</span></span><br><span class="line">domain_name(<span class="string">"https://www.cnet.com"</span>) == <span class="string">"cnet"</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  <span class="comment"># return just the domain name</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(domain_name(<span class="string">"http://google.com"</span>), <span class="string">"google"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"http://google.co.jp"</span>), <span class="string">"google"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"www.xakep.ru"</span>), <span class="string">"xakep"</span>)</span><br><span class="line">Test.assert_equals(domain_name(<span class="string">"https://youtube.com"</span>), <span class="string">"youtube"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domainName</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(domainName(<span class="string">"http://google.com"</span>), <span class="string">"google"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"http://google.co.jp"</span>), <span class="string">"google"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"www.xakep.ru"</span>), <span class="string">"xakep"</span>);</span><br><span class="line">Test.assertEquals(domainName(<span class="string">"https://youtube.com"</span>), <span class="string">"youtube"</span>);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 原本其實是從 <code>URI</code> 的方式寫完的，不過發現要處理的東西有點多，後來覺得 <code>start_with</code> 來解決就可以，也不用 <code>regex</code> 去 metch 所有條件（regex 就爛）<br>想法(2): 用 <code>gsub</code> 把所有要篩選的條件寫進來也不錯</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200926/20120826iQVDzANvdd.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200926/20120826iQVDzANvdd.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/SYTO3xs06fU" target="_blank" rel="noopener">Unsplash Marvin Meyer</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/String/start_with%3F" target="_blank" rel="noopener">Ruby - apidock Start_with?</a></li><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock Gsub</a></li><li><a href="https://docs.ruby-lang.org/en/2.1.0/URI.html" target="_blank" rel="noopener">Ruby - rubydocs URI</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">JS - MDN String.prototype.replace()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url = url.start_with?(<span class="string">'www.'</span>) ? url.split(<span class="string">'www.'</span>).last : url.split(<span class="string">'//'</span>).last</span><br><span class="line">  url.split(<span class="string">'.'</span>).first</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url.start_with?(<span class="string">'www.'</span>) ? url.split(<span class="string">'www.'</span>).last.split(<span class="string">'.'</span>).first</span><br><span class="line">                          : url.split(<span class="string">'//'</span>).last.split(<span class="string">'.'</span>).first</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">domain_name</span><span class="params">(url)</span></span></span><br><span class="line">  url.gsub(<span class="string">'http://'</span>, <span class="string">''</span>)</span><br><span class="line">     .gsub(<span class="string">'https://'</span>, <span class="string">''</span>)</span><br><span class="line">     .gsub(<span class="string">'www.'</span>, <span class="string">''</span>)</span><br><span class="line">     .split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1 gsub to replace XDDD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domainName</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> url.replace(<span class="string">'http://'</span>, <span class="string">''</span>)</span><br><span class="line">            .replace(<span class="string">'https://'</span>, <span class="string">''</span>)</span><br><span class="line">            .replace(<span class="string">'www.'</span>, <span class="string">''</span>)</span><br><span class="line">            .split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;11-Extract-the-domain-name-from-a-URL&quot;&gt;&lt;a href=&quot;#11-Extract-the-domain-name-from-a-URL&quot; class=&quot;headerlink&quot; title=&quot;11 - Extract the domain name from a URL&quot;&gt;&lt;/a&gt;11 - Extract the domain name from a URL&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://github.com/carbonfive/raygun&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;github&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://www.zombie-bites.com&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;zombie-bites&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;domain_name(&lt;span class=&quot;string&quot;&gt;&quot;https://www.cnet.com&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;cnet&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;domain_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# return just the domain name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://google.com&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;google&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;http://google.co.jp&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;google&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;www.xakep.ru&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;xakep&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals(domain_name(&lt;span class=&quot;string&quot;&gt;&quot;https://youtube.com&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;youtube&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>10 - Playing with digits</title>
    <link href="http://chestertang.site/2020/09/25/codewars10/"/>
    <id>http://chestertang.site/2020/09/25/codewars10/</id>
    <published>2020-09-25T01:00:00.000Z</published>
    <updated>2020-09-26T03:49:15.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-Playing-with-digits"><a href="#10-Playing-with-digits" class="headerlink" title="10 - Playing with digits"></a>10 - Playing with digits</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Some numbers have funny properties. For example:</p><blockquote><p>89 –&gt; 8¹ + 9² = 89 * 1</p></blockquote><blockquote><p>695 –&gt; 6² + 9³ + 5⁴= 1390 = 695 * 2</p></blockquote><blockquote><p>46288 –&gt; 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51</p></blockquote><p>Given a positive integer n written as abcd… (a, b, c, d… being digits) and a positive integer p</p><blockquote><p>we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n.</p></blockquote><p>In other words:</p><blockquote><p>Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + …) = n * k</p></blockquote><p>If it is the case we will return k, if not return -1.</p><p>Note: n and p will always be given as strictly positive integers.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dig_pow(<span class="number">89</span>, <span class="number">1</span>) should <span class="keyword">return</span> <span class="number">1</span> since <span class="number">8</span>¹ + <span class="number">9</span>² = <span class="number">89</span> = <span class="number">89</span> * <span class="number">1</span></span><br><span class="line">dig_pow(<span class="number">92</span>, <span class="number">1</span>) should <span class="keyword">return</span> <span class="number">-1</span> since there is no k such <span class="keyword">as</span> <span class="number">9</span>¹ + <span class="number">2</span>² equals <span class="number">92</span> * k</span><br><span class="line">dig_pow(<span class="number">695</span>, <span class="number">2</span>) should <span class="keyword">return</span> <span class="number">2</span> since <span class="number">6</span>² + <span class="number">9</span>³ + <span class="number">5</span>⁴= <span class="number">1390</span> = <span class="number">695</span> * <span class="number">2</span></span><br><span class="line">dig_pow(<span class="number">46288</span>, <span class="number">3</span>) should <span class="keyword">return</span> <span class="number">51</span> since <span class="number">4</span>³ + <span class="number">6</span>⁴+ <span class="number">2</span>⁵ + <span class="number">8</span>⁶ + <span class="number">8</span>⁷ = <span class="number">2360688</span> = <span class="number">46288</span> * <span class="number">51</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  <span class="comment"># your code</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(dig_pow(<span class="number">89</span>, <span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">Test.assert_equals(dig_pow(<span class="number">92</span>, <span class="number">1</span>), -<span class="number">1</span>)</span><br><span class="line">Test.assert_equals(dig_pow(<span class="number">46288</span>, <span class="number">3</span>), <span class="number">51</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digPow</span>(<span class="params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(digPow(<span class="number">89</span>, <span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">Test.assertEquals(digPow(<span class="number">92</span>, <span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line">Test.assertEquals(digPow(<span class="number">46288</span>, <span class="number">3</span>), <span class="number">51</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 與 <a href="https://ithelp.ithome.com.tw/articles/10241748" target="_blank" rel="noopener">見習村07 - Sum of Digits / Digital Root</a> 中運用的 <code>recursive</code> 類似<br>想法(2): 要多判斷今天傳進來的值有可能不是從 <code>1</code> 開始，然後再給他平方後加總，再取餘數來判斷回傳值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200925/20120826vy9gRts9zq.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200925/20120826vy9gRts9zq.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/KQ0C6WtEGlo" target="_blank" rel="noopener">Unsplash Jason Strull</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerator/with_index" target="_blank" rel="noopener">Ruby - apidock With_index</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow" target="_blank" rel="noopener">JS - MDN Math.pow()</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  number = n.to_s.split(<span class="string">''</span>).map(&amp;<span class="symbol">:to_i</span>)</span><br><span class="line">  sum = number.map.with_index(p) &#123; <span class="params">|num, idx|</span> num ** idx &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line">  sum % n == <span class="number">0</span> ? sum/n : -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dig_pow</span><span class="params">(n, p)</span></span></span><br><span class="line">  sum = n.to_s.chars.map.with_index(p) &#123; <span class="params">|num, idx|</span> num.to_i ** idx &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line">  sum % n == <span class="number">0</span> ? sum / n : -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digPow</span>(<span class="params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = n.toString().split(<span class="string">''</span>)</span><br><span class="line">             .map(<span class="function">(<span class="params">num, idx</span>) =&gt;</span> <span class="built_in">Math</span>.pow(<span class="built_in">parseInt</span>(num), idx+p))</span><br><span class="line">             .reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b) / n;</span><br><span class="line">  <span class="keyword">return</span> sum % <span class="number">1</span> == <span class="number">0</span> ? sum : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;10-Playing-with-digits&quot;&gt;&lt;a href=&quot;#10-Playing-with-digits&quot; class=&quot;headerlink&quot; title=&quot;10 - Playing with digits&quot;&gt;&lt;/a&gt;10 - Playing with digits&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Some numbers have funny properties. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;89 –&amp;gt; 8¹ + 9² = 89 * 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;695 –&amp;gt; 6² + 9³ + 5⁴= 1390 = 695 * 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;46288 –&amp;gt; 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a positive integer n written as abcd… (a, b, c, d… being digits) and a positive integer p&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words:&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>09 - Sums of Parts</title>
    <link href="http://chestertang.site/2020/09/24/codewars09/"/>
    <id>http://chestertang.site/2020/09/24/codewars09/</id>
    <published>2020-09-24T01:00:00.000Z</published>
    <updated>2020-09-24T01:42:56.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="09-Sums-of-Parts"><a href="#09-Sums-of-Parts" class="headerlink" title="09 - Sums of Parts"></a>09 - Sums of Parts</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Let us consider this example (array written in general format):</p><p><code>ls = [0, 1, 3, 6, 10]</code></p><p>Its following parts:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line">  ls = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line">  ls = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line">  ls = [6, 10]# 09 - Sums of Parts</span><br><span class="line"></span><br><span class="line">Don<span class="string">'t say so much, just coding...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Instruction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let us consider this example (array written in general format):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`ls = [0, 1, 3, 6, 10]`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Its following parts:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```javascript</span></span><br><span class="line"><span class="string">  ls = [0, 1, 3, 6, 10]</span></span><br><span class="line"><span class="string">  ls = [1, 3, 6, 10]</span></span><br><span class="line"><span class="string">  ls = [3, 6, 10]</span></span><br><span class="line"><span class="string">  ls = [6, 10]</span></span><br><span class="line"><span class="string">  ls = [10]</span></span><br><span class="line"><span class="string">  ls = []</span></span><br></pre></td></tr></table></figure><p>The corresponding sums are (put together in a list): <code>[20, 20, 19, 16, 10, 0]</code></p><p>The function parts_sums (or its variants in other languages) will take as parameter a list ls and return a list of the sums of its parts as defined above.</p><p>Other Examples:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] </span><br><span class="line">parts_sums(ls) -&gt; [<span class="number">21</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">744125</span>, <span class="number">935</span>, <span class="number">407</span>, <span class="number">454</span>, <span class="number">430</span>, <span class="number">90</span>, <span class="number">144</span>, <span class="number">6710213</span>, <span class="number">889</span>, <span class="number">810</span>, <span class="number">2579358</span>]</span><br><span class="line">parts_sums(ls) -&gt; [<span class="number">10037855</span>, <span class="number">9293730</span>, <span class="number">9292795</span>, <span class="number">9292388</span>, <span class="number">9291934</span>, <span class="number">9291504</span>, <span class="number">9291414</span>, <span class="number">9291270</span>, <span class="number">2581057</span>, <span class="number">2580168</span>, <span class="number">2579358</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"parts_sums"</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dotest</span><span class="params">(ls, expect)</span></span></span><br><span class="line">    actual = parts_sums(ls)</span><br><span class="line">    Test.assert_equals(actual, expect, <span class="string">""</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">"Basic tests"</span>) <span class="keyword">do</span>    </span><br><span class="line">    dotest([], [<span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">20</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">21</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">744125</span>, <span class="number">935</span>, <span class="number">407</span>, <span class="number">454</span>, <span class="number">430</span>, <span class="number">90</span>, <span class="number">144</span>, <span class="number">6710213</span>, <span class="number">889</span>, <span class="number">810</span>, <span class="number">2579358</span>], </span><br><span class="line">    [<span class="number">10037855</span>, <span class="number">9293730</span>, <span class="number">9292795</span>, <span class="number">9292388</span>, <span class="number">9291934</span>, <span class="number">9291504</span>, <span class="number">9291414</span>, <span class="number">9291270</span>, <span class="number">2581057</span>, <span class="number">2580168</span>, <span class="number">2579358</span>, <span class="number">0</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partsSums</span>(<span class="params">ls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</span><br><span class="line"><span class="keyword">const</span> assert = chai.assert;</span><br><span class="line">chai.config.truncateThreshold = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"partsSums"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dotest</span>(<span class="params">ls, expect</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> actual = partsSums(ls);</span><br><span class="line">    assert.deepEqual(actual, expect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"Basic tests"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dotest([], [<span class="number">0</span>]);</span><br><span class="line">    dotest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">20</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">0</span>]); </span><br><span class="line">    dotest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">21</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>]); </span><br><span class="line">    dotest([<span class="number">744125</span>, <span class="number">935</span>, <span class="number">407</span>, <span class="number">454</span>, <span class="number">430</span>, <span class="number">90</span>, <span class="number">144</span>, <span class="number">6710213</span>, <span class="number">889</span>, <span class="number">810</span>, <span class="number">2579358</span>], </span><br><span class="line">            [<span class="number">10037855</span>, <span class="number">9293730</span>, <span class="number">9292795</span>, <span class="number">9292388</span>, <span class="number">9291934</span>, <span class="number">9291504</span>, <span class="number">9291414</span>, <span class="number">9291270</span>, <span class="number">2581057</span>, <span class="number">2580168</span>, <span class="number">2579358</span>, <span class="number">0</span>]); </span><br><span class="line">&#125;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 這題應該來算是數學題，傳進來的值（陣列）會先加總，並且減掉陣列第一項<br>想法(2): 直至把所有值都扣除完，會得到一個新的陣列，並帶有每次扣除的總和</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200924/20120826GsGyEU0V2s.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200924/20120826GsGyEU0V2s.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/Hcfwew744z4" target="_blank" rel="noopener">Unsplash Christin Hume</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby </li><li>JavaScript</li></ul><blockquote><p>之前前幾篇應該都介紹到可以用到的方法了，接下來的十天也開始挑戰更高一個階級的題目ouo</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  sum = ls.sum</span><br><span class="line">  result = [sum]</span><br><span class="line">  (<span class="number">0</span>...ls.size).each &#123; <span class="params">|index|</span></span><br><span class="line">    result &lt;&lt; result.last - ls[index]</span><br><span class="line">  &#125;</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  sum = ls.sum</span><br><span class="line">  [sum] + ls.map&#123; <span class="params">|el|</span> sum -= el &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partsSums</span>(<span class="params">ls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = ls.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> result = [sum];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ls.length; i++)&#123;</span><br><span class="line">    result.push((result[result.length<span class="number">-1</span>]) - ls[i]);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  ls = [10]<br>  ls = []</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The corresponding sums are (put together in a list): `[20, 20, 19, 16, 10, 0]`</span><br><span class="line"></span><br><span class="line">The function parts_sums (or its variants in other languages) will take as parameter a list ls and return a list of the sums of its parts as defined above.</span><br><span class="line"></span><br><span class="line">Other Examples:</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">  ls = [1, 2, 3, 4, 5, 6] </span><br><span class="line">  parts_sums(ls) -&gt; [21, 20, 18, 15, 11, 6, 0]</span><br><span class="line">  </span><br><span class="line">  ls = [744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358]</span><br><span class="line">  parts_sums(ls) -&gt; [10037855, 9293730, 9292795, 9292388, 9291934, 9291504, 9291414, 9291270, 2581057, 2580168, 2579358, 0]</span><br></pre></td></tr></table></figure><h3 id="Ruby-2"><a href="#Ruby-2" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init-2"><a href="#Init-2" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-2"><a href="#Sample-Testing-2" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"parts_sums"</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dotest</span><span class="params">(ls, expect)</span></span></span><br><span class="line">    actual = parts_sums(ls)</span><br><span class="line">    Test.assert_equals(actual, expect, <span class="string">""</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">"Basic tests"</span>) <span class="keyword">do</span>    </span><br><span class="line">    dotest([], [<span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">20</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">21</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>])</span><br><span class="line">    dotest([<span class="number">744125</span>, <span class="number">935</span>, <span class="number">407</span>, <span class="number">454</span>, <span class="number">430</span>, <span class="number">90</span>, <span class="number">144</span>, <span class="number">6710213</span>, <span class="number">889</span>, <span class="number">810</span>, <span class="number">2579358</span>], </span><br><span class="line">    [<span class="number">10037855</span>, <span class="number">9293730</span>, <span class="number">9292795</span>, <span class="number">9292388</span>, <span class="number">9291934</span>, <span class="number">9291504</span>, <span class="number">9291414</span>, <span class="number">9291270</span>, <span class="number">2581057</span>, <span class="number">2580168</span>, <span class="number">2579358</span>, <span class="number">0</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-2"><a href="#Javascript-2" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-3"><a href="#Init-3" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partsSums</span>(<span class="params">ls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-3"><a href="#Sample-Testing-3" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</span><br><span class="line"><span class="keyword">const</span> assert = chai.assert;</span><br><span class="line">chai.config.truncateThreshold = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"partsSums"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dotest</span>(<span class="params">ls, expect</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> actual = partsSums(ls);</span><br><span class="line">    assert.deepEqual(actual, expect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"Basic tests"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dotest([], [<span class="number">0</span>]);</span><br><span class="line">    dotest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">20</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">0</span>]); </span><br><span class="line">    dotest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">21</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>]); </span><br><span class="line">    dotest([<span class="number">744125</span>, <span class="number">935</span>, <span class="number">407</span>, <span class="number">454</span>, <span class="number">430</span>, <span class="number">90</span>, <span class="number">144</span>, <span class="number">6710213</span>, <span class="number">889</span>, <span class="number">810</span>, <span class="number">2579358</span>], </span><br><span class="line">            [<span class="number">10037855</span>, <span class="number">9293730</span>, <span class="number">9292795</span>, <span class="number">9292388</span>, <span class="number">9291934</span>, <span class="number">9291504</span>, <span class="number">9291414</span>, <span class="number">9291270</span>, <span class="number">2581057</span>, <span class="number">2580168</span>, <span class="number">2579358</span>, <span class="number">0</span>]); </span><br><span class="line">&#125;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="Thinking-1"><a href="#Thinking-1" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1):<br>想法(2):<br>想法(3): </p><p>圖片—<br>圖片來源：<a href="https://unsplash.com/photos/PypjzKTUqLo" target="_blank" rel="noopener">Unsplash Roman Bozhko</a></p><h3 id="Hint-amp-Reference-1"><a href="#Hint-amp-Reference-1" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/chunk" target="_blank" rel="noopener">Ruby - apidock Chunk</a></li><li><a href="https://apidock.com/ruby/String/squeeze" target="_blank" rel="noopener">Ruby - apidock Squeeze</a></li></ul></li><li>JavaScript<ul><li><a href="https://www.samanthaming.com/tidbits/83-4-ways-to-convert-string-to-character-array/" target="_blank" rel="noopener">JS - 4 Ways to Convert String to Character Array in JavaScript</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">JS - MDN Array.prototype.push</a></li></ul></li></ul><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-3"><a href="#Ruby-3" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  sum = ls.sum</span><br><span class="line">  result = [sum]</span><br><span class="line">  (<span class="number">0</span>...ls.size).each &#123; <span class="params">|index|</span></span><br><span class="line">    result &lt;&lt; result.last - ls[index]</span><br><span class="line">  &#125;</span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts_sums</span><span class="params">(ls)</span></span></span><br><span class="line">  sum = ls.sum</span><br><span class="line">  [sum] + ls.map&#123; <span class="params">|el|</span> sum -= el &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-3"><a href="#Javascript-3" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partsSums</span>(<span class="params">ls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = ls.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> result = [sum];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ls.length; i++)&#123;</span><br><span class="line">    result.push((result[result.length<span class="number">-1</span>]) - ls[i]);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;09-Sums-of-Parts&quot;&gt;&lt;a href=&quot;#09-Sums-of-Parts&quot; class=&quot;headerlink&quot; title=&quot;09 - Sums of Parts&quot;&gt;&lt;/a&gt;09 - Sums of Parts&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Let us consider this example (array written in general format):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls = [0, 1, 3, 6, 10]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Its following parts:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  ls = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ls = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ls = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ls = [6, 10]# 09 - Sums of Parts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Don&lt;span class=&quot;string&quot;&gt;&#39;t say so much, just coding...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;## Instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Let us consider this example (array written in general format):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`ls = [0, 1, 3, 6, 10]`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Its following parts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;```javascript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = [0, 1, 3, 6, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = [1, 3, 6, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = [3, 6, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = [6, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = [10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  ls = []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The corresponding sums are (put together in a list): &lt;code&gt;[20, 20, 19, 16, 10, 0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function parts_sums (or its variants in other languages) will take as parameter a list ls and return a list of the sums of its parts as defined above.&lt;/p&gt;
&lt;p&gt;Other Examples:&lt;/p&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>08 - Mexican Wave</title>
    <link href="http://chestertang.site/2020/09/23/codewars08/"/>
    <id>http://chestertang.site/2020/09/23/codewars08/</id>
    <published>2020-09-23T01:00:00.000Z</published>
    <updated>2020-09-23T01:30:15.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="08-Mexican-Wave"><a href="#08-Mexican-Wave" class="headerlink" title="08 - Mexican Wave"></a>08 - Mexican Wave</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>In this simple Kata your task is to create a function that turns a string into a Mexican Wave. You will be passed a string and you must return that string in an array where an uppercase letter is a person standing up. </p><p>Rules:</p><ol><li>The input string will always be lower case but maybe empty.</li><li>If the character in the string is whitespace then pass over it as if it was an empty seat</li></ol><p>Examples:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wave(<span class="string">"hello"</span>) =&gt; [<span class="string">"Hello"</span>, <span class="string">"hEllo"</span>, <span class="string">"heLlo"</span>, <span class="string">"helLo"</span>, <span class="string">"hellO"</span>]</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wave</span><span class="params">(str)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="string">"Hello"</span>, <span class="string">"hEllo"</span>, <span class="string">"heLlo"</span>, <span class="string">"helLo"</span>, <span class="string">"hellO"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"hello"</span>),result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">"Codewars"</span>, <span class="string">"cOdewars"</span>, <span class="string">"coDewars"</span>, <span class="string">"codEwars"</span>, <span class="string">"codeWars"</span>, <span class="string">"codewArs"</span>, <span class="string">"codewaRs"</span>, <span class="string">"codewarS"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"codewars"</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">""</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">"Two words"</span>, <span class="string">"tWo words"</span>, <span class="string">"twO words"</span>, <span class="string">"two Words"</span>, <span class="string">"two wOrds"</span>, <span class="string">"two woRds"</span>, <span class="string">"two worDs"</span>, <span class="string">"two wordS"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"two words"</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">" Gap "</span>, <span class="string">" gAp "</span>, <span class="string">" gaP "</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">" gap "</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wave</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="string">"Hello"</span>, <span class="string">"hEllo"</span>, <span class="string">"heLlo"</span>, <span class="string">"helLo"</span>, <span class="string">"hellO"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"hello"</span>),result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">"Codewars"</span>, <span class="string">"cOdewars"</span>, <span class="string">"coDewars"</span>, <span class="string">"codEwars"</span>, <span class="string">"codeWars"</span>, <span class="string">"codewArs"</span>, <span class="string">"codewaRs"</span>, <span class="string">"codewarS"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"codewars"</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">""</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">"Two words"</span>, <span class="string">"tWo words"</span>, <span class="string">"twO words"</span>, <span class="string">"two Words"</span>, <span class="string">"two wOrds"</span>, <span class="string">"two woRds"</span>, <span class="string">"two worDs"</span>, <span class="string">"two wordS"</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">"two words"</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">result = [<span class="string">" Gap "</span>, <span class="string">" gAp "</span>, <span class="string">" gaP "</span>];</span><br><span class="line">Test.assertDeepEquals(wave(<span class="string">" gap "</span>), result, <span class="string">"Should return: '"</span>+result+<span class="string">"'"</span>);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 將所有字都先轉為小寫，在透過跑迴圈來看第幾個字為大寫 + 其餘小寫<br>想法(2): 複製原本傳入的值出來後，再將大寫的字 assign 回複製出來的值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200923/20120826UtmZFyXlPA.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200923/20120826UtmZFyXlPA.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/85XLV4Po2mk" target="_blank" rel="noopener">Unsplash C D-X</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerator/each_with_index" target="_blank" rel="noopener">Ruby - apidock each_with_index</a></li><li><a href="https://apidock.com/ruby/v2_5_5/String/downcase" target="_blank" rel="noopener">Ruby - apidock downcase</a></li><li><a href="https://apidock.com/ruby/String/upcase" target="_blank" rel="noopener">Ruby - apidock upcase</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">JS - MDN Array.prototype.slice</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noopener">JS - MDN String.prototype.toUpperCase</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wave</span><span class="params">(str)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  chars = str.downcase.chars</span><br><span class="line">  chars.each_with_index <span class="keyword">do</span> <span class="params">|char, index|</span></span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> char == <span class="string">" "</span></span><br><span class="line">    result &lt;&lt; str[<span class="number">0</span>...index] + char.upcase + str[index+<span class="number">1</span>..-<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wave</span><span class="params">(str)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  str.size.times <span class="keyword">do</span> <span class="params">|index|</span></span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> str[index] == <span class="string">' '</span></span><br><span class="line">    result &lt;&lt; str.dup</span><br><span class="line">    result[-<span class="number">1</span>][index] = result[-<span class="number">1</span>][index].upcase</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wave</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] != <span class="string">' '</span>) </span><br><span class="line">    result.push(str.slice(<span class="number">0</span>, i) + str[i].toUpperCase() + str.slice(i + <span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;08-Mexican-Wave&quot;&gt;&lt;a href=&quot;#08-Mexican-Wave&quot; class=&quot;headerlink&quot; title=&quot;08 - Mexican Wave&quot;&gt;&lt;/a&gt;08 - Mexican Wave&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;In this simple Kata your task is to create a function that turns a string into a Mexican Wave. You will be passed a string and you must return that string in an array where an uppercase letter is a person standing up. &lt;/p&gt;
&lt;p&gt;Rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The input string will always be lower case but maybe empty.&lt;/li&gt;
&lt;li&gt;If the character in the string is whitespace then pass over it as if it was an empty seat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wave(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;) =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hEllo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;heLlo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;helLo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hellO&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村07 - Sum of Digits / Digital Root</title>
    <link href="http://chestertang.site/2020/09/22/codewars07/"/>
    <id>http://chestertang.site/2020/09/22/codewars07/</id>
    <published>2020-09-22T01:00:00.000Z</published>
    <updated>2020-09-22T01:05:52.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="07-Sum-of-Digits-Digital-Root"><a href="#07-Sum-of-Digits-Digital-Root" class="headerlink" title="07 - Sum of Digits / Digital Root"></a>07 - Sum of Digits / Digital Root</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p><a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="noopener">Digital root</a> is the recursive sum of all the digits in a number.</p><p>Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.</p><p>Examples:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">16</span>   --&gt;  <span class="number">1</span> + <span class="number">6</span> = <span class="number">7</span></span><br><span class="line">   <span class="number">942</span>  --&gt;  <span class="number">9</span> + <span class="number">4</span> + <span class="number">2</span> = <span class="number">15</span>  --&gt;  <span class="number">1</span> + <span class="number">5</span> = <span class="number">6</span></span><br><span class="line"><span class="number">132189</span>  --&gt;  <span class="number">1</span> + <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span> + <span class="number">8</span> + <span class="number">9</span> = <span class="number">24</span>  --&gt;  <span class="number">2</span> + <span class="number">4</span> = <span class="number">6</span></span><br><span class="line"><span class="number">493193</span>  --&gt;  <span class="number">4</span> + <span class="number">9</span> + <span class="number">3</span> + <span class="number">1</span> + <span class="number">9</span> + <span class="number">3</span> = <span class="number">29</span>  --&gt;  <span class="number">2</span> + <span class="number">9</span> = <span class="number">11</span>  --&gt;  <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(digital_root(<span class="number">16</span>), <span class="number">7</span>)</span><br><span class="line">Test.assert_equals(digital_root(<span class="number">942</span>), <span class="number">6</span>)</span><br><span class="line">Test.assert_equals(digital_root(<span class="number">132189</span>), <span class="number">6</span>)</span><br><span class="line">Test.assert_equals(digital_root(<span class="number">493193</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digital_root</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals( digital_root(<span class="number">16</span>), <span class="number">7</span> )</span><br><span class="line">Test.assertEquals( digital_root(<span class="number">456</span>), <span class="number">6</span> )</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 將傳進來的值，先切開之後進行相加<br>想法(2): 需要判斷如果是兩位數以上的話，還需要在進行上述的動作，可以聯想到遞迴</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200922/20120826PSUp8bSOU0.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200922/20120826PSUp8bSOU0.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/omeaHbEFlN4" target="_blank" rel="noopener">Unsplash Alexis Brown</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li><a href="https://zh.wikipedia.org/zh-tw/%E9%80%92%E5%BD%92_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noopener">遞迴 Recursive</a></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  recursive = n.to_s.split(<span class="string">''</span>).map(&amp;<span class="symbol">:to_i</span>).sum</span><br><span class="line">  recursive &gt;= <span class="number">10</span> ? digital_root(recursive) : recursive</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">10</span></span><br><span class="line">  digital_root(n.to_s.chars.map(&amp;<span class="symbol">:to_i</span>).reduce(&amp;<span class="symbol">:+</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  n &lt; <span class="number">10</span> ? n : digital_root(n.to_s.chars.map(&amp;<span class="symbol">:to_i</span>).reduce(<span class="symbol">:+</span>))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digital_root</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  recursive = n.toString().split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">sum, s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum += <span class="built_in">Number</span>(s);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> recursive &lt; <span class="number">10</span> ? recursive : digital_root(recursive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait, what?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digital_root</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (n - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;07-Sum-of-Digits-Digital-Root&quot;&gt;&lt;a href=&quot;#07-Sum-of-Digits-Digital-Root&quot; class=&quot;headerlink&quot; title=&quot;07 - Sum of Digits / Digital Root&quot;&gt;&lt;/a&gt;07 - Sum of Digits / Digital Root&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_root&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Digital root&lt;/a&gt; is the recursive sum of all the digits in a number.&lt;/p&gt;
&lt;p&gt;Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;   --&amp;gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;942&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;132189&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;493193&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;  --&amp;gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;digital_root&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村06 - Character with longest consecutive repetition</title>
    <link href="http://chestertang.site/2020/09/21/codewars06/"/>
    <id>http://chestertang.site/2020/09/21/codewars06/</id>
    <published>2020-09-21T01:00:00.000Z</published>
    <updated>2020-09-21T01:36:38.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="06-Character-with-longest-consecutive-repetition"><a href="#06-Character-with-longest-consecutive-repetition" class="headerlink" title="06 - Character with longest consecutive repetition"></a>06 - Character with longest consecutive repetition</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>For a given string s find the character c (or C) with longest consecutive repetition and return:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c, l]</span><br></pre></td></tr></table></figure><p>where l (or L) is the length of the repetition. If there are two or more characters with the same l return the first in order of appearance.</p><p>For empty string return:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">""</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_repetition</span> <span class="title">chars</span></span></span><br><span class="line">  <span class="comment"># "Implement me!"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"Solution"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"should work for example tests"</span> <span class="keyword">do</span></span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"aaaabb"</span>), [<span class="string">'a'</span>, <span class="number">4</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"bbbaaabaaaa"</span>), [<span class="string">'a'</span>, <span class="number">4</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"cbdeuuu900"</span>), [<span class="string">'u'</span>, <span class="number">3</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"abbbbb"</span>), [<span class="string">'b'</span>, <span class="number">5</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"aabb"</span>), [<span class="string">'a'</span>, <span class="number">2</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"ba"</span>), [<span class="string">'b'</span>, <span class="number">1</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">""</span>), [<span class="string">''</span>, <span class="number">0</span>])</span><br><span class="line">    Test.assert_equals(longest_repetition(<span class="string">"aaabbcccddd"</span>), [<span class="string">'a'</span>, <span class="number">3</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestRepetition</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return ["", 0];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"Longest repetition"</span>, ()=&gt;&#123;</span><br><span class="line">  Test.it(<span class="string">"Example tests"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"aaaabb"</span>),      [<span class="string">"a"</span>,<span class="number">4</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"bbbaaabaaaa"</span>), [<span class="string">"a"</span>,<span class="number">4</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"cbdeuuu900"</span>),  [<span class="string">"u"</span>,<span class="number">3</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"abbbbb"</span>),      [<span class="string">"b"</span>,<span class="number">5</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"aabb"</span>),        [<span class="string">"a"</span>,<span class="number">2</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">""</span>),            [<span class="string">""</span>,<span class="number">0</span>] );</span><br><span class="line">    Test.assertDeepEquals( longestRepetition(<span class="string">"ba"</span>),          [<span class="string">"b"</span>,<span class="number">1</span>] );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 與 <a href="https://ithelp.ithome.com.tw/articles/10238433" target="_blank" rel="noopener">見習村02 - Unique In Order</a> 有點類似，都可以先將輸入的值分群<br>想法(2): 分群後的陣列，可以再來排序由大到小<br>想法(3): 排序完成後再來判斷如果傳進來的值是空的要另外回傳 <code>[&quot;&quot;, 0]</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200921/20120826gqBHgls5v7.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200921/20120826gqBHgls5v7.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/cB10K2ugb-4" target="_blank" rel="noopener">Unsplash Dayne Topkin</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/chunk" target="_blank" rel="noopener">Ruby - apidock Chunk</a></li><li><a href="https://apidock.com/ruby/String/gsub" target="_blank" rel="noopener">Ruby - apidock gsub</a></li><li><a href="https://apidock.com/ruby/Enumerable/max_by" target="_blank" rel="noopener">Ruby - apidock max_by</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while" target="_blank" rel="noopener">JS - MDN while</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_repetition</span> <span class="title">chars</span></span></span><br><span class="line">  char = chars.gsub(<span class="regexp">/(.)\1*/</span>).max_by(&amp;<span class="symbol">:size</span>)</span><br><span class="line">  <span class="keyword">if</span> char.<span class="literal">nil</span>? </span><br><span class="line">    [<span class="string">''</span>, <span class="number">0</span>] </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    [char.split(<span class="string">''</span>).first, char.split(<span class="string">''</span>).count]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_repetition</span> <span class="title">chars</span></span></span><br><span class="line">  char = chars.gsub(<span class="regexp">/(.)\1*/</span>).max_by(&amp;<span class="symbol">:size</span>)</span><br><span class="line">  char.<span class="literal">nil</span>? ? [<span class="string">''</span>, <span class="number">0</span>] : [char.split(<span class="string">''</span>).first, char.split(<span class="string">''</span>).count]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_repetition</span> <span class="title">chars</span></span></span><br><span class="line">  <span class="keyword">return</span> [<span class="string">''</span>, <span class="number">0</span>] <span class="keyword">if</span> chars.empty?</span><br><span class="line">  </span><br><span class="line">  char = chars.gsub(<span class="regexp">/(.)\1*/</span>).max_by(&amp;<span class="symbol">:size</span>).split(<span class="string">''</span>)</span><br><span class="line">  [char.first, char.count]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_repetition</span> <span class="title">chars</span></span></span><br><span class="line">  <span class="keyword">return</span> [<span class="string">""</span>, <span class="number">0</span>] <span class="keyword">if</span> chars.empty?</span><br><span class="line">  </span><br><span class="line">  chars.chars.chunk(&amp;<span class="symbol">:itself</span>)</span><br><span class="line">             .map&#123; <span class="params">|char, chars|</span> [char, chars.size] &#125;</span><br><span class="line">             .max_by &#123; <span class="params">|char, size|</span> size &#125;     </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestRepetition</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> string = s.split(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> result = [<span class="string">""</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> repetitions = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(string[i] == string[i+repetitions])&#123;</span><br><span class="line">      repetitions++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(repetitions &gt; result[<span class="number">1</span>])&#123;</span><br><span class="line">      result = [string[i],repetitions]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;06-Character-with-longest-consecutive-repetition&quot;&gt;&lt;a href=&quot;#06-Character-with-longest-consecutive-repetition&quot; class=&quot;headerlink&quot; title=&quot;06 - Character with longest consecutive repetition&quot;&gt;&lt;/a&gt;06 - Character with longest consecutive repetition&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;For a given string s find the character c (or C) with longest consecutive repetition and return:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[c, l]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;where l (or L) is the length of the repetition. If there are two or more characters with the same l return the first in order of appearance.&lt;/p&gt;
&lt;p&gt;For empty string return:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村05 - The Hashtag Generator</title>
    <link href="http://chestertang.site/2020/09/20/codewars05/"/>
    <id>http://chestertang.site/2020/09/20/codewars05/</id>
    <published>2020-09-20T01:00:00.000Z</published>
    <updated>2020-09-20T09:31:36.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="05-The-Hashtag-Generator"><a href="#05-The-Hashtag-Generator" class="headerlink" title="05 - The Hashtag Generator"></a>05 - The Hashtag Generator</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>The marketing team is spending way too much time typing in hashtags.<br>Let’s help them with our own Hashtag Generator!</p><p>Here’s the deal:</p><p>It must start with a hashtag (<code>#</code>).<br>All words must have their first letter capitalized.<br>If the final result is longer than 140 chars it must return <code>false</code>.<br>If the input or the result is an empty string it must return <code>false</code>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" Hello there thanks for trying my Kata"</span>  =&gt;  <span class="string">"#HelloThereThanksForTryingMyKata"</span></span><br><span class="line"><span class="string">"    Hello     World   "</span>                  =&gt;  <span class="string">"#HelloWorld"</span></span><br><span class="line"><span class="string">""</span>                                        =&gt;  <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateHashtag</span><span class="params">(str)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(generateHashtag(<span class="string">""</span>), <span class="literal">false</span>, <span class="string">"Expected an empty string to return false"</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">" "</span> * <span class="number">200</span>), <span class="literal">false</span>, <span class="string">"Still an empty string"</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"Do We have A Hashtag"</span>), <span class="string">"#DoWeHaveAHashtag"</span>, <span class="string">"Expected a Hashtag (#) at the beginning."</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"Codewars"</span>), <span class="string">"#Codewars"</span>, <span class="string">"Should handle a single word."</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"Codewars Is Nice"</span>), <span class="string">"#CodewarsIsNice"</span>, <span class="string">"Should remove spaces."</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"Codewars is nice"</span>), <span class="string">"#CodewarsIsNice"</span>, <span class="string">"Should capitalize first letters of words."</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"code"</span> + <span class="string">" "</span> * <span class="number">140</span> + <span class="string">"wars"</span>), <span class="string">"#CodeWars"</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Cat"</span>), <span class="literal">false</span>, <span class="string">"Should return false if the final word is longer than 140 chars."</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"a"</span> * <span class="number">139</span>), <span class="string">"#A"</span> + <span class="string">"a"</span> * <span class="number">138</span>, <span class="string">"Should work"</span>)</span><br><span class="line">Test.assert_equals(generateHashtag(<span class="string">"a"</span> * <span class="number">140</span>), <span class="literal">false</span>, <span class="string">"Too long"</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateHashtag</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Code here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(generateHashtag(<span class="string">""</span>), <span class="literal">false</span>, <span class="string">"Expected an empty string to return false"</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">" "</span>.repeat(<span class="number">200</span>)), <span class="literal">false</span>, <span class="string">"Still an empty string"</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"Do We have A Hashtag"</span>), <span class="string">"#DoWeHaveAHashtag"</span>, <span class="string">"Expected a Hashtag (#) at the beginning."</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"Codewars"</span>), <span class="string">"#Codewars"</span>, <span class="string">"Should handle a single word."</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"Codewars Is Nice"</span>), <span class="string">"#CodewarsIsNice"</span>, <span class="string">"Should remove spaces."</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"Codewars is nice"</span>), <span class="string">"#CodewarsIsNice"</span>, <span class="string">"Should capitalize first letters of words."</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"code"</span> + <span class="string">" "</span>.repeat(<span class="number">140</span>) + <span class="string">"wars"</span>), <span class="string">"#CodeWars"</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Cat"</span>), <span class="literal">false</span>, <span class="string">"Should return false if the final word is longer than 140 chars."</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"a"</span>.repeat(<span class="number">139</span>)), <span class="string">"#A"</span> + <span class="string">"a"</span>.repeat(<span class="number">138</span>), <span class="string">"Should work"</span>)</span><br><span class="line">Test.assertEquals(generateHashtag(<span class="string">"a"</span>.repeat(<span class="number">140</span>)), <span class="literal">false</span>, <span class="string">"Too long"</span>)</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 須先思考如何處理傳進來的值為空白的狀況，會影響應該判斷長度為 140 || 139<br>想法(2): 將值切開分群然後轉為大寫再組回來，並且再加上 #hashtag</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200920/20120826uApzNhLLnM.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200920/20120826uApzNhLLnM.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/kRNZiGKtz48" target="_blank" rel="noopener">Unsplash NordWood Themes</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li><p>Ruby </p><ul><li><a href="https://apidock.com/ruby/String/capitalize" target="_blank" rel="noopener">Ruby - API dock capitalize</a></li><li><a href="https://apidock.com/ruby/String/prepend" target="_blank" rel="noopener">Ruby - API dock prepend</a></li><li><a href="https://apidock.com/ruby/String/strip" target="_blank" rel="noopener">Ruby - API dock strip</a></li></ul></li><li><p>JavaScript</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener">JS - MDN String.prototype.charAt</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noopener">JS - MDN String.prototype.toUpperCase</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">JS - MDN Array.prototype.slice</a></li></ul></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateHashtag</span><span class="params">(str)</span></span></span><br><span class="line">  string = str.split.map(&amp;<span class="symbol">:capitalize</span>).join</span><br><span class="line">  <span class="keyword">if</span> (string.empty? <span class="params">||</span> string.length &gt; <span class="number">139</span>)</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="string">"#<span class="subst">#&#123;string&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateHashtag</span><span class="params">(str)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> str.strip.empty?</span><br><span class="line">  str = str.split(<span class="string">" "</span>).map(&amp;<span class="symbol">:capitalize</span>).join.prepend(<span class="string">"#"</span>)</span><br><span class="line">  str.length &gt; <span class="number">140</span> ? <span class="literal">false</span> : str</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateHashtag</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> wordArray = str.split(<span class="string">' '</span>).filter(<span class="function"><span class="params">char</span> =&gt;</span> char !== <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">"#"</span>;</span><br><span class="line">  </span><br><span class="line">  result = result + wordArray.map(<span class="function"><span class="params">word</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> capitalizedWord = word.charAt(<span class="number">0</span>).toUpperCase() + word.slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> capitalizedWord;</span><br><span class="line">  &#125;).join(<span class="string">''</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> wordArray.length === <span class="number">0</span> || result.length &gt; <span class="number">140</span> ? <span class="literal">false</span> : result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;05-The-Hashtag-Generator&quot;&gt;&lt;a href=&quot;#05-The-Hashtag-Generator&quot; class=&quot;headerlink&quot; title=&quot;05 - The Hashtag Generator&quot;&gt;&lt;/a&gt;05 - The Hashtag Generator&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;The marketing team is spending way too much time typing in hashtags.&lt;br&gt;Let’s help them with our own Hashtag Generator!&lt;/p&gt;
&lt;p&gt;Here’s the deal:&lt;/p&gt;
&lt;p&gt;It must start with a hashtag (&lt;code&gt;#&lt;/code&gt;).&lt;br&gt;All words must have their first letter capitalized.&lt;br&gt;If the final result is longer than 140 chars it must return &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;If the input or the result is an empty string it must return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; Hello there thanks for trying my Kata&quot;&lt;/span&gt;  =&amp;gt;  &lt;span class=&quot;string&quot;&gt;&quot;#HelloThereThanksForTryingMyKata&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;    Hello     World   &quot;&lt;/span&gt;                  =&amp;gt;  &lt;span class=&quot;string&quot;&gt;&quot;#HelloWorld&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;                                        =&amp;gt;  &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村04 - Bit Counting</title>
    <link href="http://chestertang.site/2020/09/19/codewars04/"/>
    <id>http://chestertang.site/2020/09/19/codewars04/</id>
    <published>2020-09-19T01:00:00.000Z</published>
    <updated>2020-09-19T10:55:00.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-Bit-Counting"><a href="#04-Bit-Counting" class="headerlink" title="04 - Bit Counting"></a>04 - Bit Counting</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.</p><p>Example: The binary representation of <code>1234</code> is <code>10011010010</code>, so the function should return <code>5</code> in this case</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment"># Program Me</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals count_bits(<span class="number">0</span>), <span class="number">0</span></span><br><span class="line">Test.assert_equals count_bits(<span class="number">4</span>), <span class="number">1</span></span><br><span class="line">Test.assert_equals count_bits(<span class="number">7</span>), <span class="number">3</span></span><br><span class="line">Test.assert_equals count_bits(<span class="number">9</span>), <span class="number">2</span></span><br><span class="line">Test.assert_equals count_bits(<span class="number">10</span>), <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Program Me</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.assertEquals(countBits(<span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">Test.assertEquals(countBits(<span class="number">4</span>), <span class="number">1</span>);</span><br><span class="line">Test.assertEquals(countBits(<span class="number">7</span>), <span class="number">3</span>);</span><br><span class="line">Test.assertEquals(countBits(<span class="number">9</span>), <span class="number">2</span>);</span><br><span class="line">Test.assertEquals(countBits(<span class="number">10</span>), <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): A system of numerical notation that has 2 rather than 10 as a base.<br>想法(2): 將傳入的數字轉為 binary，再將其切開分群，然後進行加總</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200919/20120826nf6v12ujjB.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200919/20120826nf6v12ujjB.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/oUiTrFhnEkE" target="_blank" rel="noopener">Unsplash Ben White</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://ruby-doc.org/core-2.4.0/Integer.html#method-i-to_s" target="_blank" rel="noopener">Ruby - to_s(base=10) → string</a></li></ul></li><li>JavaScript<ul><li><a href="Object.prototype.toString">JS - MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">JS - MDN parseInt()</a></li></ul></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).count(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map&#123; <span class="params">|x|</span> x.to_i &#125;.reduce&#123; <span class="params">|sum, x|</span> x += sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_bits</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s(<span class="number">2</span>).chars.map(&amp;<span class="symbol">:to_i</span>).inject(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> to_binary = n.toString(<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; to_binary.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">parseInt</span>(to_binary.split(<span class="string">''</span>)[i]) === <span class="number">1</span>) &#123;</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n.toString(<span class="number">2</span>).split(<span class="string">'0'</span>).join(<span class="string">''</span>).length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;04-Bit-Counting&quot;&gt;&lt;a href=&quot;#04-Bit-Counting&quot; class=&quot;headerlink&quot; title=&quot;04 - Bit Counting&quot;&gt;&lt;/a&gt;04 - Bit Counting&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.&lt;/p&gt;
&lt;p&gt;Example: The binary representation of &lt;code&gt;1234&lt;/code&gt; is &lt;code&gt;10011010010&lt;/code&gt;, so the function should return &lt;code&gt;5&lt;/code&gt; in this case&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;count_bits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Program Me&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals count_bits(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals count_bits(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals count_bits(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals count_bits(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Test.assert_equals count_bits(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村03 - Highest Scoring Word</title>
    <link href="http://chestertang.site/2020/09/18/codewars03/"/>
    <id>http://chestertang.site/2020/09/18/codewars03/</id>
    <published>2020-09-18T01:00:00.000Z</published>
    <updated>2020-09-18T01:27:28.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-Highest-Scoring-Word"><a href="#03-Highest-Scoring-Word" class="headerlink" title="03 - Highest Scoring Word"></a>03 - Highest Scoring Word</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Given a string of words, you need to find the highest scoring word.</p><p>Each letter of a word scores points according to its position in the alphabet: <code>a = 1, b = 2, c = 3</code> etc.</p><p>You need to return the highest scoring word as a string.</p><p>If two words score the same, return the word that appears earliest in the original string.</p><p>All letters will be lowercase and all inputs will be valid.</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="comment"># Code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"Basic Tests"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"should pass basic tests"</span> <span class="keyword">do</span></span><br><span class="line">    Test.assert_equals(high(<span class="string">'man i need a taxi up to ubud'</span>), <span class="string">'taxi'</span>)</span><br><span class="line">    Test.assert_equals(high(<span class="string">'what time are we climbing up the volcano'</span>), <span class="string">'volcano'</span>)</span><br><span class="line">    Test.assert_equals(high(<span class="string">'take me to semynak'</span>), <span class="string">'semynak'</span>)</span><br><span class="line">    Test.assert_equals(high(<span class="string">'aaa b'</span>), <span class="string">'aaa'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test.describe(<span class="string">"Example tests"</span>,_=&gt;&#123;</span><br><span class="line">Test.assertEquals(high(<span class="string">'man i need a taxi up to ubud'</span>), <span class="string">'taxi'</span>);</span><br><span class="line">Test.assertEquals(high(<span class="string">'what time are we climbing up the volcano'</span>), <span class="string">'volcano'</span>); </span><br><span class="line">Test.assertEquals(high(<span class="string">'take me to semynak'</span>), <span class="string">'semynak'</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 輸入的英文句子，可以先將每個字切開分群<br>想法(2): 再將每個群計算 <code>ord</code> 然後計算該群單詞 ord 總和</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200918/2012082665vk5r7ygL.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200918/2012082665vk5r7ygL.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/02z1I7gv4ao" target="_blank" rel="noopener">Unsplash Matt Ragland</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/rails/String/ord" target="_blank" rel="noopener">Ruby - apidock Ord</a></li><li><a href="https://apidock.com/ruby/Enumerable/max_by" target="_blank" rel="noopener">Ruby - apidock Max_by</a></li></ul></li><li>JavaScript<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noopener">JS - MDN String.prototype.charCodeAt</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">JS - MDN Array.prototype.indexOf</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/max" target="_blank" rel="noopener">JS - MDN Math.max</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(x)</span></span></span><br><span class="line">  x.split.max_by&#123; <span class="params">|x|</span> x.chars.map&#123; <span class="params">|c|</span> c.ord - <span class="number">96</span>&#125;.sum &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = x.split(<span class="string">' '</span>).map( </span><br><span class="line">    (s) =&gt; [...s].reduce(</span><br><span class="line">      (sum, s) =&gt; sum + s.charCodeAt() - <span class="number">96</span>, <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> x.split(<span class="string">' '</span>)[max.indexOf(<span class="built_in">Math</span>.max(...max))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;03-Highest-Scoring-Word&quot;&gt;&lt;a href=&quot;#03-Highest-Scoring-Word&quot; class=&quot;headerlink&quot; title=&quot;03 - Highest Scoring Word&quot;&gt;&lt;/a&gt;03 - Highest Scoring Word&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Given a string of words, you need to find the highest scoring word.&lt;/p&gt;
&lt;p&gt;Each letter of a word scores points according to its position in the alphabet: &lt;code&gt;a = 1, b = 2, c = 3&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;You need to return the highest scoring word as a string.&lt;/p&gt;
&lt;p&gt;If two words score the same, return the word that appears earliest in the original string.&lt;/p&gt;
&lt;p&gt;All letters will be lowercase and all inputs will be valid.&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村02 - Unique In Order</title>
    <link href="http://chestertang.site/2020/09/17/codewars02/"/>
    <id>http://chestertang.site/2020/09/17/codewars02/</id>
    <published>2020-09-17T01:00:00.000Z</published>
    <updated>2020-09-17T03:18:46.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-Unique-In-Order"><a href="#02-Unique-In-Order" class="headerlink" title="02 - Unique In Order"></a>02 - Unique In Order</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.</p><p>For example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniqueInOrder(<span class="string">'AAAABBBCCDAABBB'</span>) == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line">uniqueInOrder(<span class="string">'ABBCcAD'</span>)         == [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'c'</span>, <span class="string">'A'</span>, <span class="string">'D'</span>]</span><br><span class="line">uniqueInOrder([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])       == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  <span class="comment"># put your solution here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.assert_equals(unique_in_order(<span class="string">'AAAABBBCCDAABBB'</span>), [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// your code here - remember iterable can be a string or an array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.assertSimilar(uniqueInOrder(<span class="string">'AAAABBBCCDAABBB'</span>), [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br></pre></td></tr></table></figure><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 從舉例可以看出會傳入的 <code>iterable</code> 的型態會是陣列、字串，所以需先判斷型態，否則後面能接的方法會有不能用的情況<br>想法(2): 分群的概念，如果後面的英文字跟前一個相同的話，只顯示一個<br>想法(3): 可以用空陣列塞值進去、或者是分群 <code>select</code> 取 <code>uniq</code> 的那個值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200917/20120826A5q7a8riTw.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200917/20120826A5q7a8riTw.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/PypjzKTUqLo" target="_blank" rel="noopener">Unsplash Roman Bozhko</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://apidock.com/ruby/Enumerable/chunk" target="_blank" rel="noopener">Ruby - apidock Chunk</a></li><li><a href="https://apidock.com/ruby/String/squeeze" target="_blank" rel="noopener">Ruby - apidock Squeeze</a></li></ul></li><li>JavaScript<ul><li><a href="https://www.samanthaming.com/tidbits/83-4-ways-to-convert-string-to-character-array/" target="_blank" rel="noopener">JS - 4 Ways to Convert String to Character Array in JavaScript</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">JS - MDN Array.prototype.push</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  (iterable.is_a?(String) ? iterable.split(<span class="string">''</span>) : iterable)</span><br><span class="line">    .chunk&#123; <span class="params">|s|</span> s &#125;</span><br><span class="line">    .map(&amp;<span class="symbol">:first</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  (iterable.is_a?(String) ? iterable.chars : iterable)</span><br><span class="line">    .chunk &#123; <span class="params">|s|</span> s &#125;</span><br><span class="line">    .map(&amp;<span class="symbol">:first</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  iterable.is_a?(String) ? iterable.squeeze.split(<span class="string">''</span>) : iterable.uniq</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; iterable.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterable[i] != iterable[i+<span class="number">1</span>]) result.push(iterable[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...iterable].filter(<span class="function">(<span class="params">i, index</span>) =&gt;</span> i !== iterable[index<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;02-Unique-In-Order&quot;&gt;&lt;a href=&quot;#02-Unique-In-Order&quot; class=&quot;headerlink&quot; title=&quot;02 - Unique In Order&quot;&gt;&lt;/a&gt;02 - Unique In Order&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uniqueInOrder(&lt;span class=&quot;string&quot;&gt;&#39;AAAABBBCCDAABBB&#39;&lt;/span&gt;) == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniqueInOrder(&lt;span class=&quot;string&quot;&gt;&#39;ABBCcAD&#39;&lt;/span&gt;)         == [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uniqueInOrder([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])       == [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unique_in_order&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iterable)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# put your solution here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>見習村01 - Multiples of 3 or 5</title>
    <link href="http://chestertang.site/2020/09/16/codewars01/"/>
    <id>http://chestertang.site/2020/09/16/codewars01/</id>
    <published>2020-09-16T01:00:00.000Z</published>
    <updated>2020-09-16T01:48:06.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Multiples-of-3-or-5"><a href="#01-Multiples-of-3-or-5" class="headerlink" title="01 - Multiples of 3 or 5"></a>01 - Multiples of 3 or 5</h1><p>Don’t say so much, just coding…</p><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p><p>Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.</p><blockquote><p>Note: If the number is a multiple of both 3 and 5, only count it once. Also, if a number is negative, return 0(for languages that do have them)</p></blockquote><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  <span class="comment"># put your solution here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Testing"><a href="#Sample-Testing" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(actual, expected)</span></span></span><br><span class="line">  Test.assert_equals(actual, expected)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.describe(<span class="string">"example tests"</span>) <span class="keyword">do</span></span><br><span class="line">  test(solution(<span class="number">10</span>), <span class="number">23</span>)</span><br><span class="line">  test(solution(<span class="number">20</span>), <span class="number">78</span>)</span><br><span class="line">  test(solution(<span class="number">200</span>), <span class="number">9168</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// put your solution here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sample-Testing-1"><a href="#Sample-Testing-1" class="headerlink" title="Sample Testing"></a>Sample Testing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n, expected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> actual = solution(n)</span><br><span class="line">  Test.assertEquals(actual, expected, <span class="string">`Expected <span class="subst">$&#123;expected&#125;</span>, got <span class="subst">$&#123;actual&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.describe(<span class="string">"basic tests"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  test(<span class="number">10</span>,<span class="number">23</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h1><p>想法(1): 從題目概述 <code>natural numbers below 10</code> 中開始模擬會出現的數字<br>想法(2): 計算兩者的加總，可以知道在算 3 or 5 的倍數<br>想法(3): 處理級距，需要從 1 ~ <code>參數</code> 然後再來選取符合項目，並加總</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20200916/20120826ve4OpCsRKr.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200916/20120826ve4OpCsRKr.jpg"><br>圖片來源：<a href="https://unsplash.com/photos/wn-KYaHwcis" target="_blank" rel="noopener">Unsplash Jesus Kiteque</a></p><h3 id="Hint-amp-Reference"><a href="#Hint-amp-Reference" class="headerlink" title="Hint &amp; Reference"></a>Hint &amp; Reference</h3><ul><li>Ruby <ul><li><a href="https://stackoverflow.com/questions/5772964/start-a-loop-from-1" target="_blank" rel="noopener">Ruby - Start a loop from 1</a></li><li><a href="https://apidock.com/ruby/Array/select" target="_blank" rel="noopener">Ruby - apidock Select</a></li><li><a href="https://apidock.com/ruby/Enumerable/reduce" target="_blank" rel="noopener">Ruby - apidock Reduce</a></li><li><a href="https://stackoverflow.com/questions/1961030/ruby-ampersand-colon-shortcut" target="_blank" rel="noopener">Ruby - Ruby ampersand colon shortcut</a></li></ul></li><li>JavaScript<ul><li><a href="https://www.samanthaming.com/tidbits/83-4-ways-to-convert-string-to-character-array/" target="_blank" rel="noopener">JS - 4 Ways to Convert String to Character Array in JavaScript</a></li><li><a href="https://www.samanthaming.com/tidbits/78-iterables-to-array-using-spread/" target="_blank" rel="noopener">JS - Convert Iterables to Array using Spread</a></li><li><a href="https://www.samanthaming.com/tidbits/47-arrow-functions-cheatsheet/" target="_blank" rel="noopener">JS - ES6 Arrow Functions Cheatsheet</a></li></ul></li></ul><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  [*<span class="number">1</span>..number-<span class="number">1</span>].select&#123; <span class="params">|n|</span> n % <span class="number">3</span> == <span class="number">0</span> <span class="params">||</span> n % <span class="number">5</span> == <span class="number">0</span>&#125;.reduce(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  [*<span class="number">1</span>...number].select&#123; <span class="params">|n|</span> n % <span class="number">3</span> == <span class="number">0</span> <span class="params">||</span> n % <span class="number">5</span> == <span class="number">0</span>&#125;.reduce(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  (<span class="number">1</span>...number).select&#123; <span class="params">|n|</span> n % <span class="number">3</span> == <span class="number">0</span> <span class="params">||</span> n % <span class="number">5</span> == <span class="number">0</span>&#125;.inject(&amp;<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Solution 4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  (<span class="number">1</span>...number).select&#123; <span class="params">|n|</span> (n % <span class="number">5</span>).zero? <span class="params">||</span> (n % <span class="number">3</span>).zero?&#125;.inject(<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-1"><a href="#Javascript-1" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; number; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>( i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number &lt; <span class="number">3</span> ? <span class="number">0</span></span><br><span class="line">    : [...Array(number).keys()]</span><br><span class="line">      .map(<span class="function"><span class="params">int</span> =&gt;</span> (int % <span class="number">3</span> === <span class="number">0</span> || int % <span class="number">5</span> === <span class="number">0</span>) ? int : <span class="number">0</span> )</span><br><span class="line">      .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01-Multiples-of-3-or-5&quot;&gt;&lt;a href=&quot;#01-Multiples-of-3-or-5&quot; class=&quot;headerlink&quot; title=&quot;01 - Multiples of 3 or 5&quot;&gt;&lt;/a&gt;01 - Multiples of 3 or 5&lt;/h1&gt;&lt;p&gt;Don’t say so much, just coding…&lt;/p&gt;
&lt;h2 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;Instruction&lt;/h2&gt;&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;
&lt;p&gt;Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If the number is a multiple of both 3 and 5, only count it once. Also, if a number is negative, return 0(for languages that do have them)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a href=&quot;#Ruby&quot; class=&quot;headerlink&quot; title=&quot;Ruby&quot;&gt;&lt;/a&gt;Ruby&lt;/h3&gt;&lt;h4 id=&quot;Init&quot;&gt;&lt;a href=&quot;#Init&quot; class=&quot;headerlink&quot; title=&quot;Init&quot;&gt;&lt;/a&gt;Init&lt;/h4&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(number)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# put your solution here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Sample-Testing&quot;&gt;&lt;a href=&quot;#Sample-Testing&quot; class=&quot;headerlink&quot; title=&quot;Sample Testing&quot;&gt;&lt;/a&gt;Sample Testing&lt;/h4&gt;
    
    </summary>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/categories/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="http://chestertang.site/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
      <category term="刷題見習村" scheme="http://chestertang.site/tags/%E5%88%B7%E9%A1%8C%E8%A6%8B%E7%BF%92%E6%9D%91/"/>
    
      <category term="CodeWars" scheme="http://chestertang.site/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Spread with Array</title>
    <link href="http://chestertang.site/2020/07/20/zyx0720/"/>
    <id>http://chestertang.site/2020/07/20/zyx0720/</id>
    <published>2020-07-20T02:00:00.000Z</published>
    <updated>2020-09-15T06:07:26.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Use-Case-of-Spread-with-Array"><a href="#5-Use-Case-of-Spread-with-Array" class="headerlink" title="5 Use Case of Spread with Array"></a>5 Use Case of Spread with Array</h1><p>這篇將介紹，常用的 <code>Spread</code> 在陣列中的五種情況，可以拿來複製、合併或者是作轉換為陣列。首先，當然要先來了解 ES6 的 <code>...</code> Spread 代表是什麼？還有它的特性。</p><h2 id="Understanding-Spread"><a href="#Understanding-Spread" class="headerlink" title="Understanding Spread"></a>Understanding Spread</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum.apply(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure><blockquote><p>MDN: Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><h2 id="Spread-Destructuring-assignment"><a href="#Spread-Destructuring-assignment" class="headerlink" title="Spread = Destructuring assignment?"></a>Spread = Destructuring assignment?</h2><p>什麼意思呢？其實，除了解構賦值之外，舉個例子像是， Spread 會把現在 Array 拿掉，然後再把裡面包住的東西放到另一個 Array 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  ...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// ... &gt; []</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  拿掉包住 [1, 2, 3] 的 Array */</span></span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Array-Manipulation"><a href="#Array-Manipulation" class="headerlink" title="Array Manipulation"></a>Array Manipulation</h2><ol><li>Use Spread for Merging Array</li></ol><p>如果有兩個陣列需要把他合成一個，或許之前會是這樣子做，但會有一點瑕疵…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = [array1, array2];</span><br><span class="line"><span class="comment">// [ [1, 2, 3], [4, 5, 6] ]</span></span><br></pre></td></tr></table></figure><p>用 <code>Spread</code> 來做的話</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spread_merge = [</span><br><span class="line">  ...array1,</span><br><span class="line">  ...array2</span><br><span class="line">];</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Clone Array</li></ol><p>這部分在之前的系列筆記中其實已經大致上都有說到過，如果還沒有看過的可以去看一下 <a href="https://chestertang.site/2020/04/18/zyx0418/">Clone an Array</a>。另外，還有這一篇就在更複雜一些 <a href="https://chestertang.site/2020/04/29/zyx0429/">Deep Clone Array</a></p><p>其中的觀念在，會不會影響到原本被複製的陣列，什麼時候是 Pass by reference、什麼時候是 Pass by value 而什麼情況下又會出現 JS 獨有的 Pass by sharing 呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'zero'</span>, <span class="string">'one'</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = original;</span><br><span class="line"></span><br><span class="line">original; <span class="comment">// ['zero', 'one']</span></span><br><span class="line">newArray; <span class="comment">// ['zero', 'one']</span></span><br></pre></td></tr></table></figure><p>看起來沒什麼問題，但如果只要改新陣列裡面的元素時，原本的陣列也會被更動了…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newArray[<span class="number">1</span>] = <span class="string">'💩'</span>;</span><br><span class="line"></span><br><span class="line">newArray;</span><br><span class="line"><span class="comment">// ['zero', '💩']</span></span><br><span class="line"></span><br><span class="line">original;</span><br><span class="line"><span class="comment">// ['zero', '💩']...</span></span><br></pre></td></tr></table></figure><h3 id="Cloning-Array-the-Right-Way"><a href="#Cloning-Array-the-Right-Way" class="headerlink" title="Cloning Array the Right Way"></a>Cloning Array the Right Way</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'zero'</span>, <span class="string">'one'</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [...original];</span><br><span class="line"></span><br><span class="line">newArray[<span class="number">1</span>] = <span class="string">'💩'</span>;</span><br><span class="line"></span><br><span class="line">newArray;</span><br><span class="line"><span class="comment">// ['zero', '💩']</span></span><br><span class="line">original;</span><br><span class="line"><span class="comment">// ['zero', 'one']</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Iterables to Array</li></ol><p>字串的部分就很好理解，也沒有什麼其他多變的情況…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">'hi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...string];</span><br><span class="line"></span><br><span class="line">array;</span><br><span class="line"><span class="comment">// [ 'h' , 'i' ]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Set to Array</li></ol><p>The Set object lets you store unique values of any type, whether primitive values or object references.</p><blockquote><p>Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set’s collection.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>;</span><br><span class="line">// Set(3) &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...set];</span><br><span class="line"></span><br><span class="line">array;</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Node List to Array</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"></span><br><span class="line">nodeList;</span><br><span class="line"><span class="comment">// [p, p, p]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...nodeList];</span><br><span class="line"></span><br><span class="line">array;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">MDN: Spread syntax (…)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN: Set</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;5-Use-Case-of-Spread-with-Array&quot;&gt;&lt;a href=&quot;#5-Use-Case-of-Spread-with-Array&quot; class=&quot;headerlink&quot; title=&quot;5 Use Case of Spread with Array&quot;&gt;&lt;/a&gt;5 Use Case of Spread with Array&lt;/h1&gt;&lt;p&gt;這篇將介紹，常用的 &lt;code&gt;Spread&lt;/code&gt; 在陣列中的五種情況，可以拿來複製、合併或者是作轉換為陣列。首先，當然要先來了解 ES6 的 &lt;code&gt;...&lt;/code&gt; Spread 代表是什麼？還有它的特性。&lt;/p&gt;
&lt;h2 id=&quot;Understanding-Spread&quot;&gt;&lt;a href=&quot;#Understanding-Spread&quot; class=&quot;headerlink&quot; title=&quot;Understanding Spread&quot;&gt;&lt;/a&gt;Understanding Spread&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y, z&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum(...numbers));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum.apply(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, numbers));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;MDN: Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Spread-Destructuring-assignment&quot;&gt;&lt;a href=&quot;#Spread-Destructuring-assignment&quot; class=&quot;headerlink&quot; title=&quot;Spread = Destructuring assignment?&quot;&gt;&lt;/a&gt;Spread = Destructuring assignment?&lt;/h2&gt;&lt;p&gt;什麼意思呢？其實，除了解構賦值之外，舉個例子像是， Spread 會把現在 Array 拿掉，然後再把裡面包住的東西放到另一個 Array 中。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// ... &amp;gt; []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*  拿掉包住 [1, 2, 3] 的 Array */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Array-Manipulation&quot;&gt;&lt;a href=&quot;#Array-Manipulation&quot; class=&quot;headerlink&quot; title=&quot;Array Manipulation&quot;&gt;&lt;/a&gt;Array Manipulation&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Use Spread for Merging Array&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Async/Await in Array</title>
    <link href="http://chestertang.site/2020/05/22/zyx0522/"/>
    <id>http://chestertang.site/2020/05/22/zyx0522/</id>
    <published>2020-05-22T04:00:00.000Z</published>
    <updated>2020-06-09T09:45:01.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-Await-in-Array-Loops"><a href="#Async-Await-in-Array-Loops" class="headerlink" title="Async/Await in Array Loops"></a>Async/Await in Array Loops</h1><p>隨著 <code>ES6</code> 的 <code>Promise</code> 解決 callbacks hell 的問題後，取得代之的就是 <code>Es7</code> 的 <code>Async/Await</code>，都是為了達成 AJAX 獲得更好的體驗。這篇簡單紀錄一下使用 <code>Async/Await</code> 在迴圈裡面遇到的問題，以及該如何解決，以下就以三個例子來舉例：</p><h2 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h2><p>如果是 <code>ForEach</code> 搭配 <code>Async/Await</code> 的時候，會發生什麼事情呢？我們直接來深入了解吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> urls.forEach(<span class="keyword">async</span> (url, idx) =&gt; &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url));</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><p>雖然程式碼都沒有任何錯誤，也不會噴錯跑不成功，但是相信眼尖的你一定會注意 <code>Finished!</code> 居然在 <code>await urls.forEach</code> 之前就執行了！不是說好的 <code>async</code> 要 <code>await</code> 嗎？誰跟你說好～如以下的結果所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"></span><br><span class="line">Finished!</span><br><span class="line">Received Todo <span class="number">1</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/1"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">3</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/3"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">2</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/2"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br></pre></td></tr></table></figure><p>那不能用 <code>ForEach</code> 我們該如何解決呢？來看看底下的兩種方式吧！</p><h2 id="Map-Promise-all"><a href="#Map-Promise-all" class="headerlink" title="Map + Promise.all"></a>Map + Promise.all</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></h3><blockquote><p>Promise.all() 方法回傳一個 Promise 物件，當引數 iterable 中所有的 promises 都被實現（resolved），或引數 iterable 不含任何 promise 時，被實現。或以第一個被拒絕的 promise 的原因被拒絕。</p></blockquote><ul><li>一個已被實現（already resolved）的 <code>Promise</code>，若傳入的 iterable 為空。</li><li>一個非同步地被實現（asynchronously resolved）的 Promise 若傳入的 iterable 不含 promise。注意，Google Chrome 58 對此情形回傳一個已被解決的 promise。</li><li>一個擱置（pending）的 Promise，對所有剩餘情形。此 promise 接著被非同步地被 resolved/rejected（只要堆疊為空）當 iterable 中所有的 promises 都被實現，或其中一個被拒絕。參見下方關於”Promise.all 的非同步與同步性質”的例子。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promises = urls.map(<span class="keyword">async</span> (url, idx) =&gt; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><h2 id="For…of"><a href="#For…of" class="headerlink" title="For…of"></a>For…of</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>,</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTodos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [idx, url] <span class="keyword">of</span> urls.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received Todo <span class="subst">$&#123;idx+<span class="number">1</span>&#125;</span>:`</span>, <span class="keyword">await</span> fetch(url));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Finished!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTodos();</span><br></pre></td></tr></table></figure><p>上面兩種方法都可以得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Received Todo <span class="number">1</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/1"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">2</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/2"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Received Todo <span class="number">3</span>, <span class="attr">Response</span>: &#123; <span class="attr">type</span>: <span class="string">"cors"</span>, <span class="attr">url</span>: <span class="string">"https://jsonplaceholder.typicode.com/todos/3"</span>, <span class="attr">redirected</span>: <span class="literal">false</span>, <span class="attr">status</span>: <span class="number">200</span>, <span class="attr">ok</span>: <span class="literal">true</span>, … &#125;</span><br><span class="line">Finished!</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async function</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">await</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">Array.prototype.forEach()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Async-Await-in-Array-Loops&quot;&gt;&lt;a href=&quot;#Async-Await-in-Array-Loops&quot; class=&quot;headerlink&quot; title=&quot;Async/Await in Array Loops&quot;&gt;&lt;/a&gt;Async/Await in Array Loops&lt;/h1&gt;&lt;p&gt;隨著 &lt;code&gt;ES6&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 解決 callbacks hell 的問題後，取得代之的就是 &lt;code&gt;Es7&lt;/code&gt; 的 &lt;code&gt;Async/Await&lt;/code&gt;，都是為了達成 AJAX 獲得更好的體驗。這篇簡單紀錄一下使用 &lt;code&gt;Async/Await&lt;/code&gt; 在迴圈裡面遇到的問題，以及該如何解決，以下就以三個例子來舉例：&lt;/p&gt;
&lt;h2 id=&quot;ForEach&quot;&gt;&lt;a href=&quot;#ForEach&quot; class=&quot;headerlink&quot; title=&quot;ForEach&quot;&gt;&lt;/a&gt;ForEach&lt;/h2&gt;&lt;p&gt;如果是 &lt;code&gt;ForEach&lt;/code&gt; 搭配 &lt;code&gt;Async/Await&lt;/code&gt; 的時候，會發生什麼事情呢？我們直接來深入了解吧！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; urls = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/todos/3&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTodos&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; urls.forEach(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (url, idx) =&amp;gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Received Todo &lt;span class=&quot;subst&quot;&gt;$&amp;#123;idx+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;:`&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; fetch(url));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Finished!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getTodos();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;雖然程式碼都沒有任何錯誤，也不會噴錯跑不成功，但是相信眼尖的你一定會注意 &lt;code&gt;Finished!&lt;/code&gt; 居然在 &lt;code&gt;await urls.forEach&lt;/code&gt; 之前就執行了！不是說好的 &lt;code&gt;async&lt;/code&gt; 要 &lt;code&gt;await&lt;/code&gt; 嗎？誰跟你說好～如以下的結果所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Promise &amp;#123;&amp;lt;resolved&amp;gt;: undefined&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/1&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/3&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Received Todo &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;Response&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cors&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://jsonplaceholder.typicode.com/todos/2&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;redirected&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;ok&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那不能用 &lt;code&gt;ForEach&lt;/code&gt; 我們該如何解決呢？來看看底下的兩種方式吧！&lt;/p&gt;
&lt;h2 id=&quot;Map-Promise-all&quot;&gt;&lt;a href=&quot;#Map-Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Map + Promise.all&quot;&gt;&lt;/a&gt;Map + Promise.all&lt;/h2&gt;&lt;h3 id=&quot;Promise-all&quot;&gt;&lt;a href=&quot;#Promise-all&quot; class=&quot;headerlink&quot; title=&quot;Promise.all()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Promise.all()&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Clone an Object</title>
    <link href="http://chestertang.site/2020/05/05/zyx0505/"/>
    <id>http://chestertang.site/2020/05/05/zyx0505/</id>
    <published>2020-05-05T03:00:00.000Z</published>
    <updated>2020-06-29T14:33:14.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Clone-an-Object"><a href="#J-筆記-Clone-an-Object" class="headerlink" title="J 筆記 - Clone an Object"></a>J 筆記 - Clone an Object</h1><p>雖然在 JavaScript 裡的物件型別是屬於 Passing by sharing，但正常來說如果沒有傳遞到另一物件的話，正常為 Passing by Address，因此沒有辦法直接用等號 <code>=</code> 來更改值、而會改到址。</p><h2 id="3-Ways-to-Clone-Objects"><a href="#3-Ways-to-Clone-Objects" class="headerlink" title="3 Ways to Clone Objects"></a>3 Ways to Clone Objects</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "Spread"</span></span><br><span class="line">&#123; ...Array &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "Object.assign"</span></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">Array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "JSON"</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6'&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="Passing-by-Address"><a href="#Passing-by-Address" class="headerlink" title="Passing by Address"></a>Passing by Address</h2><p>還記得 <a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a> 吧？基本型別的更新與傳遞會以 <code>Passing by Value</code>，兩者是個是各自獨立的，而物件型別則是如同開頭所述，會更改到原本的實體，因為兩者根本是指向同一個實體的！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coin1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> coin2 = coin1;</span><br><span class="line"></span><br><span class="line">coin1.value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( coin1.value );</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log( coin2.value );</span><br><span class="line"><span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h2 id="Passing-by-sharing"><a href="#Passing-by-sharing" class="headerlink" title="Passing by sharing"></a>Passing by sharing</h2><p>「Pass by sharing」的特點在於，當 function 的參數，如 <code>function changeValue(obj){ ... }</code> 中的 obj 被重新賦值的時候，外部變數的內容是不會被影響的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coin1 = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj = &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;; <span class="comment">// Assignment</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeValue(coin1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(coin1);   </span><br><span class="line"><span class="comment">// &#123; value: 10 &#125;</span></span><br></pre></td></tr></table></figure><p>說了這麼多也知道了原因之後，以下就來介紹三種複製物件的方法。注意的是，Array 的複製也有探討到 <code>深層</code>、<code>淺層</code> 的問題，如同 <a href="https://chestertang.site/2020/04/29/zyx0429/">Deep Clone Array</a> ㄧ樣，JSON 的方式是可以複製到 <code>深層</code> 的，而其他兩種沒有辦法！</p><ol><li>Using Spread</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SpreadCloneArray = &#123; ...Array &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(SpreadCloneArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Using Object.assign</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Object_AssignCloneArray = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">Array</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Object_AssignCloneArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Using JSON</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = &#123; <span class="attr">old</span>: <span class="string">'ES5'</span>, <span class="attr">new</span>: <span class="string">'ES6'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> JSONArray = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(JSONArray);</span><br><span class="line"><span class="comment">// &#123; old: 'ES5', new: 'ES6' &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Lodash 在 deep clone 不只是適用於 Array 也同樣適用於 Object </p></blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()</a></li><li><a href="https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript" target="_blank" rel="noopener">What is the most efficient way to deep clone an object in JavaScript?</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10191057" target="_blank" rel="noopener">重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Clone-an-Object&quot;&gt;&lt;a href=&quot;#J-筆記-Clone-an-Object&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Clone an Object&quot;&gt;&lt;/a&gt;J 筆記 - Clone an Object&lt;/h1&gt;&lt;p&gt;雖然在 JavaScript 裡的物件型別是屬於 Passing by sharing，但正常來說如果沒有傳遞到另一物件的話，正常為 Passing by Address，因此沒有辦法直接用等號 &lt;code&gt;=&lt;/code&gt; 來更改值、而會改到址。&lt;/p&gt;
&lt;h2 id=&quot;3-Ways-to-Clone-Objects&quot;&gt;&lt;a href=&quot;#3-Ways-to-Clone-Objects&quot; class=&quot;headerlink&quot; title=&quot;3 Ways to Clone Objects&quot;&gt;&lt;/a&gt;3 Ways to Clone Objects&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt; = &amp;#123; &lt;span class=&quot;attr&quot;&gt;old&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;new&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Spread&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; ...Array &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Object.assign&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;JSON&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; old: &#39;ES5&#39;, new: &#39;ES6&#39;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Passing-by-Address&quot;&gt;&lt;a href=&quot;#Passing-by-Address&quot; class=&quot;headerlink&quot; title=&quot;Passing by Address&quot;&gt;&lt;/a&gt;Passing by Address&lt;/h2&gt;&lt;p&gt;還記得 &lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10191057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;重新認識 JavaScript: Day 05 JavaScript 是「傳值」或「傳址」？&lt;/a&gt; 吧？基本型別的更新與傳遞會以 &lt;code&gt;Passing by Value&lt;/code&gt;，兩者是個是各自獨立的，而物件型別則是如同開頭所述，會更改到原本的實體，因為兩者根本是指向同一個實體的！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin1 = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin2 = coin1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coin1.value = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( coin1.value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( coin2.value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Passing-by-sharing&quot;&gt;&lt;a href=&quot;#Passing-by-sharing&quot; class=&quot;headerlink&quot; title=&quot;Passing by sharing&quot;&gt;&lt;/a&gt;Passing by sharing&lt;/h2&gt;&lt;p&gt;「Pass by sharing」的特點在於，當 function 的參數，如 &lt;code&gt;function changeValue(obj){ ... }&lt;/code&gt; 中的 obj 被重新賦值的時候，外部變數的內容是不會被影響的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coin1 = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj = &amp;#123; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt; &amp;#125;; &lt;span class=&quot;comment&quot;&gt;// Assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeValue(coin1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(coin1);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; value: 10 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Object to Array</title>
    <link href="http://chestertang.site/2020/05/04/zyx0504/"/>
    <id>http://chestertang.site/2020/05/04/zyx0504/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2020-05-04T09:47:18.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Object-to-Array"><a href="#J-筆記-Object-to-Array" class="headerlink" title="J 筆記 - Object to Array"></a>J 筆記 - Object to Array</h1><p>繼之前的 <a href="https://chestertang.site/2020/04/13/zyx0413/">String to Array</a> 後，我們已經會了許多種將字串轉成陣列的方法。這篇將介紹如何將 Object 轉成 Array …</p><h2 id="Ancient"><a href="#Ancient" class="headerlink" title="Ancient"></a>Ancient</h2><p>在 ES6 以前，我們想將 Object 變成 Array 常常會這樣來使用，但其實這種方法真的不太好用！而且跟 Ruby 超級不合適的，宣告一個空的陣列，然後塞東西進去，通常都可以有更好的方法可以取代掉這種寫法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ancientObjects = &#123;</span><br><span class="line">  obj1: <span class="string">'ancient1'</span>,</span><br><span class="line">  obj2: <span class="string">'ancient2'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptyArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> ancientObject <span class="keyword">in</span> ancientObjects) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ancientObjects.hasOwnProperty(ancientObject)) &#123;</span><br><span class="line">    emptyArray.push(ancientObjects);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emptyArray; </span><br><span class="line"><span class="comment">// [ 'ancient1', 'ancient2' ]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">Object.prototype.hasOwnProperty()</a></p></blockquote><h2 id="ES6-Object-keys"><a href="#ES6-Object-keys" class="headerlink" title="ES6 - Object.keys()"></a>ES6 - Object.keys()</h2><p>ES6後，有了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a> 這個新方法，不過很奇怪的居然只有提供 <code>key</code>，卻沒有 <code>value</code>，意外覺得特別的詭異…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ES6Objects = &#123;</span><br><span class="line">  ES6Obj1: <span class="string">'ES6-1'</span>,</span><br><span class="line">  ES6Obj2: <span class="string">'ES6-2'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(ES6Objects);</span><br><span class="line"><span class="comment">// [ 'ES6Obj1', 'ES6Obj2' ]</span></span><br></pre></td></tr></table></figure><h2 id="ES7-Object-values-Object-entries"><a href="#ES7-Object-values-Object-entries" class="headerlink" title="ES7 - Object.values() / Object.entries()"></a>ES7 - Object.values() / Object.entries()</h2><p>所以 ES7 就生出 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values" target="_blank" rel="noopener">Object.values()</a> 了，不只如此，還連 key + value 同時要印的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries()</a> 都有（這樣才合理阿！！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> ES7Objects = &#123;</span><br><span class="line">    ES7Obj1: <span class="string">'ES7-1'</span>,</span><br><span class="line">    ES7Obj2: <span class="string">'ES7-2'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.values(ES6Objects);</span><br><span class="line">  <span class="comment">// [ 'ES6-1', 'ES6-2' ]</span></span><br><span class="line">  <span class="built_in">Object</span>.entries(ES7Objects);</span><br><span class="line"><span class="comment">// [ ['ES7Obj1', 'ES7-1'], ['ES7Obj2', 'ES7-2'] ]</span></span><br></pre></td></tr></table></figure><h2 id="Object-entries-Destructuring"><a href="#Object-entries-Destructuring" class="headerlink" title="Object.entries + Destructuring"></a>Object.entries + Destructuring</h2><p>解構開來其實就只是長這樣子而已，應該淺顯易懂吧～</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ES7Objects = &#123;</span><br><span class="line">  ES7Obj1: <span class="string">'ES7-1'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectArray = <span class="built_in">Object</span>.entries(ES7Objects);</span><br><span class="line"></span><br><span class="line">objectArray.forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); </span><br><span class="line">  <span class="comment">// 'ES7Obj1'</span></span><br><span class="line">  <span class="built_in">console</span>.log(value); </span><br><span class="line">  <span class="comment">// 'ES7-1'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><p>而本質上與 <code>Object.entries</code> 相反，我們今天想要從 Array 再返回去 Object，就可以使用 <code>Object.fromEntries</code> 這個方法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ES7Array = [</span><br><span class="line">  [<span class="string">'ES7Obj1'</span>, <span class="string">'ES7-1'</span>],</span><br><span class="line">  [<span class="string">'ES7Obj2'</span>, <span class="string">'ES7-2'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.fromEntries(ES7Array);</span><br><span class="line"><span class="comment">// &#123; ES7Obj1: 'ES7-1', ES7Obj2: 'ES7-2' &#125;</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values" target="_blank" rel="noopener">Object.values()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">Object.entries()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries" target="_blank" rel="noopener">Object.fromEntries()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Object-to-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Object-to-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Object to Array&quot;&gt;&lt;/a&gt;J 筆記 - Object to Array&lt;/h1&gt;&lt;p&gt;繼之前的 &lt;a href=&quot;https://chestertang.site/2020/04/13/zyx0413/&quot;&gt;String to Array&lt;/a&gt; 後，我們已經會了許多種將字串轉成陣列的方法。這篇將介紹如何將 Object 轉成 Array …&lt;/p&gt;
&lt;h2 id=&quot;Ancient&quot;&gt;&lt;a href=&quot;#Ancient&quot; class=&quot;headerlink&quot; title=&quot;Ancient&quot;&gt;&lt;/a&gt;Ancient&lt;/h2&gt;&lt;p&gt;在 ES6 以前，我們想將 Object 變成 Array 常常會這樣來使用，但其實這種方法真的不太好用！而且跟 Ruby 超級不合適的，宣告一個空的陣列，然後塞東西進去，通常都可以有更好的方法可以取代掉這種寫法…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ancientObjects = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj1: &lt;span class=&quot;string&quot;&gt;&#39;ancient1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj2: &lt;span class=&quot;string&quot;&gt;&#39;ancient2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; emptyArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ancientObject &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ancientObjects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ancientObjects.hasOwnProperty(ancientObject)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emptyArray.push(ancientObjects);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emptyArray; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &#39;ancient1&#39;, &#39;ancient2&#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Object.prototype.hasOwnProperty()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ES6-Object-keys&quot;&gt;&lt;a href=&quot;#ES6-Object-keys&quot; class=&quot;headerlink&quot; title=&quot;ES6 - Object.keys()&quot;&gt;&lt;/a&gt;ES6 - Object.keys()&lt;/h2&gt;&lt;p&gt;ES6後，有了 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Object.keys()&lt;/a&gt; 這個新方法，不過很奇怪的居然只有提供 &lt;code&gt;key&lt;/code&gt;，卻沒有 &lt;code&gt;value&lt;/code&gt;，意外覺得特別的詭異…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ES6Objects = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ES6Obj1: &lt;span class=&quot;string&quot;&gt;&#39;ES6-1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ES6Obj2: &lt;span class=&quot;string&quot;&gt;&#39;ES6-2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(ES6Objects);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &#39;ES6Obj1&#39;, &#39;ES6Obj2&#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ES7-Object-values-Object-entries&quot;&gt;&lt;a href=&quot;#ES7-Object-values-Object-entries&quot; class=&quot;headerlink&quot; title=&quot;ES7 - Object.values() / Object.entries()&quot;&gt;&lt;/a&gt;ES7 - Object.values() / Object.entries()&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Append Item to Array</title>
    <link href="http://chestertang.site/2020/04/30/zyx0430/"/>
    <id>http://chestertang.site/2020/04/30/zyx0430/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-05-03T14:34:26.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Append-Item-to-Array"><a href="#J-筆記-Append-Item-to-Array" class="headerlink" title="J 筆記 - Append Item to Array"></a>J 筆記 - Append Item to Array</h1><p>在之前一系列有關 <a href="https://chestertang.site/categories/JavaScript/">Array</a> 的文章當中，有看到各種 clone Array 後，將新元素推進陣列會造成的結果，都直接以 <code>push</code> 來簡單舉例而已。</p><p>這篇將舉例 <code>易變的</code> (mutable)、<code>不易變的</code> (inmutable) 的五種方式，雖然實務上都會直接用 <code>inmutable</code> 的方法，但還是舉例 <code>mutable</code>，來增加自己印象，就算看到這樣的程式碼的時候，也會知道會造成的結果… </p><h2 id="易變的-mutable"><a href="#易變的-mutable" class="headerlink" title="易變的 (mutable)"></a><code>易變的</code> (mutable)</h2><p>透過 <code>push</code>、<code>splice</code>、<code>.length</code> 這三種方式的塞元素，會影響原始的陣列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>];</span><br><span class="line"></span><br><span class="line">array.push(<span class="string">'ES6'</span>);</span><br><span class="line">array.splice(array.length, <span class="number">0</span>, <span class="string">'ES6'</span>);</span><br><span class="line">array[array.length] = <span class="string">'ES6'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br></pre></td></tr></table></figure><h2 id="不易變的-inmutable"><a href="#不易變的-inmutable" class="headerlink" title="不易變的 (inmutable)"></a><code>不易變的</code> (inmutable)</h2><p>透過 <code>spread</code>、<code>concat</code> 兩種方式，會額外新增一個陣列，並且保持原本的陣列不受到更動。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">'ES5'</span>];</span><br><span class="line"><span class="keyword">let</span> newArray;</span><br><span class="line"></span><br><span class="line">newArray = original.concat(<span class="string">'ES6'</span>);</span><br><span class="line">newArray = [...original, <span class="string">'ES6'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArray);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br><span class="line"><span class="built_in">console</span>.log(original);</span><br><span class="line"><span class="comment">// ['ES5']</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-Ways-to-Append-Item-to-Array-mutable"><a href="#3-Ways-to-Append-Item-to-Array-mutable" class="headerlink" title="3 Ways to Append Item to Array (mutable)"></a>3 Ways to Append Item to Array (mutable)</h2><p>接下來就來看一下將元素塞進陣列的 3 種變動的方式。</p><h3 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h3><p>將元素添加到數組陣列最後的最簡單方法是使用 <code>push</code></p><blockquote><p>The push() method adds one or more elements to the end of an array and returns the new length of the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> pushedArray = [<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line">array.push(<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">array.push(...pushedArray);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9'];</span></span><br></pre></td></tr></table></figure><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h3><blockquote><p>The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"></span><br><span class="line">array.splice(</span><br><span class="line">  array.length, <span class="comment">// 陣列的最後</span></span><br><span class="line">  <span class="number">0</span>,            <span class="comment">// 不更改原本陣列裡的元素 </span></span><br><span class="line">  <span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9'];</span></span><br></pre></td></tr></table></figure><h3 id="Array-length"><a href="#Array-length" class="headerlink" title="Array.length"></a>Array.length</h3><blockquote><p>The length property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> length = array.length; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">array[length] = <span class="string">'ES7'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(zoo); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7'];</span></span><br></pre></td></tr></table></figure><h2 id="2-Ways-to-Append-Item-to-Array-inmutable"><a href="#2-Ways-to-Append-Item-to-Array-inmutable" class="headerlink" title="2 Ways to Append Item to Array (inmutable)"></a>2 Ways to Append Item to Array (inmutable)</h2><p>2 種不變動將元素塞進陣列的方式。</p><h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h3><p>我們可以使用 <code>concat</code> 方法，透過接受值、陣列來添加多個元素。</p><blockquote><p>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> concatArray   = array.concat(<span class="string">'ES7'</span>);</span><br><span class="line"><span class="keyword">const</span> concatArray2  = array.concat(array2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(concatArray);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7']</span></span><br><span class="line"><span class="built_in">console</span>.log(concatArray2);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6']</span></span><br></pre></td></tr></table></figure><h3 id="Spread-syntax"><a href="#Spread-syntax" class="headerlink" title="Spread syntax"></a>Spread syntax</h3><p>我們可以使用 <code>Spread</code> 方法，將每個陣列元素變成為單個元素，這類似於的效果上方的 <code>concat</code></p><blockquote><p>Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>];</span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">'XXX'</span>, <span class="string">'XXX'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// const XXX = [array, array1];</span></span><br><span class="line"><span class="comment">// [ ['ES5', 'ES6'], ['XXX', 'XXX'] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array2 = [...array, <span class="string">'ES7'</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = [...array, <span class="string">'ES7'</span>, <span class="string">'ES8'</span>, <span class="string">'ES9'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array2);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7']</span></span><br><span class="line"> <span class="built_in">console</span>.log(array3);</span><br><span class="line"><span class="comment">// ['ES5', 'ES6', 'ES7', 'ES8', 'ES9']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array); </span><br><span class="line"><span class="comment">// ['ES5', 'ES6'];</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array.prototype.push()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">Array.prototype.splice()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length" target="_blank" rel="noopener">Array.length</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">Array.prototype.concat()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread syntax</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Append-Item-to-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Append-Item-to-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Append Item to Array&quot;&gt;&lt;/a&gt;J 筆記 - Append Item to Array&lt;/h1&gt;&lt;p&gt;在之前一系列有關 &lt;a href=&quot;https://chestertang.site/categories/JavaScript/&quot;&gt;Array&lt;/a&gt; 的文章當中，有看到各種 clone Array 後，將新元素推進陣列會造成的結果，都直接以 &lt;code&gt;push&lt;/code&gt; 來簡單舉例而已。&lt;/p&gt;
&lt;p&gt;這篇將舉例 &lt;code&gt;易變的&lt;/code&gt; (mutable)、&lt;code&gt;不易變的&lt;/code&gt; (inmutable) 的五種方式，雖然實務上都會直接用 &lt;code&gt;inmutable&lt;/code&gt; 的方法，但還是舉例 &lt;code&gt;mutable&lt;/code&gt;，來增加自己印象，就算看到這樣的程式碼的時候，也會知道會造成的結果… &lt;/p&gt;
&lt;h2 id=&quot;易變的-mutable&quot;&gt;&lt;a href=&quot;#易變的-mutable&quot; class=&quot;headerlink&quot; title=&quot;易變的 (mutable)&quot;&gt;&lt;/a&gt;&lt;code&gt;易變的&lt;/code&gt; (mutable)&lt;/h2&gt;&lt;p&gt;透過 &lt;code&gt;push&lt;/code&gt;、&lt;code&gt;splice&lt;/code&gt;、&lt;code&gt;.length&lt;/code&gt; 這三種方式的塞元素，會影響原始的陣列。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.push(&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.splice(array.length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array[array.length] = &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;, &#39;ES6&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;不易變的-inmutable&quot;&gt;&lt;a href=&quot;#不易變的-inmutable&quot; class=&quot;headerlink&quot; title=&quot;不易變的 (inmutable)&quot;&gt;&lt;/a&gt;&lt;code&gt;不易變的&lt;/code&gt; (inmutable)&lt;/h2&gt;&lt;p&gt;透過 &lt;code&gt;spread&lt;/code&gt;、&lt;code&gt;concat&lt;/code&gt; 兩種方式，會額外新增一個陣列，並且保持原本的陣列不受到更動。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; original = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newArray = original.concat(&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newArray = [...original, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;, &#39;ES6&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(original);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;ES5&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Deep Clone Array</title>
    <link href="http://chestertang.site/2020/04/29/zyx0429/"/>
    <id>http://chestertang.site/2020/04/29/zyx0429/</id>
    <published>2020-04-28T16:00:00.000Z</published>
    <updated>2020-04-29T04:32:47.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-Deep-Clone-Array"><a href="#J-筆記-Deep-Clone-Array" class="headerlink" title="J 筆記 - Deep Clone Array"></a>J 筆記 - Deep Clone Array</h1><p>之前有介紹過如何 <a href="https://chestertang.site/2020/04/18/zyx0418/">Clone an Array</a>，但可以知道的問題是，如果今天是 Array 裡面又有更深層的 Array 的話（Deep Array），再複製陣列上就會有點問題，也如同上篇的 Only one level 的結論。因此，這篇就來介紹兩種 Deep Clone Array 的方法吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using JavaScript</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(nestedArray));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Lodash</span></span><br><span class="line">_.cloneDeep(nestedArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Recursion</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">items</span>) =&gt;</span> items.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item) ? clone(item) : item);</span><br><span class="line">clone(nestedArray);</span><br></pre></td></tr></table></figure><h2 id="Copying-a-Value-type"><a href="#Copying-a-Value-type" class="headerlink" title="Copying a Value type"></a>Copying a Value type</h2><p>先來個最基本的數組，這部分應該很好理解，宣告一個 <code>value</code>。而且如果我們更改 <code>valueCopy</code>，不會影響原本的 <code>value</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">9527</span>;</span><br><span class="line"><span class="keyword">let</span> cloneValue = value; </span><br><span class="line"><span class="comment">// clone value</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cloneValue); </span><br><span class="line"><span class="comment">// 9527</span></span><br><span class="line"></span><br><span class="line">cloneValue = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// Change cloneValue</span></span><br><span class="line"><span class="built_in">console</span>.log(cloneValue);</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); </span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="Copying-a-Reference-type"><a href="#Copying-a-Reference-type" class="headerlink" title="Copying a Reference type"></a>Copying a Reference type</h2><p>如果上篇所述，為什麼原始陣列也會受到影響？那是因為複製的不是數組本身，而是指向數組的記憶體位址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = initarray;</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'❌'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "❌"]</span></span><br></pre></td></tr></table></figure><p>因此，有了上篇的解決方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initarray = [<span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initarray2 = [...initarray];</span><br><span class="line"></span><br><span class="line">initarray2.push(<span class="string">'✔️'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray2);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7", "✔️"];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(initarray);</span><br><span class="line"><span class="comment">// ["ES5", "ES6", "ES7"];</span></span><br></pre></td></tr></table></figure><h2 id="Deep-Clone"><a href="#Deep-Clone" class="headerlink" title="Deep Clone"></a>Deep Clone</h2><p>知道了上面的方法後，讓我們現在來看看透過 <code>Spread ...</code> 與 <code>Array.from</code> 雖然可以複製陣列，但只能複製 Only one level 的問題，而無法解決巢狀亦又或者是 <code>Deep Clone</code>。</p><p>可以發現，原本的 <code>nestedArray</code> 的陣列一並沒有改變 <code>ES5</code>，這很符合我們上邊敘述複製 Only one Level 的方法，不過後面的 <code>ES6</code> 就被改為 <code>Deep!!!</code> 了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">const</span> copynestedArray = [...nestedArray];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">copynestedArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">copynestedArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(copynestedArray); <span class="comment">// ['ES0', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray);</span><br><span class="line"><span class="comment">// ['ES5', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br></pre></td></tr></table></figure><h2 id="JSON-amp-Recursion-amp-lodash"><a href="#JSON-amp-Recursion-amp-lodash" class="headerlink" title="JSON &amp; Recursion &amp; lodash"></a>JSON &amp; Recursion &amp; lodash</h2><p>接下來，我們來看看透過 <code>JSON</code> 的實作結果，如果有興趣看 <code>lodash</code> 的方法也可以去官網查看，這是一套滿多人在使用，可以更簡潔寫 code 的 js 套件。</p><blockquote><p><a href="https://lodash.com/docs/" target="_blank" rel="noopener">https://lodash.com/docs/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">let</span> JSONcopynestedArray = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(nestedArray)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">JSONcopynestedArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">JSONcopynestedArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(JSONcopynestedArray); <span class="comment">// ['ES0', ['Deep!!!', ['ES7']], ['ES8']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✔️ Nested array NOT affected</span></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray); <span class="comment">// ['ES5', ['ES6', ['ES7']], ['ES8']]</span></span><br></pre></td></tr></table></figure><p>另外，也可以使用 <code>Recursion 遞迴</code> 來完成複製</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">items</span>) =&gt;</span> items.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item) ? clone(item) : item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nestedArray = [<span class="string">'ES5'</span>, [<span class="string">'ES6'</span>, [<span class="string">'ES7'</span>]], [<span class="string">'ES8'</span>]];</span><br><span class="line"><span class="keyword">var</span> RecursionArray = clone(nestedArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make some changes</span></span><br><span class="line">RecursionArray[<span class="number">0</span>] = <span class="string">'ES0'</span>;</span><br><span class="line">RecursionArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'Deep!!!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(RecursionArray); <span class="comment">// [ 'ES0', [ 'Deep!!!', ['ES7'] ], ['ES8'] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✔️ Nested array NOT affected</span></span><br><span class="line"><span class="built_in">console</span>.log(nestedArray); <span class="comment">// ['ES5', ['ES6', ['ES7']], ['ES8']];</span></span><br></pre></td></tr></table></figure><h2 id="Values-Not-Compatible-with-JSON"><a href="#Values-Not-Compatible-with-JSON" class="headerlink" title="Values Not Compatible with JSON"></a>Values Not Compatible with JSON</h2><blockquote><p>Note!!! 值得注意的是，如果數值與 JSON 不兼容，轉譯的時候會出現錯誤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copynestedArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copynestedArray([<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>]) <span class="comment">// [1, null, 2]</span></span><br><span class="line">copynestedArray([<span class="built_in">document</span>.body, <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>)]) <span class="comment">// [&#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener">JSON.parse()</a></li><li><a href="https://lodash.com/docs/4.17.15#cloneDeep" target="_blank" rel="noopener">_.cloneDeep(value)</a></li><li><a href="https://stackoverflow.com/questions/597588/how-do-you-clone-an-array-of-objects-in-javascript" target="_blank" rel="noopener">How do you clone an Array of Objects in Javascript?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-Deep-Clone-Array&quot;&gt;&lt;a href=&quot;#J-筆記-Deep-Clone-Array&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - Deep Clone Array&quot;&gt;&lt;/a&gt;J 筆記 - Deep Clone Array&lt;/h1&gt;&lt;p&gt;之前有介紹過如何 &lt;a href=&quot;https://chestertang.site/2020/04/18/zyx0418/&quot;&gt;Clone an Array&lt;/a&gt;，但可以知道的問題是，如果今天是 Array 裡面又有更深層的 Array 的話（Deep Array），再複製陣列上就會有點問題，也如同上篇的 Only one level 的結論。因此，這篇就來介紹兩種 Deep Clone Array 的方法吧！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nestedArray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;]], [&lt;span class=&quot;string&quot;&gt;&#39;ES8&#39;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(nestedArray));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using Lodash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_.cloneDeep(nestedArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using Recursion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; clone = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;items&lt;/span&gt;) =&amp;gt;&lt;/span&gt; items.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(item) ? clone(item) : item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clone(nestedArray);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Copying-a-Value-type&quot;&gt;&lt;a href=&quot;#Copying-a-Value-type&quot; class=&quot;headerlink&quot; title=&quot;Copying a Value type&quot;&gt;&lt;/a&gt;Copying a Value type&lt;/h2&gt;&lt;p&gt;先來個最基本的數組，這部分應該很好理解，宣告一個 &lt;code&gt;value&lt;/code&gt;。而且如果我們更改 &lt;code&gt;valueCopy&lt;/code&gt;，不會影響原本的 &lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;9527&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cloneValue = value; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// clone value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(cloneValue); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 9527&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cloneValue = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change cloneValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(cloneValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Copying-a-Reference-type&quot;&gt;&lt;a href=&quot;#Copying-a-Reference-type&quot; class=&quot;headerlink&quot; title=&quot;Copying a Reference type&quot;&gt;&lt;/a&gt;Copying a Reference type&lt;/h2&gt;&lt;p&gt;如果上篇所述，為什麼原始陣列也會受到影響？那是因為複製的不是數組本身，而是指向數組的記憶體位址。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray = [&lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; initarray2 = initarray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initarray2.push(&lt;span class=&quot;string&quot;&gt;&#39;❌&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;, &quot;❌&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(initarray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;, &quot;❌&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因此，有了上篇的解決方案：&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J 筆記 - Remove Array Dup</title>
    <link href="http://chestertang.site/2020/04/19/zyx0419/"/>
    <id>http://chestertang.site/2020/04/19/zyx0419/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-29T03:09:29.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-筆記-ES6-Remove-Array-Duplicates"><a href="#J-筆記-ES6-Remove-Array-Duplicates" class="headerlink" title="J 筆記 - ES6 Remove Array Duplicates"></a>J 筆記 - ES6 Remove Array Duplicates</h1><p>在 Ruby 裡面要做這件事情真的方便許多直接 <code>uniq</code> 就可以完成，但常常被寫好的 <code>method</code> 慣壞了卻想不太到 JS 裡頭該怎麼實作，所以整理一些 <code>Remove Array Duplicates</code> 的方法…</p><h2 id="3-ways-in-ES6"><a href="#3-ways-in-ES6" class="headerlink" title="3 ways in ES6"></a>3 ways in ES6</h2><p>總共在 ES6 裡面有 3 種方法可以實作，而我最喜歡的莫過於 <code>Set</code>，又短又不用想到底裡面做了什麼，不像 <code>filter</code>、<code>reduce</code>，另外也覺得有點像 Ruby 的 <code>uniq</code>，所以寫起來快速又實用～</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1: "Set"</span></span><br><span class="line">[...new <span class="built_in">Set</span>(array)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2: "Filter"</span></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> array.indexOf(item) === index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3: "Reduce"</span></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> </span><br><span class="line">  uniq.includes(item) ? uniq : [...uniq, item], []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// ['Remove', 'ES5', 'ES6', 'ES7']</span></span><br></pre></td></tr></table></figure><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1. Set"></a>1. <code>Set</code></h3><blockquote><p>The Set object lets you store unique values of any type, whether primitive values or object references.</p></blockquote><p>ES6 提供了新的數據結構 <code>Set</code>。它類似於數組，但值都是唯一的，没有重複的值。</p><p>因此我們來看看到底做了什麼…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarray = <span class="keyword">new</span> <span class="built_in">Set</span>(array);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(newarray);</span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// Set(4) &#123;"Remove", "ES5", "ES6", "ES7"&#125;</span></span><br></pre></td></tr></table></figure><p>在結合之前前幾篇的 <a href="https://chestertang.site/2020/04/13/zyx0413/">spread operator</a>、<a href="https://chestertang.site/2020/04/18/zyx0418/">Array.from</a> 將它變成陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarray = <span class="keyword">new</span> <span class="built_in">Set</span>(array);</span><br><span class="line"><span class="keyword">const</span> backToArray = [...newarray];</span><br><span class="line"><span class="keyword">const</span> ArrayfromtoArray = <span class="built_in">Array</span>.from(newarray);</span><br><span class="line"><span class="comment">// RESULT:</span></span><br><span class="line"><span class="comment">// Set(4) ["Remove", "ES5", "ES6", "ES7"]</span></span><br></pre></td></tr></table></figure><h3 id="2-filter"><a href="#2-filter" class="headerlink" title="2. filter"></a>2. <code>filter</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2: "Filter"</span></span><br><span class="line">  array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> array.indexOf(item) === index);</span><br></pre></td></tr></table></figure><p>雖然這樣子就能出現答案，但中間 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.indexOf()</a> 是做了什麼事情呢？</p><blockquote><p>The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    index,</span><br><span class="line">    array.indexOf(item),</span><br><span class="line">    array.indexOf(item) === index,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array.indexOf(item) === index</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>index</th><th>indexOf</th><th>condition</th></tr></thead><tbody><tr><td>Remove</td><td>0</td><td>0</td><td>True</td></tr><tr><td>Remove</td><td>1</td><td>0</td><td>False</td></tr><tr><td>ES5</td><td>2</td><td>2</td><td>True</td></tr><tr><td>ES6</td><td>3</td><td>3</td><td>True</td></tr><tr><td>Remove</td><td>4</td><td>0</td><td>False</td></tr><tr><td>ES7</td><td>5</td><td>5</td><td>True</td></tr></tbody></table><h3 id="2-x-相反"><a href="#2-x-相反" class="headerlink" title="2.x 相反"></a>2.x 相反</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    index,</span><br><span class="line">    array.indexOf(item),</span><br><span class="line">    array.indexOf(item) === index,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array.indexOf(item) !== index</span><br><span class="line">  <span class="comment">// ['Remove', 'Remove']</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>index</th><th>indexOf</th><th>condition</th></tr></thead><tbody><tr><td>Remove</td><td>0</td><td>0</td><td>False</td></tr><tr><td>Remove</td><td>1</td><td>0</td><td>True</td></tr><tr><td>ES5</td><td>2</td><td>2</td><td>False</td></tr><tr><td>ES6</td><td>3</td><td>3</td><td>False</td></tr><tr><td>Remove</td><td>4</td><td>0</td><td>True</td></tr><tr><td>ES7</td><td>5</td><td>5</td><td>False</td></tr></tbody></table><h3 id="3-reduce"><a href="#3-reduce" class="headerlink" title="3. reduce"></a>3. <code>reduce</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3: "Reduce"</span></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> </span><br><span class="line">  uniq.includes(item) ? uniq : [...uniq, item], []);</span><br></pre></td></tr></table></figure><p>同上，雖然這樣子就能出現答案，但中間 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce()</a> 是做了什麼事情呢？</p><blockquote><p>The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'Remove'</span>, <span class="string">'Remove'</span>, <span class="string">'ES5'</span>, <span class="string">'ES6'</span>, <span class="string">'Remove'</span>, <span class="string">'ES7'</span>];</span><br><span class="line"></span><br><span class="line">array.reduce(<span class="function">(<span class="params">uniq, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    item,</span><br><span class="line">    uniq,</span><br><span class="line">    uniq.includes(item),</span><br><span class="line">    uniq.includes(item) ? uniq : [...uniq, item],</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> uniq.includes(item) ? uniq : [...uniq, item]</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><table><thead><tr><th>item</th><th>Accumulator (BEFORE Reducer Function)</th><th>Push to Accumulator?</th><th>Accumulator (AFTER Reducer Function)</th></tr></thead><tbody><tr><td>Remove</td><td>[]</td><td>Yes</td><td>[‘Remove’]</td></tr><tr><td>Remove</td><td>[‘Remove’]</td><td>NO</td><td>[‘Remove’]</td></tr><tr><td>ES5</td><td>[‘Remove’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’]</td></tr><tr><td>ES6</td><td>[‘Remove’, ‘ES5’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td></tr><tr><td>Remove</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td><td>No</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td></tr><tr><td>ES7</td><td>[‘Remove’, ‘ES5’, ‘ES6’]</td><td>Yes</td><td>[‘Remove’, ‘ES5’, ‘ES6’, ‘ES7’]</td></tr></tbody></table><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN web docs Set</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN web docs Array.prototype.filter()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN web docs Array.prototype.reduce()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;J-筆記-ES6-Remove-Array-Duplicates&quot;&gt;&lt;a href=&quot;#J-筆記-ES6-Remove-Array-Duplicates&quot; class=&quot;headerlink&quot; title=&quot;J 筆記 - ES6 Remove Array Duplicates&quot;&gt;&lt;/a&gt;J 筆記 - ES6 Remove Array Duplicates&lt;/h1&gt;&lt;p&gt;在 Ruby 裡面要做這件事情真的方便許多直接 &lt;code&gt;uniq&lt;/code&gt; 就可以完成，但常常被寫好的 &lt;code&gt;method&lt;/code&gt; 慣壞了卻想不太到 JS 裡頭該怎麼實作，所以整理一些 &lt;code&gt;Remove Array Duplicates&lt;/code&gt; 的方法…&lt;/p&gt;
&lt;h2 id=&quot;3-ways-in-ES6&quot;&gt;&lt;a href=&quot;#3-ways-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;3 ways in ES6&quot;&gt;&lt;/a&gt;3 ways in ES6&lt;/h2&gt;&lt;p&gt;總共在 ES6 裡面有 3 種方法可以實作，而我最喜歡的莫過於 &lt;code&gt;Set&lt;/code&gt;，又短又不用想到底裡面做了什麼，不像 &lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;，另外也覺得有點像 Ruby 的 &lt;code&gt;uniq&lt;/code&gt;，所以寫起來快速又實用～&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1: &quot;Set&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...new &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;(array)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2: &quot;Filter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.filter(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;item, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; array.indexOf(item) === index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3: &quot;Reduce&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;uniq, item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uniq.includes(item) ? uniq : [...uniq, item], []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&#39;Remove&#39;, &#39;ES5&#39;, &#39;ES6&#39;, &#39;ES7&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;1-Set&quot;&gt;&lt;a href=&quot;#1-Set&quot; class=&quot;headerlink&quot; title=&quot;1. Set&quot;&gt;&lt;/a&gt;1. &lt;code&gt;Set&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The Set object lets you store unique values of any type, whether primitive values or object references.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ES6 提供了新的數據結構 &lt;code&gt;Set&lt;/code&gt;。它類似於數組，但值都是唯一的，没有重複的值。&lt;/p&gt;
&lt;p&gt;因此我們來看看到底做了什麼…&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Remove&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ES7&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newarray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newarray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RESULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set(4) &amp;#123;&quot;Remove&quot;, &quot;ES5&quot;, &quot;ES6&quot;, &quot;ES7&quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://chestertang.site/tags/JavaScript/"/>
    
  </entry>
  
</feed>
